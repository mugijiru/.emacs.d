<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>org-mode on 麦汁&#39;s Emacs Config</title>
    <link>https://mugijiru.github.io/.emacs.d/org-mode/</link>
    <description>Recent content in org-mode on 麦汁&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language><atom:link href="https://mugijiru.github.io/.emacs.d/org-mode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. 基本設定</title>
      <link>https://mugijiru.github.io/.emacs.d/org-mode/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/org-mode/base/</guid>
      <description>概要 ここでは org-mode 周りのベースとなる設定を書いているつもり。といいつつ、まだ書き方が雑だなと思っている。またその内にでも修正しよう
org-mode のインストール Emacs に標準で入っている org-mode は大体古過ぎるのでとりあえずデフォルトで入ってるやつは削除しちゃって el-get でインストールしている。
(el-get-bundle org-mode :checkout &amp;#34;release_9.3.6&amp;#34;) なんか入れてるパッケージの問題か、依存関係が解決できなかったので Git から入れた上でバージョンを固定している。
バージョンぐらいはそのうち上げたいね
org 用ディレクトリの指定 org-mode のファイルを保存するデフォルトのディレクトリを指定している。
デフォルトだと ~/org なのだけどホームディレクトリを汚したくないのと基本的に Mac を使ってるので ~/Documents/org というディレクトリを用意してそこにファイルを置いている。
(setq org-directory (expand-file-name &amp;#34;~/Documents/org/&amp;#34;)) タスク管理ファイルのフォルダの指定 タスク管理ファイルがいくつかに分かれているがそれらをまとめて ~/Documents/org/tasks フォルダに置いている。
(setq my/org-tasks-directory (concat org-directory &amp;#34;tasks/&amp;#34;)) とりあえずこの my/org-tasks-directory という変数を用意することであちらこちらでこれを使い回している。
タスクの状態管理のキーワード指定 org-mode といえば TODO 管理で使ってる人も多いと思う。自分も最初はそういう使い方から始めたし、今でもそれをメインにして使っている。
そして TODO の状態がデフォルトでは
 TODO DONE  の2つしかないけど、それでは足りないので昔見たインターネットのどこかの記事を参考に以下のように設定している。
(setq org-todo-keywords &amp;#39;((sequence &amp;#34;TODO&amp;#34; &amp;#34;DOING(!)&amp;#34; &amp;#34;WAIT&amp;#34; &amp;#34;|&amp;#34; &amp;#34;DONE(!)&amp;#34; &amp;#34;SOMEDAY(s)&amp;#34;))) 初期状態は TODO で、作業開始時点で DOING にして待ちが発生したら WAIT にして完了したら DONE にしている。</description>
    </item>
    
    <item>
      <title>2. org-babel</title>
      <link>https://mugijiru.github.io/.emacs.d/org-mode/org-babel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/org-mode/org-babel/</guid>
      <description>概要 ここでは org-babel の設定をまとめている。
org-export-blocks-format-plantuml org-mode で PlantUML の図を出力する拡張を入れている。
(el-get-bundle org-export-blocks-format-plantuml) のだけれど https://www.emacswiki.org/emacs/org-export-blocks-format-plantuml.el を見ると Obsolute と書いてますね。今度消さなきゃ。
org-babel で評価可能な言語の指定 なんか普段から使いそうな奴をとりあえず選定しているつもり。
(org-babel-do-load-languages &amp;#39;org-babel-load-languages &amp;#39;((plantuml . t) (sql . t) (gnuplot . t) (emacs-lisp . t) (shell . t) (js . t) (ruby . t)))  js, ruby 仕事でメインで使ってる言語なので入れている。 shell 入れてる方が便利そう、ぐらいの雑な理由。 sql メモしておいて手元から実行できると便利そう plantuml 図の出力。一番使ってる。 gnuplot 趣味で入れてみているけど実際使う機会ほとんどないよなって気がしてきている。  org-babel-execute 後に画像を再表示 PlantUML の処理をすることが多いので以下の hook を設定することで実行後に画像を再表示するようにしている
(add-hook &amp;#39;org-babel-after-execute-hook &amp;#39;org-redisplay-inline-images) org-babel の非同期実行 非同期に org-babel の source を実行するために ob-async を入れている</description>
    </item>
    
    <item>
      <title>3. 予定のカレンダー表示</title>
      <link>https://mugijiru.github.io/.emacs.d/org-mode/calendar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/org-mode/calendar/</guid>
      <description>概要 普段の予定をカレンダー表示で見れると嬉しいな〜と思って calfw で予定が見れるようにしている。
が、今ここに書いているのはまだ設定の一部である。 agenda 部分と関わっていてまだうまく整理しきれてない。
日本の休日 calfw に日本の休日を表示できるように japanese-holidays を入れている。
(el-get-bundle japanese-holidays) (require &amp;#39;japanese-holidays) (setq calendar-holidays (append japanese-holidays)) もっとちゃんと設定したら Emacs のデフォルトのカレンダーでも休日表示がわかりやすくなって良いので今度設定し直す。
その時には多分 org-mode カテゴリではないところに移動するはず。
calfw calfw を el-get で入れた上で、 org-mode と連携するように calfw-org も require している。
(el-get-bundle calfw) (require &amp;#39;calfw) (require &amp;#39;calfw-org) ここではまだこれ以上のことはしてない</description>
    </item>
    
    <item>
      <title>4. Agenda 関係の設定</title>
      <link>https://mugijiru.github.io/.emacs.d/org-mode/agenda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/org-mode/agenda/</guid>
      <description>概要 org-mode の素晴らしい機能の1つに Agenda というものがある。
これは色々な org ファイルに散らばった情報を1つのビューに表示するための機能で、使いこなすとファイルがバラけていてもいい感じに情報が抽出できて便利なやつ。
まあ麦汁さんはまだ使いこなせてないけど。
それでもいくつか Agenda 用の View を用意したりして日常業務に役立てている。
org-super-agenda のインストール org-mode のデフォルトの agenda だと表示周りが物足りなかったので org-super-agenda を導入している。
(el-get-bundle org-super-agenda) 週の始まりを日曜日に設定 麦汁さんは週のスタートを日曜日とする派なので org-agenda の週の始まりも日曜日に設定している
(setq org-agenda-start-on-weekday 0) 1日単位をデフォルト表示に設定 1週間表示よりも「今日って何するんだっけ」みたいな使い方が多いので 1日を表示単位としている。
(setq org-agenda-span &amp;#39;day) 週単位で何をするかについては今のところ記憶力で対応している。
あと、基本的にカスタムビューを使ってるのでこれの影響は受けてるかどうか微妙。
agenda の対象ファイルを指定 org-agenda を使う時に抽出対象とする org ファイルを指定している。
(setq org-agenda-files &amp;#39;(&amp;#34;~/Documents/org/ical.org&amp;#34; &amp;#34;~/Documents/org/tasks/&amp;#34;)) けどカスタムビューを多用しているので多分この設定ちゃんと活かしてない。 ical.org とか更新してないし……。
agenda の表示周りの設定 agenda に時間の区切りを入れない org-agenda-use-time-grid を t にしていると 10:00 とかのキリがいいところに区切り線を表示してくれるのだが日報提出時には邪魔だし、普段使いでもその区切り線はあっても邪魔っぽいので nil にして表示しないようにしている。
(setq org-agenda-use-time-grid nil) ブロック間の区切り表示 ブロックとブロックの区切りをハイフン繋ぎの文字列で指定している。
文字列を指定することで固定の長さの区切り文字になるが実は ?</description>
    </item>
    
    <item>
      <title>5. org-capture</title>
      <link>https://mugijiru.github.io/.emacs.d/org-mode/org-capture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/org-mode/org-capture/</guid>
      <description>概要 org-capture は org-mode 用にさくっとメモを取るための機能。
org-capture-ical-file https://qiita.com/takaxp/items/0b717ad1d0488b74429d を参考に設定したやつ。
今は別で Google Calendar 連携しているので使ってない……。
;; org-capture (defvar org-capture-ical-file (concat org-directory &amp;#34;ical.org&amp;#34;)) (setq org-capture-ical-file (concat org-directory &amp;#34;ical.org&amp;#34;)) capture 用ファイルを変数定義 変数定義しなくてもいい気がしないでもないけどとりあえず変数定義している。バラバラの変数にするよりも alist とか plist とかにする方が適切な気がする
(setq my/org-capture-interrupted-file (concat my/org-tasks-directory &amp;#34;interrupted.org&amp;#34;)) (setq my/org-capture-inbox-file (concat my/org-tasks-directory &amp;#34;inbox.org&amp;#34;)) (setq my/org-capture-pointers-file (concat my/org-tasks-directory &amp;#34;pointers.org&amp;#34;)) (setq my/org-capture-impediments-file (concat org-directory &amp;#34;work/scrum/impediments.org&amp;#34;)) (setq my/org-capture-memo-file (concat org-directory &amp;#34;memo.org&amp;#34;)) (setq my/org-capture-sql-file (concat org-directory &amp;#34;work/sql.org&amp;#34;)) (setq my/org-capture-shopping-file (concat my/org-tasks-directory &amp;#34;shopping.org&amp;#34;)) (setq my/org-capture-2020-summary-file (concat org-directory &amp;#34;private/2020_summary.</description>
    </item>
    
  </channel>
</rss>

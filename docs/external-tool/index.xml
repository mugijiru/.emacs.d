<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>外部連携ツール設定 on 麦汁&#39;s Emacs Config</title>
    <link>https://mugijiru.github.io/.emacs.d/external-tool/</link>
    <description>Recent content in 外部連携ツール設定 on 麦汁&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language><atom:link href="https://mugijiru.github.io/.emacs.d/external-tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>emacs-kibela</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/emacs-kibela/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/emacs-kibela/</guid>
      <description>概要 emacs-kibela は Emacs で Kibela を操作するための自作のパッケージ。あまり機能は実装されていないけど、テンプレートから記事を書いたりする程度のことはできる
インストール MELPA には登録してないし el-get にもレシピを登録していないので自前で el-get の recipe を用意している
(:name emacs-kibela :website &amp;#34;https://github.com/mugijiru/emacs-kibela&amp;#34; :description &amp;#34;Kibela client.&amp;#34; :type github :branch &amp;#34;main&amp;#34; :pkgname &amp;#34;mugijiru/emacs-kibela&amp;#34; :depends (graphql request markdown-mode)) そして el-get-bundle でインストールしている
(el-get-bundle emacs-kibela) 設定 .authinfo.gpg に認証情報を突っ込んでいるのでそこから認証情報を拾って来て set している
(custom-set-variables &amp;#39;(kibela-auth-list `((&amp;#34;Work&amp;#34; ,(plist-get (nth 0 (auth-source-search :host &amp;#34;emacs-kibela-work&amp;#34;)) :team) ,(funcall (plist-get (nth 0 (auth-source-search :host &amp;#34;emacs-kibela-work&amp;#34; :max 1)) :secret))) (&amp;#34;Private&amp;#34; ,(plist-get (nth 0 (auth-source-search :host &amp;#34;emacs-kibela-private&amp;#34;)) :team) ,(funcall (plist-get (nth 0 (auth-source-search :host &amp;#34;emacs-kibela-private&amp;#34; :max 1)) :secret)))))) 自前の関数 ivy-kibela と連携して、最近投稿された記事を Emacs の中で開くためのコマンドを用意している。</description>
    </item>
    
    <item>
      <title>emacs-w3m</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/emacs-w3m/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/emacs-w3m/</guid>
      <description>概要 w3m という和製のテキストブラウザを Emacs 上で使うためのパッケージ。つまり w3m 自体もインストールしておく必要がある。
インストール emacs-w3m は el-get で入れられるので以下のようにして入れている
(el-get-bundle emacs-w3m) 今はこれだけしか入れてない。昔の設定はどこかにいっちゃった……。</description>
    </item>
    
    <item>
      <title>esa.el</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/esa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/esa/</guid>
      <description>概要 esa.el は esa.io と連携するためのパッケージ。大体直接 Web で書くので活用はできてない……
インストール・設定 レシピは自前で用意している
(:name esa :description &amp;#34;Interface to esa.io (\( ⁰⊖⁰)/)&amp;#34; :type github :pkgname &amp;#34;nabinno/esa.el&amp;#34;) そして el-get で入れている。
設定は別ファイルに分離している。authinfo に移動したい
(el-get-bundle esa) (my/load-config &amp;#34;my-esa-config&amp;#34;) けど今は esa 使ってないのよね。</description>
    </item>
    
    <item>
      <title>forge</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/forge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/forge/</guid>
      <description>概要 forge は magit と github を連携させるやつ。一応入れているけど実は使えてないのであまりこの設定を呼んでも意味はなさそう
インストール いつも通り el-get でインストールする。ただし依存関係で必要なので emacs-sqlite3-api も合わせて入れている
(el-get-bundle emacs-sqlite3-api) (el-get-bundle forge) 読み込み magit の拡張なので magit を読み込んで後に読み込まれるようにしている。依存で必要な sqlite3 も合わせて require している。
(with-eval-after-load &amp;#39;magit (require &amp;#39;sqlite3) (require &amp;#39;forge)) flycheck の有効化 Pull Request を作る時に text-lint で指摘されたいのでそのタイミングで flycheck を有効化している
(defun my/forge-post-mode-hook () (flycheck-mode 1)) (with-eval-after-load &amp;#39;forge (add-hook &amp;#39;forge-post-mode-hook &amp;#39;my/forge-post-mode-hook)) その他 リポジトリのコミット数が多いとまともに使えない感じだけどどうしたらいいの。</description>
    </item>
    
    <item>
      <title>git-messenger</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/git-messenger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/git-messenger/</guid>
      <description>概要 git-messenger は指定した行のコミット時の情報を表示してくれるやつ簡単に最終コミットの情報を見るのに便利
インストール git-messenger は el-get のレシピに登録されているのでそのまま el-get-bundle を使ってインストールできる
(el-get-bundle git-messenger) 設定 デフォルトでは commit message だけを表示するがより詳細な情報を見たいので git-messenger:show-detail を t に設定してコミット日時や author も表示するようにしている
(custom-set-variables &amp;#39;(git-messenger:show-detail t)) magit を利用しているので git-messenger:use-magit-popup も有効にしても良いかもしれない
キーバインド 起動には pretty-hydra-usefull-commands で C を叩くと起動するようにしている。
起動後は、デフォルトでキーバインドが定義されているので https://github.com/emacsorphanage/git-messenger#key-bindings の通りの操作ができる</description>
    </item>
    
    <item>
      <title>google-this</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/google-this/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/google-this/</guid>
      <description>概要 google-this は Google 検索を Emacs の中から行えるやつ。
インストール いつも通り el-get でインストール
(el-get-bundle google-this) で、本来の使い方だとこのあとに
(google-this-mode 1) とやって有効化することになるがそれをしても google-this のデフォルトキーバインドが設定されるぐらいで自分はそのデフォルトキーバインドを使う気がないので有効化はしてない。
キーバインド キーバインドは Hydra で設定しているが、 google-translate と統合したので キーバインド &amp;gt; Google 連携 に記載している。</description>
    </item>
    
    <item>
      <title>google-translate</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/google-translate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/google-translate/</guid>
      <description>概要 google-translate は Google 翻訳する機能を提供するパッケージ。
インストール レシピは自前で用意している
(:name google-translate :description &amp;#34;Emacs interface to Google Translate&amp;#34; :type github :pkgname &amp;#34;atykhonov/google-translate&amp;#34;) そして el-get でインストール
(el-get-bundle google-translate) 関数のオーバーライド どうも最新版でも壊れっぱなしのようなので https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888 にあるように関数を上書きしている。
(with-eval-after-load &amp;#39;google-translate-tk (defun google-translate--search-tkk () &amp;#34;Search TKK.&amp;#34; (list 430675 2721866130))) google-translate-tk に定義されていて、それが読まれた後に上書きしないといけないので with-eval-after-load を使っている。
default-ui の読み込み Google Translate は UI を defauult と smooth のどちらかから選べるようになっている。
default だと
google-translate-default-source-language google-translate-default-target-language を設定しておいて
M-x google-translate-at-point source → target の翻訳 M-x google-translate-at-point-reverse target → source の翻訳 という使い方をする。</description>
    </item>
    
    <item>
      <title>magit</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/magit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/magit/</guid>
      <description>概要 magit は Emacs の上で Git の色々な操作ができるやつ。結構使いやすいのでオススメなやつ。
forge を使うと GitHub や GitLab とも連携できてさらに便利、なはず。
インストール (el-get-bundle magit) その他設定 ghub を load-path に入れないとうまくいかなかった時があったので入れてたり、 orgit を入れていたり
(with-eval-after-load &amp;#39;magit (add-to-list &amp;#39;load-path (expand-file-name &amp;#34;~/.emacs.d/el-get/ghub/lisp&amp;#34;))) (el-get-bundle orgit) あと ghub は compat に依存するようになったのでとりあえず自前で recipe を用意している
(:name ghub :type github :description &amp;#34;Minuscule client for the Github API&amp;#34; :pkgname &amp;#34;magit/ghub&amp;#34; :depends (let-alist treepy compat) :branch &amp;#34;main&amp;#34; :info &amp;#34;docs&amp;#34; :load-path &amp;#34;lisp/&amp;#34; :compile &amp;#34;lisp/&amp;#34; ;; Use the Makefile to produce the info manual, el-get can ;; handle compilation and autoloads on its own.</description>
    </item>
    
    <item>
      <title>notify-slack</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/notify-slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/notify-slack/</guid>
      <description>概要 Emacs から Slack に通知するための自作関数。実体は同じく自作の外部コマンドを叩いているだけである。
何に使ってるかというと org-clock-in, org-clock-out の時に作業の開始と終了を分報チャンネルに投稿しているだけである。作業の可視化である。
実装 分報チャンネル設定用の変数 通知先のチャンネル名を格納する変数が必要なので defvar で定義しておく
(defvar my/notify-slack-times-channel nil) 送信するコマンド start-process を使って外部コマンドを叩いている。
(defun my/notify-slack (channel text) (if my/notify-slack-enable-p (start-process &amp;#34;my/org-clock-slack-notifier&amp;#34; &amp;#34;*my/org-clock-slack-notifier*&amp;#34; &amp;#34;my-slack-notifier&amp;#34; channel text))) my/notify-slack-enable-p という変数が nil だと大分コマンドが実行されないようになっている。
Slack 連携を Toggle するコマンド 連携したい時としたくない時があるので送信したりしなかったりを切り替えられるコマンドを用意している。
中身は何をしているかというと上に書いた my/notify-slack-enable-p という変数を切り替えているだけ。
(defun my/notify-slack-toggle () (interactive) (if my/notify-slack-enable-p (setq my/notify-slack-enable-p nil) (setq my/notify-slack-enable-p t))) 分報チャンネル投稿関数 「分報チャンネル投稿関数」としているけどデフォルト投稿先に投稿するための関数というような扱いの関数。
単純に前出の my/notify-slack 関数の第一引数に my/notify-slack-times-channel という変数を設定してそのチャンネルに向けて投稿するだけ。
(defun my/notify-slack-times (text) (if my/notify-slack-times-channel (my/notify-slack my/notify-slack-times-channel text))) 設定 あまり見せたくない設定ファイルを別ファイルに分離しているのでそれを読み出している。</description>
    </item>
    
    <item>
      <title>todoist</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/todoist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/todoist/</guid>
      <description>概要 emacs-todoist は Todo 管理サービスである Todoist と連携するためのパッケージ。 org-mode に依存している。
インストール まず以下のレシピを用意している
(:name emacs-todoist :website &amp;#34;https://github.com/abrochard/emacs-todoist&amp;#34; :description &amp;#34;Emacs interface to Todoist&amp;#34; :type github :pkgname &amp;#34;abrochard/emacs-todoist&amp;#34;) その上で以下のようにしてインストールしている
(el-get-bundle emacs-todoist) 設定 API キーを設定するので別ファイルに分離している。いつか .authinfo.gpg に移動しようかなと思っているけどそもそも最近 TODOIST 使ってない……
(with-eval-after-load &amp;#39;todoist (setq todoist-token (funcall (plist-get (nth 0 (auth-source-search :host &amp;#34;todoist.com&amp;#34; :max 1)) :secret)))) </description>
    </item>
    
    <item>
      <title>twmode</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/twmode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/twmode/</guid>
      <description>概要 twmode は Emacs 上で動く Twitter クライアント。
今でもたまーに使っている。勉強会に参加して実況する時などに。
インストール いつも通り el-get でインスコしている。
(el-get-bundle twittering-mode) 設定 (setq twittering-username &amp;#34;mugijiru&amp;#34;) (setq twittering-jojo-mode t) (setq twittering-timer-interval 60) ;(setq twittering-auth-method &amp;#39;xauth) (setq twittering-auth-method &amp;#39;oauth) (setq twittering-update-status-function &amp;#39;twittering-update-status-from-minibuffer) (setq twittering-status-format &amp;#34;%i %S(%s)%p, %@:\n%FILL{ %T // from %f%L%r%R}\n &amp;#34;) (setq twittering-retweet-format &amp;#34;RT @%s %t&amp;#34;) (setq twittering-display-remaining t) なんか色々設定しているけど、まあ大体こんな感じ。
ユーザー名の指定 twittering-jojo-mode を有効化 自動リロードの間隔を60秒に設定 OAuth で認証するように設定 投稿時にミニバッファから投稿するように設定 各ツイートのフォーマット指定 旧式の Retweet 時のフォーマット指定 late limit をmode-line に表示 キーバインド (let ((km twittering-mode-map)) (define-key km (kbd &amp;#34;SPC&amp;#34;) &amp;#39;scroll-up) (define-key km (kbd &amp;#34;b&amp;#34;) &amp;#39;scroll-down) (define-key km (kbd &amp;#34;g&amp;#34;) &amp;#39;beginning-of-buffer) (define-key km (kbd &amp;#34;G&amp;#34;) &amp;#39;end-of-buffer) (define-key km (kbd &amp;#34;&amp;lt;&amp;#34;) &amp;#39;beginning-of-buffer) (define-key km (kbd &amp;#34;&amp;gt;&amp;#34;) &amp;#39;end-of-buffer) (define-key km (kbd &amp;#34;R&amp;#34;) &amp;#39;twittering-current-timeline) (define-key km (kbd &amp;#34;F&amp;#34;) &amp;#39;twittering-favorite) (define-key km (kbd &amp;#34;\C-cfd&amp;#34;) &amp;#39;twittering-unfavorite) (define-key km (kbd &amp;#34;\C-c[&amp;#34;) &amp;#39;twittering-follow) (define-key km (kbd &amp;#34;\C-c]&amp;#34;) &amp;#39;twittering-unfollow) nil) Key 効果 SPC スクロールする b 上にスクロールする g, &amp;lt; バッファの先頭に移動 G, &amp;gt; バッファの末尾に移動 R 現在のタイムラインを更新 F ふぁぼる C-c f d ふぁぼ取り消し C-c [ フォローする C-c ] アンフォロー </description>
    </item>
    
    <item>
      <title>wakatime-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/wakatime-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/wakatime-mode/</guid>
      <description>概要 wakatime-mode は WakaTime というサービスと連携するためのパッケージ。
WakaTime は自分がどのプロジェクトの作業をしているかを計測してくれるようなツール。普段の行動の改善に使えるかもしれないので、なんとなく連携してみている。
インストール いつも通り el-get から入れている
(el-get-bundle wakatime-mode) APIキーの設定 APIキーは .authinfo.gpg に保存しているのでそこから引っ張り出している。
(custom-set-variables &amp;#39;(wakatime-cli-path &amp;#34;/usr/bin/wakatime&amp;#34;) &amp;#39;(wakatime-api-key (funcall (plist-get (nth 0 (auth-source-search :host &amp;#34;wakatime.com&amp;#34; :max 1)) :secret)))) 有効化 Emacs を使っている間は常に有効になっていて欲しいので global-wakatime-mode を有効にしている。
(global-wakatime-mode 1) APIキーが取れてない時はやたらエラーを吐くので何かしら調整はしてもいいかもしれない。
(if (boundp &amp;#39;wakatime-api-key) (global-wakatime-mode 1)) みたいにして API キーが取れている時だけ有効にするとかね。</description>
    </item>
    
    <item>
      <title>ブラウザ設定</title>
      <link>https://mugijiru.github.io/.emacs.d/external-tool/browse-url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/external-tool/browse-url/</guid>
      <description>browse-url の時の開くプログラムの指定。
(setq browse-url-generic-program &amp;#34;vivaldi&amp;#34;) Vivaldi を指定しているが、最近 Emacs から何かブラウザ立ち上げても Firefox がいつも開いているし、この設定ほんとうに生きてる? って感じ。
WSL2 を入れてる Windows の方は Vivladi 入れてないし Mac の方は入れてるけど別に Emacs から Vivaldi が立ち上がるのも観測してないしほんと謎……。</description>
    </item>
    
  </channel>
</rss>

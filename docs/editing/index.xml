<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ファイル編集/入力補助 on 麦汁&#39;s Emacs Config</title>
    <link>https://mugijiru.github.io/.emacs.d/editing/</link>
    <description>Recent content in ファイル編集/入力補助 on 麦汁&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language><atom:link href="https://mugijiru.github.io/.emacs.d/editing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>auto-insert</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/auto-insert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/auto-insert/</guid>
      <description>概要 auto-insert はファイルを新規作成した時にファイル名に応じたテンプレートを挿入する機能。
Emacs が標準で持ってるライブラリなのでインストールは不要
設定 Emacs の設定は .emacs.d の中に閉じ込めたいので auto-insert のテンプレートも ~/.emacs.d/insert に閉じ込める設定にしている。
(custom-set-variables &amp;#39;(auto-insert-directory &amp;#34;~/.emacs.d/insert/&amp;#34;)) 有効化 あとは単に有効化している。
(auto-insert-mode 1) 他の設定 ファイル名を正規表現でマッチさせてテンプレートが選択されるので各言語やフレームワーク毎に設定を入れることにしている。
実際は今のところ inits/41-vue.el でのみ追加設定を入れている。</description>
    </item>
    
    <item>
      <title>company-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/company-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/company-mode/</guid>
      <description>概要 company-mode は Emacs での補完機能を提供してくれるパッケージです。プラグイン式に拡張しやすいのが特徴っぽい。
インストール いつも透り el-get から入れている
(el-get-bundle company-mode) 設定 ほとんど設定は入れていない。有効な時に C-s を入力すると検索ができる程度。
というのも最近の更新で、デフォルトが結構好みのキーバインドになったのでキーバインドはこだわる必要がなくなったのと、ついでに色もそこで好みな感じになってくれた。
というわけで設定は以下のようにとてもシンプル。
(with-eval-after-load &amp;#39;company ;; active (define-key company-active-map (kbd &amp;#34;C-s&amp;#34;) &amp;#39;company-search-candidates)) それと最近追加された company-show-quick-access を有効にしている。
(custom-set-variables &amp;#39;(company-show-quick-access t)) これを有効にしていると補完候補の末尾に quick access key が表示されて例えば4行目なら 4 とか表示されるのでそこで M-4 とか入力すると4行目が選択されて便利
その他 グローバルでは有効にしていなくて各モードで有効にするような hook を入れている。
グローバルで有効でもいい気がしている。</description>
    </item>
    
    <item>
      <title>emojify</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/emojify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/emojify/</guid>
      <description>概要 emojify は :smile: のような入力を笑顔の絵文字が表示されたりするようにするパッケージ。
文書を書く時に emojify で絵文字に置き換わるような文字列を入れておくと文書が華やかになって良いぞ!
インストール いつも通り el-get で入れている。何か依存でもあるのが別途 dash.el も読み込んでる。
(el-get-bundle emojify) (el-get-bundle dash) dash.el は他でも使うので、ライブラリの読み込みのところで対応した方が良さそうだな。今度対応しよう。
有効化 emojify がグローバルに有効になるようにしている。
mode-line でも有効になるようにしているので mode-line のカスタマイズ時に emojify で装飾することもできる。今そんなことやってないけど。
(global-emojify-mode 1) (global-emojify-mode-line-mode 1) </description>
    </item>
    
    <item>
      <title>multiple-cursors</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/multiple-cursors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/multiple-cursors/</guid>
      <description>概要 multiple-cursors はカーソルを増やせるやつ。複数箇所を同時に編集できるようになって便利。
インストール el-get からインストールしている
(el-get-bundle multiple-cursors) キーバインド キーバインドは別途定義している。もうちょっと真面目に定義したい</description>
    </item>
    
    <item>
      <title>smartparens</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/smartparens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/smartparens/</guid>
      <description>概要 smartparens はカッコとかクォートとかのペアになるようなものの入力補助をしてくれるやつ。
strict モードだとペアが崩れないように強制するので雑に C-k で行削除しててもペアが維持されて便利。
インストール いつも透り el-get で導入している
(el-get-bundle smartparens) 設定 実は導入して間もないので、提供されてるオススメ設定のみ突っ込んでいる。オススメ設定は別途 reqiure したら良いという作りなので、以下のようにして突っ込んでいる。
(require &amp;#39;smartparens-config) その他 各言語の hook で smartparens-strict-mode を有効にしている。なんか常に有効だと困りそうな気がしたので。</description>
    </item>
    
    <item>
      <title>undo-fu</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/undo-fu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/undo-fu/</guid>
      <description>概要 undo-fu はシンプルな undo/redo 機能を提供してくれるやつ。
昔はもっと色々できる undo-tree を使っていたけどそっちにバグがあるっぽいので乗り換えた。
インストール (el-get-bundle undo-fu) キーバインド 別の場所で定義しているけど、以下のキーバインドにしている。
   Key 効果     C-/ undo   C-M-/ redo    </description>
    </item>
    
    <item>
      <title>view-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/view-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/view-mode/</guid>
      <description>概要 view-mode は Emacs に標準で組込まれているモードで、バッファを閲覧専用にする機能を提供してくれるやつ。コードを眺めたい時などに使っている。
キーバインド view-mode の時は文字入力をする必要がないので通常のモードの時とは違うキーバインドが使えるようにしている。
(defun my/setup-view-mode-keymap () (let ((keymap view-mode-map)) (define-key keymap (kbd &amp;#34;h&amp;#34;) &amp;#39;backward-char) (define-key keymap (kbd &amp;#34;j&amp;#34;) &amp;#39;next-line) (define-key keymap (kbd &amp;#34;k&amp;#34;) &amp;#39;previous-line) (define-key keymap (kbd &amp;#34;l&amp;#34;) &amp;#39;forward-char) (define-key keymap (kbd &amp;#34;e&amp;#34;) &amp;#39;forward-word) (define-key keymap (kbd &amp;#34;b&amp;#34;) &amp;#39;scroll-down) (define-key keymap (kbd &amp;#34;SPC&amp;#34;) &amp;#39;scroll-up) (define-key keymap (kbd &amp;#34;g&amp;#34;) &amp;#39;beginning-of-buffer) (define-key keymap (kbd &amp;#34;G&amp;#34;) &amp;#39;end-of-buffer) (define-key keymap (kbd &amp;#34;&amp;lt;&amp;#34;) &amp;#39;beginning-of-buffer) (define-key keymap (kbd &amp;#34;&amp;gt;&amp;#34;) &amp;#39;end-of-buffer)))    Key 効果     h 1文字戻る   j 1行下がる   k 1行上がる   l 1文字進む   e 単語の直後に移動   b 1スクロール戻る   SPC 1スクロール進む   g, &amp;lt; バッファの先頭に移動   G, &amp;gt; バッファの末尾に移動    適当だけど Vim の通常モードの時みたいな操作ができるようにしている。</description>
    </item>
    
    <item>
      <title>whitespace</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/whitespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/whitespace/</guid>
      <description>概要 whitespace-mode は Emacs に標準添付されている、空白文字を可視化したりするためのモード。
全角空白を可視化したり、行末の空白を可視化したりしておくと便利なので入れている。
設定 (require &amp;#39;whitespace) 可視化対象 可視化対象の空白について設定している。
(setq whitespace-style &amp;#39;(face trailing tabs spaces empty space-mark tab-mark))    値 意味     face face による可視化を有効にする。これがないと *-mark 以外が有効にならない   trailing 行末の空白を可視化する   tabs タブ文字の可視化   spaces 空白の可視化。ただし後の設定で全角のみを可視化するようにている   empty バッファの前後に空行があれば可視化   space-mark 空白文字を別の文字に置き換える設定。置き換え文字は後述   tab-mark タブ文字を別の文字に置き換える設定。置き換え文字は後述    他にも lines, lines-tail, indentation, big-indent, newline-mark などがある
lines-tail あたりを使うと1行80文字制限でコーディングする時などに便利かもしれないなって思ってる。設定したことがないからわからんが……。</description>
    </item>
    
    <item>
      <title>yasnippet</title>
      <link>https://mugijiru.github.io/.emacs.d/editing/yasnippet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/editing/yasnippet/</guid>
      <description>概要 yasnippet はテンプレートを挿入する機能を持ったパッケージ。 Emacs でそこそこ何かを書いている人なら大体知ってるような有名なやつだと思う。
インストール いつも通り el-get でインストール
(el-get-bundle yasnippet) 有効化 どこでも使いたいぐらい便利なやつなので global に有効化している
(yas-global-mode 1) キーバインド 基本的に覚えられないので Hydra を使って定義している
(with-eval-after-load &amp;#39;pretty-hydra (pretty-hydra-define yasnippet-hydra (:separator &amp;#34;-&amp;#34; :title &amp;#34;Yasnippet&amp;#34; :foreign-key warn :quit-key &amp;#34;q&amp;#34; :exit t) (&amp;#34;Edit&amp;#34; ((&amp;#34;n&amp;#34; yas-new-snippet &amp;#34;New&amp;#34;) (&amp;#34;v&amp;#34; yas-visit-snippet-file &amp;#34;Visit&amp;#34;)) &amp;#34;Other&amp;#34; ((&amp;#34;i&amp;#34; yas-insert-snippet &amp;#34;Insert&amp;#34;) (&amp;#34;l&amp;#34; yas-describe-tables &amp;#34;List&amp;#34;) (&amp;#34;r&amp;#34; yas-reload-all &amp;#34;Reload all&amp;#34;)))))    Key 効果     n 現在のメジャーモード用に新しい snippet を作る   v 現在のメジャーモードの登録済 snippet ファイルを開く   i snippet の挿入。選択は ivy で行われる。   l 現在のメジャーモードの登録済 snippet の一覧表示   r snippet を全部 load し直す    その他 実は、どういう snippet があれば便利なのかよくわかってなくて snippet をほとんど登録してない。</description>
    </item>
    
  </channel>
</rss>

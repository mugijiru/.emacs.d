<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング関係の設定 on 麦汁&#39;s Emacs Config</title>
    <link>https://mugijiru.github.io/.emacs.d/programming/</link>
    <description>Recent content in プログラミング関係の設定 on 麦汁&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language><atom:link href="https://mugijiru.github.io/.emacs.d/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>emacs-lisp</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/emacs-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/emacs-lisp/</guid>
      <description>概要 Emacs Lisp を書くための設定。まあそんなにしっかり書いてないので、あんまり設定は入ってない
Hook Hook 用の関数を定義してその中に色々書いている。
 とりあえず行数表示が欲しいので display-line-numbers-mode を有効化 当然補完もしたいので company-mode を有効にしている カッコの対応などもいい感じに動いて欲しいので smartparens-mode とその strict-mode を有効にしている   (defun my/emacs-lisp-mode-hook () (display-line-numbers-mode 1) (company-mode 1) (smartparens-mode 1) (turn-on-smartparens-strict-mode)) そんで最後にその関数を hook に突っ込んでる。
(add-hook &amp;#39;emacs-lisp-mode-hook &amp;#39;my/emacs-lisp-mode-hook) アイコン挿入コマンドの用意 時々 UI 設定目的で絵文字を使うことがあるので挿入できるコマンドを用意している。最近使った記憶ないけど。
(defun my/insert-all-the-icons-code (family) (interactive) (let* ((candidates (all-the-icons--read-candidates-for-family family)) (prompt (format &amp;#34;%s Icon: &amp;#34; (funcall (all-the-icons--family-name family)))) (selection (completing-read prompt candidates nil t))) (insert &amp;#34;(all-the-icons-&amp;#34; (symbol-name family) &amp;#34; \&amp;#34;&amp;#34; selection &amp;#34;\&amp;#34;)&amp;#34;))) キーバインド emacs-lisp-mode 用に major-mode-hydra を設定している。けどそんなにしっかり Emacs Lisp を書いてるわけではないのがバレバレな感じである。</description>
    </item>
    
    <item>
      <title>Ember.js</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/ember-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/ember-js/</guid>
      <description>概要 Ember.js 用の Emacs の拡張としては ember-mode と handlebars-mode が存在する
ember-mode ember-mode は Ember.js アプリケーションのファイルナビゲーションや生成を行ってくれるモード。実は麦汁さんは使えてない。
インストールするだけではダメで、 ember-mode を明示的に起動しないといけない。
そのためには dir-locals を使うとか projectile なんかがやってるようにフォルダ構成から判定させるみたいなことが必要そう。だるい。
というわけで死蔵中。
ついでにいうとキーバインドもだるい系なので使う時は Hydra を用意した方が良さそう
(el-get-bundle madnificent/ember-mode) handlebars-mode handlebars-mode は Ember.js のテンプレートエンジンとして採用されている Handlebars を書くためのモード。
syntax highlight と、いくつかの編集機能を備えている。が、今のところ麦汁さんは syntax highlight しか使えてない。
編集コマンドは major-mode-hydra で使えるようにしてあげれば良さそう
(el-get-bundle handlebars-mode) </description>
    </item>
    
    <item>
      <title>es6</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/es6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/es6/</guid>
      <description>概要 ES5 以前ではない JS を書くための設定。 es6 といいつつ ES2016(ES7) などもこの設定のまま書いている。
sprockets-es6 を使って ES6 対応をしていた時に es6 という拡張子を使っていたのでこのファイル名になっている。
インストール es6 はつまり JS なのでとりあえず el-get で js2-mode を入れている。
(el-get-bundle js2-mode) Hook  flycheck を有効にしてリアルタイムに文法チェックをしている  また javascript-eslint を使いたいので他2つは disable にしている   company-mode で補完できるようにしている smartparens-strict-mode でカッコなどの入力補助をしている インデントは空白2文字としている   (defun my/js2-mode-hook () (flycheck-mode 1) (setq flycheck-disabled-checkers &amp;#39;(javascript-standard javascript-jshint)) (company-mode 1) (turn-on-smartparens-strict-mode) (setq js2-basic-offset 2)) という Hook 用関数を用意しておいて
(add-hook &amp;#39;js2-mode-hook &amp;#39;my/js2-mode-hook) という感じで js2-mode-hook に追加している。
Lambda で一括でやる方法もあるけども、関数名つけて分離しておくと中身を簡単に入れ替えられて便利。</description>
    </item>
    
    <item>
      <title>flycheck</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/flycheck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/flycheck/</guid>
      <description>概要 flycheck はリアルタイムで文法チェックなんかをするのに便利なモード。 flymake よりモダンなやつだったんだけど最近は flymake に戻る人もいるっぽいのでどっちが良いかよくわかってない
インストール flycheck と同時にカーソルのそばに pos-tip で通知内容を表示してくれる flycheck-pos-tip をインストールしている
(el-get-bundle flycheck) (el-get-bundle flycheck-pos-tip) 設定 flycheck を読んだ後で flycheck-pos-tip-mode が有効になるようにしている。これは公式に書かれているやりかたに則っている https://github.com/flycheck/flycheck-pos-tip#installation
(with-eval-after-load &amp;#39;flycheck (flycheck-pos-tip-mode)) その他 flycheck-posframe flycheck-pos-tip は flycheck 公式のプラグインなので採用しているけど同じことを posframe でやってくれる flycheck-posframe に置き換えた方が見た目麗しくなりそうな気がしている。
言語毎の設定 各言語向けの設定もあるけどそれは各言語の設定ファイル内に書いているのでここでは書いてない
プログラミング関係の設定 &amp;gt; ruby とか プログラミング関係の設定 &amp;gt; scss とかに書いているはず</description>
    </item>
    
    <item>
      <title>gnuplot-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/gnuplot-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/gnuplot-mode/</guid>
      <description>概要 gnuplot-mode はグラフ作成ソフトである gnuplot を Emacs で使うためのパッケージ。 Syntax Highlight や 補完機能 などを提供する。
まあほとんど使ってないんだけど。
インストール いつも通り el-get で入れている
(el-get-bundle gnuplot-mode) その他 org-mode から使ってた記憶があるのでそっちの方で何か設定があるかもしれない</description>
    </item>
    
    <item>
      <title>lsp-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/lsp-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/lsp-mode/</guid>
      <description>概要 lsp-mode は Emacs で Language server protocol が使えるようにするパッケージ。
より軽そうなやつに eglot というのもあるがこっちは試したことがない。
インストール lsp-mode 本体と UI 周りを担当する lsp-ui-mode の両方をインストールしている。また lsp-mode が有効になる際に lsp-ui-mode も同時に有効になるようにしている。
(el-get-bundle lsp-mode) (el-get-bundle lsp-ui) (add-hook &amp;#39;lsp-mode-hook &amp;#39;lsp-ui-mode) 設定 lsp-ui-doc はカーソル位置にある変数や関数などの説明を child frame で表示してくれるやつ。
これがデフォルトではフレーム基準で右上に表示するのだが大きめの画面を分割して使っていると大分遠くに表示されてしまうので window 基準で表示するように設定を変更している
(setq lsp-ui-doc-alignment &amp;#39;window) </description>
    </item>
    
    <item>
      <title>markdown</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/markdown/</guid>
      <description>概要 Markdown を書くための設定。といいつつ markdown-mode を入れてるだけだけども。
手元でテキストドキュメントを弄るのは org-mode が多いからなあ……
インストール いつも通り el-get で入れている。
(el-get-bundle markdown-mode) </description>
    </item>
    
    <item>
      <title>plantuml-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/plantuml-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/plantuml-mode/</guid>
      <description>概要 plantuml-mode は PlantUML という、テキストだけで UML 図などが描けるツール用のモード。
インストール いつも通り el-get で入れてる
(el-get-bundle plantuml-mode) 設定 実行モードは &#39;jar を指定している。デフォルトは &#39;server なんだけどオフラインの時も使いたいししね。
(setq plantuml-default-exec-mode &amp;#39;jar) el-get でインスコすると jar ファイルも自動で拾って来て plantuml-mode と同じディレクトリに設置して plantuml-jar-path も通してくれるからそっち使う方が便利だしね。
その他 最新の develop ブランチだとインデントを調整できる機能が入っているので乗り換えたいけどそのためには el-get のレシピを書いてあげる必要がありそうで放置している。</description>
    </item>
    
    <item>
      <title>rails</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/rails/</guid>
      <description>概要 Rails 開発関係だけど Ruby 開発とはちょっと違う設定をここに書いている。
関連パッケージのインストール テンプレートエンジンには haml を使っているので haml-mode を入れていてファイルナビゲーションには projectile の拡張である projectile-rails を利用している。
(el-get-bundle haml-mode) (el-get-bundle projectile-rails) (projectile-rails-global-mode 1) projectile-rails 用のコマンド追加 自身のプロジェクトだと少しナビゲーション用のコマンドが不足していたので projectile-rails の実装を参考にコマンドを追加している
Uploader Finder app/uploaders に格納している upload に関連するファイルを検索するコマンド
(defun my/projectile-rails-find-uploader () &amp;#34;Find a Uploader.&amp;#34; (interactive) (projectile-rails-find-resource &amp;#34;uploader: &amp;#34; &amp;#39;((&amp;#34;app/uploaders/&amp;#34; &amp;#34;\\(.+\\)\\.rb$&amp;#34;)) &amp;#34;app/uploaders/${filename}.rb&amp;#34;)) Admin Finder Active Admin 用のファイルを検索するためのコマンド
(defun my/projectile-rails-find-admin () &amp;#34;Find a ActiveAdmin file.&amp;#34; (interactive) (projectile-rails-find-resource &amp;#34;admin: &amp;#34; &amp;#39;((&amp;#34;app/admin/&amp;#34; &amp;#34;\\(.+\\)\\.rb$&amp;#34;)) &amp;#34;app/admin/${filename}.rb&amp;#34;)) Form Object Finder Form Object を探すためのコマンド</description>
    </item>
    
    <item>
      <title>React.js</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/react-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/react-js/</guid>
      <description>概要 React.js を書くための設定をここにまとめている
dap-mode Debug Adapter Protocol をサポートするモード。入れておいた方がきっとデバッグしやすいんだろうということで入れている。
lsp-mode の仲間なので、本当はそっち側で入れるようにした方が良さそうだけどひとまず React のために入れているので React 用の設定ファイルに書いている。
(el-get-bundle dap-mode) 同時に treemacs や lsp-treemacs も入ってくる罠がある。 Neotree 使ってるからちょっとアレだなあ。いずれ乗り換えようとはしていたけども。
web-mode とりあえず tsx を弄る上では web-mode が良いという話もあるので入れておく。
(el-get-bundle web-mode) メジャーモードの紐付け jsx/tsx ファイルを開いた時には web-mode で動いてほしいので auto-mode-alist で関連付けをする
(add-to-list &amp;#39;auto-mode-alist &amp;#39;(&amp;#34;\\.[jt]sx&amp;#34; . web-mode)) lsp-mode などの有効化 jsx/tsx ファイルを開く時に web-mode が有効になるようにしているのでその web-mode の hook で
 display-line-numbers-mode lsp lsp-ui-mode  を有効にしている。
(defun my/web-mode-tsx-hook () (let ((ext (file-name-extension buffer-file-name))) (when (or (string-equal &amp;#34;jsx&amp;#34; ext) (string-equal &amp;#34;tsx&amp;#34; ext)) (setq web-mode-markup-indent-offset 2) (setq web-mode-code-indent-offset 2) (turn-on-smartparens-mode) (display-line-numbers-mode t) (lsp) (lsp-ui-mode 1)))) (add-hook &amp;#39;web-mode-hook &amp;#39;my/web-mode-tsx-hook) </description>
    </item>
    
    <item>
      <title>rspec-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/rspec-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/rspec-mode/</guid>
      <description>概要 rspec-mode は Emacs で RSpec を実行したりする時に便利なパッケージ。といいつつ麦汁さんはちゃんと使いこなしていない……
インストール (el-get-bundle rspec-mode) 有効化 rspec 実行バッファで byebug などで止まった際に C-x C-q したら inf-ruby が動くようにしている。
(add-hook &amp;#39;after-init-hook &amp;#39;inf-ruby-switch-setup) binding.pry は何故かまともに動かないので byebug か binding.irb 推奨。麦汁さんはいつも debugger とコードに入れて使っている。
キーバインド C-c C-c で開いている rspec ファイルのカーソルがある行のテストを実行できるようにしている。
(define-key rspec-mode-map (kbd &amp;#34;C-c C-c&amp;#34;) &amp;#39;rspec-verify-single) 他にも色々な機能があるのだけどキーバインド未設定なのでこれだけしか使ってない。</description>
    </item>
    
    <item>
      <title>ruby</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/ruby/</guid>
      <description>概要 Ruby のコードを編集する上での設定をここには書いている。別の箇所で rspec-mode などの設定も書いているのでいつか記述場所を統合した方が良さそうな気もする
rbenv.el Ruby のバージョンを切り替えられる rbenv を使ってるので Emacs 上でもそれが使えるように rbenv.el を導入している。
インストール インストールはいつも通り el-get でやっている
(el-get-bundle rbenv) 有効化 そして global に有効化している。というか global じゃない有効化ってあるのかなってのと、あるとしても意味があるのかな的な。
(global-rbenv-mode) enh-ruby-mode メジャーモードは enhanced-ruby-mode を利用している。が、最近は ruby-mode の方がやっぱり良いみたいな話もどこかで見た気がするので戻ってみるのも手かもしれないと思っている。
インストール いつも通り el-get で入れている。
(el-get-bundle enh-ruby-mode) カスタム設定 enh-ruby-mode が読み込まれた後に setq で以下のように設定されている
(with-eval-after-load &amp;#39;enh-ruby-mode (setq enh-ruby-add-encoding-comment-on-save nil) (setq enh-ruby-deep-indent-paren nil) (setq enh-ruby-bounce-deep-indent t)) encoding のマジックコメントが入らないようにする enh-ruby-add-encoding-comment-on-save を nil にすることで encoding 設定のマジックコメントが入らないようにしている。
これは昔は有効にしておいた方が良かったけど最近の Ruby では設定しなくても UTF-8 が前提になるからむしろ無い方が良いというお話だったはず。
そういう状況に変わったのも大分前なので詳細は忘れた。
ただとりあえず 最新の enhanced-ruby-mode を見るとデフォルトが nil なのでわざわざ設定しなくて良さそう。</description>
    </item>
    
    <item>
      <title>scss</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/scss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/scss/</guid>
      <description>概要 scss を使う上での設定をここではまとめている。長いこと手を入れてないので今はより良い設定がありそうな気がする。
rainbow-mode rainbow-mode はカラーコードを入力した際に、そのカラーコード部分の背景色をカラーコードの色に変化させるパッケージ。ぱっと見で大体どんな色かわかって便利なやつ
インストール 自分はel-get で入れている。
(el-get-bundle rainbow-mode) ELPA に登録されているので package-install でもいける
scss-mode scss-mode は Emacs 組込みの css-mode の中で定義されているメジャーモード。なのでインストール不要で使えるし .scss という拡張子なら自動的に scss-mode で開いてくれるようになっている。
設定 インデントはデフォルトだと半角空白 4 つとなっているが麦汁さん的には 2 の方が良いのでそのように変更している。
(with-eval-after-load &amp;#39;scss-mode (setq css-indent-offset 2)) with-eval-after-load を使っているが css-indent-offset は defcustom で定義されているので custom-set-variables を使うように修正した方が良さそう
hook scss を使う上で hook を使って色々有効化したりしている。
(defun my/scss-mode-hook () (flycheck-mode 1) (setq-local lsp-prefer-flymake nil) (lsp) (lsp-ui-mode -1) ;; lsp-ui とかより後に設定しないと上書きされるのでここに移動した (setq-local flycheck-checker &amp;#39;scss-stylelint) (setq-local flycheck-check-syntax-automatically &amp;#39;(save new-line idle-change)) (company-mode 1) (display-line-numbers-mode 1) (rainbow-mode)) (add-hook &amp;#39;scss-mode-hook &amp;#39;my/scss-mode-hook)  flycheck-mode の有効化  これによりリアルタイムに lint 結果が分かって便利になる   lsp-prefer-flymake の無効化  flycheck が有効にならない問題を防いでいる。どうも自分の設定の書き方が悪い気もするが……。   lsp-mode を有効化しつつ lsp-ui は無効にしている  lsp-ui が有効だと画面上でガチャガチャ height とかのプロパティの説明をしてうざいので   flycheck-checker, flycheck-check-syntax-automatically の設定  lsp-ui とかより後に設定しないと上書きされるので、それらより後に設定している 設定の書き方の悪さのせいな気もする   company-mode の有効化。これがないと補完できなくて厳しいよね display-line-numbers-mode の有効化。行数表示も欲しいよね。巨大ファイルだと邪魔だけど巨大にしなきゃいい rainbow-mode の有効化  カラーコード→ CSS Variable の置き換え 外部コマンドで fetch-color-var というのを定義してそいつにカラーコードを渡すとプロジェクトで使ってる CSS Variable を返してくるようにしている。</description>
    </item>
    
    <item>
      <title>Vue.js</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/vue-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/vue-js/</guid>
      <description>概要 ここでは Vue.js アプリケーションを書く上での設定を書いている。
auto-insert の設定 Vue.js のコンポーネントファイルを新規作成する時にテンプレートが自動挿入できるようにしている
テンプレート Vue.js の単一ファイルコンポーネントなので template, script, style を出力している。
template には pug を、CSS には scss を使っている。
&amp;lt;template lang=&amp;#39;pug&amp;#39;&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { }; &amp;lt;/script&amp;gt; &amp;lt;style lang=&amp;#39;scss&amp;#39; scoped&amp;gt; &amp;lt;/style&amp;gt; テンプレートを適用可能にする .vue という拡張子のファイルを新規作成する時には上で定義したテンプレートが自動的に挿入されるようにする。
(define-auto-insert &amp;#34;\\.vue$&amp;#34; &amp;#34;template.vue&amp;#34;) パッケージのインストール ここでは Vue.js 開発に使っている関連パッケージを入れている。
vue-mode vue-mode は mmm-mode をベースにして作られた Vue.js の単一ファイルコンポーネント用のモード。 mmm-mode ベースなので template, script, css 部分でそれぞれ別のメジャーモードが動くようになっている。
インストール いつも透り el-get で入れている
(el-get-bundle vue-mode) 備考 あまり更新は活発でなく微妙な挙動もあるので mmm-mode に乗り換えたり web-mode を使うようにしている人も多い様子。</description>
    </item>
    
    <item>
      <title>yaml-mode</title>
      <link>https://mugijiru.github.io/.emacs.d/programming/yaml-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mugijiru.github.io/.emacs.d/programming/yaml-mode/</guid>
      <description>概要 yaml-mode は yaml を編集する時のメジャーモード。インデントを調整しやすい。
インストール いつも通り el-get でインストール
(el-get-bundle yaml-mode) hook mode に対する hook は関数を定義してその中で呼びたいコードを書いていくようにしている。
lambda で書いてしまうと hook を弄りたい時に結構面倒なのだけど関数を定義しておくと、その関数の中身を変更して評価しておくだけで hook で動作する中身が変更できて便利。
とりあえず yaml-mode では以下のようにして highlight-indent-guides を有効にしている。
(defun my/yaml-mode-hook () (highlight-indent-guides-mode 1)) で、その hook を最後に yaml-mode-hook に追加している。
(add-hook &amp;#39;yaml-mode-hook &amp;#39;my/yaml-mode-hook) </description>
    </item>
    
  </channel>
</rss>

name: Update package

on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-package:
    runs-on: ubuntu-latest
    env:
      PACKAGE: ${{ inputs.package }}

    steps:
    - uses: purcell/setup-emacs@master
      with:
        version: 29.3

    - uses: actions/checkout@v4

    - name: Update package
      run: |
        emacs -Q --batch --eval "(setq user-emacs-directory \"$(pwd)/\")" \
          --eval '(setq el-get-git-install-url "https://github.com/mugijiru/el-get.git")' \
          --eval '(setq el-get-install-branch "fix-install-for-emacs29")' \
          -l ./init-el-get.el \
          --eval "(my/el-get-auto-update \"$PACKAGE\")"

    - name: Detect el-get.lock diff
      run: |
        git diff --exit-code --quiet el-get.lock || git add el-get.lock && echo 'found_update=1' >> $GITHUB_ENV

    - if: env.found_update == 1
      name: Get timestamp
      run: |
        echo "UPDATE_TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)" >> $GITHUB_ENV

    - if: env.found_update == 1
      id: get-pr-body
      name: Set commit message
      run: |
        body=$(cat /tmp/commit-message.txt)
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/' '}"
        body="${body//$'\r'/' '}"
        echo "body=${body}" >> $GITHUB_OUTPUT

    - if: env.found_update == 1
      id: remove-old-branches
      name: Remove old branches
      run: |
        git fetch

        branches=($(git branch -r --format='%(refname:short)' | sed 's|^origin/||' | grep "^update-${PACKAGE}" || true))
        for branch in "${branches[@]}"; do
          echo "Remove remote branch: ${branch}"
          git push origin --delete $branch
        done

    - if: env.found_update == 1
      name: Create PR
      uses: peter-evans/create-pull-request@v7
      env:
        BRANCH_NAME: update-${{ env.PACKAGE }}-${{ env.UPDATE_TIMESTAMP }}
        PR_TITLE: Update ${{ env.PACKAGE }}
      with:
        branch: ${{ env.BRANCH_NAME }}
        commit-message: ${{ steps.get-pr-body.outputs.body }}
        title: ${{ env.PR_TITLE }}
        body: ${{ steps.get-pr-body.outputs.body }}
        labels: |
          dependencies

    - if: always()
      name: Notify slack build result
      uses: lazy-actions/slatify@master
      with:
        type: ${{ job.status }}
        job_name: '*el-get update ${{ env.PACKAGE }}*'
        mention: 'here'
        username: 'GitHub Actions'
        icon_emoji: 'emacs'
        mention_if: 'failure'
        channel: '#emacs-update'
        url: ${{ secrets.SLACK_WEBHOOK }}
        commit: true
        token: ${{ secrets.GITHUB_TOKEN }}

#+TODO: TODO(t) | DONE(o)
#+HUGO_BASE_DIR: ./hugo/
#+HUGO_SECTION: ./
#+title: 麦汁三昧
#+author: mugijiru
#+chapter: true
#+toc: headlines 2
#+HUGO_LEVEL_OFFSET: 1

* Top
  :PROPERTIES:
  :END:

** 麦汁's Emacs Config
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :END:

   ここは @mugijiru の Emacs の設定ファイルの一部を解説しているページです。

   https://github.com/mugijiru/.emacs.d/blob/master/init.org から
   ox-hugo を使ってWebサイトに仕立て上げています。

*** 動作確認環境

    以下の環境で使用しています。が、動作を保証するものではありません。

    - macOS :: [[https://github.com/railwaycat/homebrew-emacsmacport][emacsmacport]] で用意されている Emacs
    - Ubuntu 20.04 LTS :: apt で手に入る Emacs 26.3

*** 注意点

    まだ全ての設定を init.org に記載できていない上に
    init.org からの出力設定も済ませていないので
    極一部の設定ファイルのみの解説となります。

* 基本設定
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: basics
  :END:

** 基本設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>1. </b>" :weight 1 :disableToc true
   :END:
   #+TOC: nil
   #+OPTIONS: toc:nil

   Emacs の基本動作に関わる部分をここでは設定している

   - [[*auto-save][auto-save]] :: 編集中状態の自動保存や編集前の状態のバックアップに関する設定
   - [[*auth-source][auth-source]] :: 認証情報の取り扱いファイルの設定
   - [[*custom-file][custom-file]] :: カスタマイズ変数などの保存先を変更している
   - [[*ddskk][ddskk]] :: ちょっと変わった日本語入力 SKK の Emacs Lisp 版
   - [[*exec-path][exec-path]] :: PATH などの環境変数を shell と合わせる設定
   - [[*font-config][font-config]] :: フォントの設定
   - [[*load-path][load-path]] :: Emacs Lisp が読み込める path の設定
   - [[*migemo][migemo]] :: 日本語入力オフのままローマ字で検索できるようにするやつ
   - [[*savehist][savehist]] :: ミニバッファの履歴などを保存してくれる機能
   - [[*server][server]] :: 起動した Emacs がサーバとしても動くように設定している
   - [[*ガベージコレクション][ガベージコレクション]] :: メモリの開放関係の設定
   - [[*ライブラリの読み込み][ライブラリの読み込み]] :: Emacs Lisp を書く上で便利なライブラリの読み込み

** auth-source
   :PROPERTIES:
   :EXPORT_FILE_NAME: auth-source
   :END:
*** 概要
    [[https://www.gnu.org/software/emacs/manual/html_mono/auth.html][auth-source]] は Emacs でパスワードのような秘匿情報を扱うための仕組み。
    Emacs の各パッケージが認証情報を要求する時に
    こいつ経由で取得できるようにしておくと秘匿もできて便利っぽい。

    パスワードの保存先はデフォルトだと
    ~("~/.authinfo" "~/.authinfo.gpg" "~/.netrc")~
    となっている。

    拡張子が gpg だと [[https://www.gnu.org/software/emacs/manual/html_mono/epa.html][EagyPG Assistant]] で保存時に暗号化されるので便利。

*** ファイル指定
    自分は Emacs でしか使わないであろう情報ということで
    ~/.emacs.d/.authinfo.gpg~ を指定している。

    #+begin_src emacs-lisp :tangle inits/00-authinfo.el
    (custom-set-variables '(auth-sources (quote ("~/.emacs.d/.authinfo.gpg"))))
    #+end_src
** auto-save                                                    :replacement:
   :PROPERTIES:
   :EXPORT_FILE_NAME: auto-save
   :END:

*** 概要

    編集中状態の自動保存や、編集前や保存直後の状態のバックアップに関する設定をここでは書いている。

    Emacs ではデフォルトでも
    編集中ファイルの自動保存や、編集前の状態の自動バックアップもしてくれるが
    開いているファイルとは違う場所に保存したりすることで、より便利になるのでいくつかの設定を入れている。

*** 設定

**** 自動保存設定

     デフォルトだと ~#hoge.txt#~ みたいなファイル名で作られる、自動保存に関する設定。

     まあこの自動保存されてやつを活用できてる気がしないのでこの自動保存自体不要な気はしているが、
     とりあえず場所を移動して邪魔にはならないようにはしている。

***** 自動保存のタイミング

      自動保存のタイミングは

      - auto-save-timeout
      - auto-save-interval

      で制御されている。

      まず auto-save-timeout で設定した秒数が経過すると再度自動保存が実行される。

      これがデフォルトだと 30 秒なのだが、ちょっと長いのでその半分の 15 秒で保存されるように設定を変更している。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq auto-save-timeout 15)
      #+end_src

      また auto-save-interval で設定した回数のキーイベントが発生すると再度自動保存を実行する。

      これもデフォルトだと 300 と結構なキーを叩く必要があるので 60 回としている。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq auto-save-interval 60)
      #+end_src

***** 自動保存先を変更する

      自動保存はそのままだと弄ってるファイルの場所に作られる。
      が、これは以下のようにすると ~~/.emacs.d/backup/~ 一応変更可能。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/backup/" t)))
      #+end_src

      ただ、デフォルト値が

      #+begin_src emacs-lisp
      (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t))
      #+end_src

      なので ~.*~ にしているのは乱暴そうな気がしている。

      というわけで
      https://masutaka.net/chalow/2014-05-11-1.html
      に書かれているのを真似して

      #+begin_src emacs-lisp
      (("~/\\([^/]*/\\)*\\([^/]*\\)$" "~/.emacs.d/backup/\\2" t))
      #+end_src

      とでもした方が良いかもしれない。

**** バックアップファイル

     自動保存とは別に、
     ファイルを開いた時点のバージョンや保存した時点のバージョンを取っておいてくれる自動バックアップ機能もあるので
     その設定も弄っている。

***** バックアップ先のフォルダ指定

      デフォルトでは編集しているファイルと同じフォルダにバックアップファイルを作成するようになっている。

      だけど、こいつが結構邪魔なので
      バックアップファイルは ~~/.emacs.d/backup/~ に全部保存するようにしている。

      また、普段 tramp は使っていないが
      何かの拍子で使った時にバックアップが取られると邪魔そうなのでそれは保存しないようにしている。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq backup-directory-alist '((".*" . "~/.emacs.d/backup")
                                     (,tramp-file-name-regexp . nil)))
      #+end_src

***** バージョン管理

      バックアップにはバージョン管理機能もある。が、標準では無効化されている。

      とりあえず古いバージョンを引っ張り出せると便利かもと思って有効化している。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq version-control t)
      #+end_src

      が、実際それを使ったことはない。。。

      また、古過ぎるバックアップファイルは要らないので、
      自動的に消されるように設定している。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq delete-old-versions t)
      #+end_src

**** その他

     Emacs の自動保存などについては
     http://yohshiy.blog.fc2.com/blog-entry-319.html
     によくまとめられているので、いずれその内容を設定に反映させたい。

     また [[https://github.com/bbatsov/super-save][super-save]] というやつを使って実ファイルに自動保存したりしたらこれも不要になると思われる。

** custom-file
   :PROPERTIES:
   :EXPORT_FILE_NAME: custom-file
   :END:
*** 概要
    Emacs では customize 機能などで設定したファイルを
    標準だと init.el の末尾に追記したりするが
    自動吐き出しされるものがあるとバージョン管理が難しくなるので
    別ファイルに出力するようにするなどの調整をしている。

*** 出力先の設定
    .emacs.d の中に閉じ込めておく方が管理が楽なので
    出力先として ~~/.emacs.d/custom.el~ を指定している。

    #+begin_src emacs-lisp :tangle inits/99-custom-file.el
    (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
    #+end_src
*** カスタム設定の読み込み
    起動時に、設定が入っているファイルが読み込まれないと
    保存した設定が有効にならないので load を使って読んでいる。

    #+begin_src emacs-lisp :tangle inits/99-custom-file.el
    (load custom-file)
    #+end_src
*** その他
    カスタムファイルは終盤で読み込む方がいいかと思って
    init-loader では 99 という最後の方で読まれる番号を振っている。

    このあたりの設定を個別のパッケージの設定の方に移動したら
    このファイルは空にできるんじゃないかなとも思っているが、
    それはゆっくり対応していくつもり
** ddskk
   :PROPERTIES:
   :EXPORT_FILE_NAME: ddskk
   :END:
*** 概要
    [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][ddskk]] は Emacs Lisp 版の SKK 実装。

    一般的な日本語変換ソフトだと文法を自動で認識して変換をしてくれるけど
    SKK ではその自動認識がおかしくておかしな変換になるところを、
    単語の区切りなんかを一切判定せずに人間がそれを教えてあげることで、
    そういう自動的に変な挙動をしてしまう煩わしさから開放されるようになっている。
*** インストール
    いつも通り el-get で入れている。
    最近は最新版が GitHub で更新されているのでそちらから引っ張られてくる。

    #+begin_src emacs-lisp :tangle inits/30-skk.el
    (el-get-bundle ddskk)
    #+end_src

*** 常時有効化
    find-file-hooks で有効化することでファイルを開いた時には常に skk が使える状態にしている。
    また skk-latin-mode にしておくことで、
    基本は英語入力ですぐに日本語入力に切り替えられる状態にしている。

    #+begin_src emacs-lisp :tangle inits/30-skk.el
    (defun my/always-enable-skk-latin-mode-hook ()
      (skk-latin-mode 1))

    (add-hook 'find-file-hooks 'my/always-enable-skk-latin-mode-hook)
    #+end_src
*** hook の設定
    ddskk が呼び出された時に色々設定されるようにしている。

    もしかしたら customize-variable とかあるかもしれないので
    今度見直した方が良さそう。

    #+begin_src emacs-lisp :tangle inits/30-skk.el
      (add-hook 'skk-load-hook
                (lambda ()
                  ;; コード中では自動的に英字にする。
                  (require 'context-skk)

                  (setq skk-comp-mode t) ;; 動的自動補完
                  (setq skk-auto-insert-paren t)
                  (setq skk-delete-implies-kakutei nil)
                  (setq skk-sticky-key ";")
                  (setq skk-henkan-strict-okuri-precedence t)
                  (setq skk-show-annotation t) ;; 単語の意味をアノテーションとして表示。例) いぜん /以前;previous/依然;still/

                  ;; ;; 半角で入力したい文字
                  ;; (setq skk-rom-kana-rule-list
                  ;;       (nconc skk-rom-kana-rule-list
                  ;;              '((";" nil nil)
                  ;;                (":" nil nil)
                  ;;                ("?" nil nil)
                  ;;                ("!" nil nil))))
                  ))
    #+end_src

    - skk-comp-mode :: 自動補完関係らしいが、ググっても出て来ないし死んだ設定かもしれない
    - skk-auto-insert-paren :: カッコを入力するとコッカも入れてくれる便利機能の切替
    - skk-delete-implies-kakutei :: nil にすると▼モードで <BS> を押した時 に一つ前の候補を表示するようになる
    - skk-sticky-key :: 設定すると、その指定したキーを押した時に変換開始状態などにする Sticky Shift を提供する
    - skk-henkan-strict-okuri-precedence :: 正しい送り仮名の変換が優先的に表示されるようにする設定
    - skk-show-annotation :: 単語の意味をアノテーションとして表示する設定
    - skk-rom-kana-rules-list :: キー入力時の挙動を指定する。とりあえず自分は : とかが全角になるのが嫌なので半角になるようにしている

*** L 辞書を使うようにする                                      :improvement:
    Mac では AquaSKK の L 辞書を、
    Linux では ~/usr/share/skk/SKK-JISYO.L~ を読むようにしている。

    #+begin_src emacs-lisp :tangle inits/30-skk.el
    (let ((l-dict
           (if (eq window-system 'ns)
               (expand-file-name "~/Library/Application Support/AquaSKK/SKK-JISYO.L")
             "/usr/share/skk/SKK-JISYO.L")))
      (if (file-exists-p l-dict)
          (setq skk-large-jisyo l-dict)))
    #+end_src

    WSL で動かしている Emacs では
    CurvusSKK の辞書を見るように設定した方が良さそうな気もするけど
    ~/usr/share/skk/SKK-JISYO.L~ にもあるのでひとまずこれにしておけば良さそう
*** ddskk-posframe
    [[https://github.com/conao3/ddskk-posframe.el/][ddskk-posframe]] は ddskk ツールチップを posframe で表示してくれるやつ。便利。

    https://emacs-jp.github.io/packages/ddskk-posframe
    に作った本人が解説記事を日本語で載せてるので詳細はそっちを見てもらう方が早い。

    とりあえず以下でインストール、有効化している。

    #+begin_src emacs-lisp :tangle inits/30-skk.el
    (el-get-bundle ddskk-posframe.el)
    (ddskk-posframe-mode 1)
    #+end_src

    なお el-get.lock を使ったバージョン更新確認のために
    レシピも必要だったので登録している

    #+begin_src emacs-lisp :tangle recipes/ddskk-posframe.el.rcp
    (:name ddskk-posframe.el
           :website "https://github.com/conao3/ddskk-posframe.el"
           :description "ddskk-posframe.el provides Henkan tooltip for ddskk via posframe."
           :type github
           :pkgname "conao3/ddskk-posframe.el")
    #+end_src

*** その他
    漢字の変換すらも機械任せではなく自分で決めるみたいな漢字直接入力という方式もあり、
    SKK とそれを組み合わせると
    入力キーを覚えている漢字は漢直で入力し
    そうでない漢字は SKK で入力する、といった使い分けができるらしい。

    特に同音意義語が多い場合に便利そう。

** exec-path
   :PROPERTIES:
   :EXPORT_FILE_NAME: exec-path
   :END:

*** 概要
    Emacs は通常最小限の環境変数しか利用しないようになっている。

    が、それだと普段使う上で「ああ、このコマンドが使えなくてもどかしい……!」
    と感じてしまう。

    そこで [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] というのを使って
    Emacs が見える PATH 環境変数をシェルが見てる PATH 環境変数と揃うようにしている。

*** インストール

    いつも通り el-get からインストールしている

    #+begin_src emacs-lisp :tangle inits/00-exec-path.el
    (el-get-bundle exec-path-from-shell)
    #+end_src

*** 有効化                                                      :improvement:

    理由は忘れたが Mac の環境でのみ有効化している。
    その内 Linux 環境でも有効化を試みた方が良さそう

    #+begin_src emacs-lisp :tangle inits/00-exec-path.el
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
    #+end_src

    なお、これでシェルと共通の環境変数が使われるようになるのは
    [[https://github.com/purcell/exec-path-from-shell/blob/bf4bdc8b8911e7a2c04e624b9a343164c3878282/exec-path-from-shell.el#L85-L89][デフォルトでは ~PATH~ と ~MANPATH~ のみである]]

*** その他

    なぜか以下のようなコメントを書いていた。
    普段使っている zsh で持ってる PATH は使わないのだろうか? :thinking_face:

    #+begin_src emacs-lisp
    ;; for exec path
    ;; use .bashrc setted path
    #+end_src

** font-config
   :PROPERTIES:
   :EXPORT_FILE_NAME: font-config
   :END:
*** 概要
    Emacs で利用するフォントの設定。
    それなりの設定をしないとガタついたりするので
    通常あまり手を入れないで済ませている。

*** 設定
    Mac では 14, それ以外(Linux) では 18 を基準としている。

    Mac と Linux で基準のサイズを変えているが
    なぜかこの方がガタガタもしないし大き過ぎもしないしでいい感じになる。

    といいつつ元々 Linux の方は WSL2 環境に合わせて 12 にしていたが
    Manjaro 環境に合わせて 18 に変更しているので
    またその内 WSL2 でも Manjaro でもどっちいい感じに使えるように調整するかもしれない

    #+begin_src emacs-lisp :tangle inits/90-font.el
    (let* ((size (if (or (eq window-system 'ns) (eq window-system 'mac)) 14 18))
           (asciifont "Ricty Diminished")      ; ASCII fonts
           (jpfont "Ricty Diminished")         ; Japanese fonts
           (h (* size 10))
           (fontspec (font-spec :family asciifont))
           (jp-fontspec (font-spec :family jpfont)))
      (set-face-attribute 'default nil :family asciifont :height h)
      (set-fontset-font nil 'japanese-jisx0213.2004-1 jp-fontspec)
      (set-fontset-font nil 'japanese-jisx0213-2 jp-fontspec)
      (set-fontset-font nil 'katakana-jisx0201 jp-fontspec)
      (set-fontset-font nil '(#x0080 . #x024F) fontspec)
      (set-fontset-font nil '(#x0370 . #x03FF) fontspec))
    #+end_src

** load-path
   :PROPERTIES:
   :EXPORT_FILE_NAME: load-path
   :END:

*** 概要

    ~load-path~ は Emacs の設定でも重要な項目で
    このリストに追加されている path は ~load~ または ~require~ する際に走査される path となっている。

    即ち load-path を通しておけば、そこに置いている emacs lisp のファイルは簡単に読み出せるようになる。

    なお package-install や el-get を使っておけば基本的に自分で load-path を通す必要はない。

*** 秘匿情報を入れてるフォルダを読み込み可能にする

    パスワードなどの秘匿情報を持っている部分は ~~/.emacs.d/secret~ というフォルダで管理している。
    そのためここに入ってる emacs lisp のファイルも読み込めるように load-path に追加している。

    #+begin_src emacs-lisp :tangle inits/00-load-path.el
    (add-to-list 'load-path (expand-file-name "~/.emacs.d/secret"))
    #+end_src

*** my/load-config                                              :replacement:

    ~~/.emacs.d/secret~ は個人マシンか会社マシンかによって置いてるデータが異なったりするため
    もしもファイルがなくてもエラーにならないような方法で load する方法が必要だった。

    というわけでファイルがなかったら読み込まずにメッセージを出力して終了するような関数を用意している。

    #+begin_src emacs-lisp :tangle inits/00-load-path.el
    (defun my/load-config (file)
      (condition-case nil
          (load file)
        (file-missing (message "Load error: %s" file))))
    #+end_src

    ただ、これって結局

    #+begin_src emacs-lisp
    (load file nil t)
    #+end_src

    で十分な気もするので、置き換えを検討した方が良さそう。

** migemo
   :PROPERTIES:
   :EXPORT_FILE_NAME: migemo
   :END:
*** 概要
    [[https://github.com/emacs-jp/migemo][migemo.el]] は [[https://github.com/koron/cmigemo][cmigemo]] などと通信して、
    日本語入力オフのままローマ字入力をして日本語検索ができるようにするパッケージ。

    これとても便利で抜け出せない。
*** インストール
    いつも通り el-get でインストール。

    #+begin_src emacs-lisp :tangle inits/10-migemo.el
    (el-get-bundle migemo)
    (load "migemo")
    #+end_src

    load はする必要あるのかわからんけど、そういう設定が既に入ってるのでそのままにしている。
*** Mac での辞書の位置の指定
    Homebrew で cmigemo を入れているので
    それに合わせて辞書の位置を指定している。

    #+begin_src emacs-lisp :tangle inits/10-migemo.el
    ;; Mac
    (let ((path "/usr/local/share/migemo/utf-8/migemo-dict"))
      (if (file-exists-p path)
          (setq migemo-dictionary path)))
    #+end_src
*** Ubuntu での辞書の位置の指定
    apt で cmigemo を入れているので
    それに合わせて辞書の位置を指定している。

    #+begin_src emacs-lisp :tangle inits/10-migemo.el
    ;; Ubuntu
    (let ((path "/usr/share/cmigemo/utf-8/migemo-dict"))
      (if (file-exists-p path)
          (setq migemo-dictionary path)))
    #+end_src
*** cmigemo コマンドの PATH 指定
    環境で PATH が変わるので which コマンドの結果を migemo-command に設定している。

    #+begin_src emacs-lisp :tangle inits/10-migemo.el
    (let ((path (s-chomp (shell-command-to-string "which cmigemo"))))
      (if (s-ends-with? "not found" path)
          (message "cmigemo not found")
        (setq migemo-command path)))
    #+end_src
*** オプション設定
    裏側で動くのでうるさくならないように ~-q~ を指定しているのと
    Emacs から叩くから ~--emacs~ を指定しているだけ。

    #+begin_src emacs-lisp :tangle inits/10-migemo.el
    (setq migemo-options '("-q" "--emacs"))
    #+end_src
*** coding system の指定
    Mac と Ubuntu でしか使わないし
    それらの環境だと統一で utf-8-unix でいいよねってことでそれを指定している。

    #+begin_src emacs-lisp :tangle inits/10-migemo.el
    (setq migemo-coding-system 'utf-8-unix)
    #+end_src

    今時なら euc とかにする必要もないだろうしね。
*** 初期化
    以上の設定を入れた上で初期化をしている。

    #+begin_src emacs-lisp :tangle inits/10-migemo.el
    (migemo-init)
    #+end_src
** savehist
   :PROPERTIES:
   :EXPORT_FILE_NAME: savehist
   :END:

*** 概要

    Emacs 標準でついている、ミニバッファの履歴などを保存してくれる機能。

*** 有効化

    標準でついているので以下のようにするだけで有効化可能。

    #+begin_src emacs-lisp :tangle inits/00-savehist.el
    (savehist-mode 1)
    #+end_src

*** 設定                                                        :improvement:

    標準で保存されるもの以外だと kill-ring だけを保存対象にしている。
    これで Emacs を終了させても kill-ring は残るようになるはず。
    だけど最近使えてない気がするな……。検証が必要そう。

    #+begin_src emacs-lisp :tangle inits/00-savehist.el
    (setq savehist-additional-variables '(kill-ring))
    #+end_src

    他にも有効にしたら便利そうなのがあれば追加したい。
    が、ぱっとは思い付かない。

** server
   :PROPERTIES:
   :EXPORT_FILE_NAME: server
   :END:
*** 概要
    Emacs の起動後にサーバとして動くようにしている。

    これにより emacsclient コマンドで接続すると
    サーバとして動いている Emacs に別端末から繋げられたりする。

    けど麦汁さんは Firefox から org-capture を動かすためにだけ利用している。

*** 設定
    ~server.el~ を require しておいて
    サーバとして動いていなかったらサーバとして動くようにしている。
    多重起動の防止ですね。

    #+begin_src emacs-lisp :tangle inits/99-server.el
    (require 'server)
    (unless (server-running-p)
      (server-start))
    #+end_src

*** 関連ツール
    - [[https://github.com/sprig/org-capture-extension][org-capture-extension]] :: org-capture 連携するための Chrome 及び Firefox の拡張。麦汁さんはこれを Firefox で使ってる。
    - [[https://github.com/alphapapa/org-protocol-capture-html][org-protocol-capture-html]] :: HTML コンテンツを org-mode の記述に変換して capture してくれるやつ。Pandoc 利用。
*** その他
    起動処理の最後に動けばいいので
    init-loader で 99 を割り振っている。

    init-loader をやめるなら多分 after-init-hook を使うことになるのかな。

** ガベージコレクション
   :PROPERTIES:
   :EXPORT_FILE_NAME: gcmh
   :END:

*** 概要
    ガベージコレクションには gcmh というのを利用してみている。

    https://github.com/emacsmirror/gcmh

    普段は GC を控えめにしながら
    操作してない間に GC が走るような作りになっている。便利そう。

*** インストール
    #+begin_src emacs-lisp :tangle inits/00-gc.el
    (el-get-bundle gcmh)
    #+end_src

    これだけで有効化もされる。

*** その他

    以前の設定も折り畳んで残しておく

    #+begin_details
    #+begin_summary
    使わなくなったコード
    #+end_summary
    gcmh を入れる前に設定していたコード。
    gcmh を入れたらこれよりもいい感じに対応してくれそうなので入れ替えた。

    #+begin_src emacs-lisp
    ;; https://gist.github.com/garaemon/8851900ef27d8cb28200ac8d92ebacdf
    ;; Increase threshold to fire garbage collection
    (setq gc-cons-threshold 1073741824)
    (setq garbage-collection-messages t)

    ;; Run GC every 60 seconds if emacs is idle.
    (run-with-idle-timer 60.0 t #'garbage-collect)
    #+end_src
    #+end_details

** ライブラリの読み込み
   :PROPERTIES:
   :EXPORT_FILE_NAME: load-libraries
   :END:
   設定ファイル内で文字列操作をするだろうということで
   [[https://github.com/magnars/s.el][s.el]] を読み込んでいる。

   #+begin_src emacs-lisp :tangle inits/01-load-libraries.el
   (el-get-bundle s)
   (require 's)
   #+end_src

   けど、どういう関数があったか覚えてないぐらいには使ってない……。
   ま、あると便利なのでそのまま入れておくつもり。
* バッファ管理
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: buffer-management
  :END:
** バッファ管理
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>2. </b>" :weight 2 :disableToc true
   :END:

   ここではバッファ管理関係の設定を記載している

   - [[*scratch-log][scratch-log]] :: scratch バッファを自動的に永続化してくれるパッケージ
   - [[*tempbuf][tempbuf]] :: 不要になったと思われるバッファを自動的に kill してくれるパッケージ
** scratch-log
   :PROPERTIES:
   :EXPORT_FILE_NAME: scratch-log
   :END:
*** 概要
    [[https://github.com/mori-dev/scratch-log][scratch-log]] は、Emacs でちょっとした Emacs Lisp なんかを試し書きする時に使う ~*scratch*~ バッファを永続化してくれるパッケージ。

    自分なんかは Emacs Lisp だけでなくちょっとメモを置いといたりもするので
    勝手に永続化してくれるこいつにはとてもお世話になっている。

    GitHub の README には作者のブログへのリンクしかないし
    そのブログは消えてるので
    一番まともに解説しているのは http://emacs.rubikitch.com/scratch-log/ だと思う。

*** インストール
    el-get から入れるだけ。

    #+begin_src emacs-lisp :tangle inits/70-scratch-log.el
    (el-get-bundle mori-dev/scratch-log)
    #+end_src
*** 有効化
    どうも明示的に require しないといけないっぽくて、そうしている。
    ちょっと本当にそうなのか検証したい気はする。

    #+begin_src emacs-lisp :tangle inits/70-scratch-log.el
    (require 'scratch-log)
    #+end_src
*** 類似品など

    - [[https://github.com/Fanael/persistent-scratch][persistent-scratch]] :: これも scratch を永続化させるやつ。カスタマイズ性はこっちがありそう
    - [[https://github.com/EricCrosson/unkillable-scratch][unkillable-scratch]] :: scratch バッファを kill させないやつ。同じような機能が scratch-log にもある
    - [[https://github.com/kentaro/auto-save-buffers-enhanced][auto-save-buffers-enhanced]] :: 自動保存機能がメインだけど scratch を自動保存する機能もある
** tempbuf
   :PROPERTIES:
   :EXPORT_FILE_NAME: tempbuf
   :END:
*** 概要
    [[https://www.emacswiki.org/emacs/TempbufMode][tempbuf-mode]] は不要になったと思われるバッファを自動的に kill してくれるパッケージ。
    使っていた時間が長い程、裏に回った時には長い時間保持してくれる。

    つまり、一瞬開いただけのファイルは明示的に kill しなくても勝手にやってくれるので
    ファイルを開いてそのまま放置みたいなことをしがちなズボラな人間には便利なやつ。

*** インストール
    いつも通り el-get で入れている。

    #+begin_src emacs-lisp :tangle inits/70-tempbuf.el
    (el-get-bundle tempbuf-mode)
    #+end_src
*** 勝手に kill させないファイルの指定
    org-clock を使うようなファイルは
    kill されると org-clock が狂って面倒なことになるので
    それらのファイルは勝手に kill されないように ignore リストに突っ込んでいる

    #+begin_src emacs-lisp :tangle inits/70-tempbuf.el
    (setq my/tempbuf-ignore-files '("~/Documents/org/tasks/gtd.org"
                                    "~/Documents/org/tasks/interrupted.org"
                                    "~/Documents/org/tasks/next-actions.org"
                                    ))
    #+end_src
*** find-file への hook
    find-file した時に
    上でリストアップしたファイルだった場合は kill されないように
    tempbuf-mode が自動的に無効になるような hook を用意している。

    #+begin_src emacs-lisp :tangle inits/70-tempbuf.el
    (defun my/find-file-tempbuf-hook ()
      (let ((ignore-file-names (mapcar 'expand-file-name my/tempbuf-ignore-files)))
        (unless (member (buffer-file-name) ignore-file-names)
          (turn-on-tempbuf-mode))))
    #+end_src
*** hook の設定
    find-file では上で作成した hook を使うことで
    kill されたくないファイルは kill されないようにしている

    #+begin_src emacs-lisp :tangle inits/70-tempbuf.el
    (add-hook 'find-file-hook 'my/find-file-tempbuf-hook)
    #+end_src

    また dired buffer も邪魔になりがちだけど、デフォルトだと対象にならないので
    こいつらも tempbuf-mode の管理対象となるように tempbuf-mode を有効にしている。

    #+begin_src emacs-lisp :tangle inits/70-tempbuf.el
    (add-hook 'dired-mode-hook 'turn-on-tempbuf-mode)
    #+end_src
*** その他
    [[https://www.emacswiki.org/emacs/MidnightMode][midnight-mode]] という、深夜に処理を実行させるようなやつで
    夜間にバッファをごっそり消すみたいなことをしている人も結構いるっぽい。

* キーバインド
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: keybinds
  :END:
** キーバインド
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>3. </b>" :weight 3 :disableToc true
   :END:

   ここでは全体に関わるキーバインド系の設定を記載している。

   - [[*Google 連携][Google 連携]] :: Google 連携する機能のキーバインドをまとめている
   - [[*key-chord][key-chord]] :: 同時押しというキーバインドを提供してくれるやつ
   - [[*sticky-control][sticky-control]] :: Control の入力を sticky にしてくれるやつ
   - [[*グローバルキーバインド][グローバルキーバインド]] :: いつでもどこでも使えるキーバインド周りの設定をここにまとめている

** key-chord
   :PROPERTIES:
   :EXPORT_FILE_NAME: key-chord
   :END:

*** 概要

    [[https://github.com/emacsorphanage/key-chord][key-chord]] はキーを同時に押した時にコマンドを発動させるということができるようにしてくれるパッケージ。

    なのですが[[https://qiita.com/zk_phi/items/e70bc4c69b5a4755edd6][本家の方だと誤爆が多い]]ということなので
    それを改善した [[https://github.com/zk-phi/key-chord/][zk-phi/key-chord]] の方を利用している。

    まあほとんど使えてないので改良版の恩恵をまだ受けてないけど……。

*** インストール

    いつも通り el-get でインストールしている。
    本家の方じゃないので GitHub のリポジトリから突っ込んでいる。

    #+begin_src emacs-lisp :tangle inits/70-key-chord.el
    (el-get-bundle zk-phi/key-chord)
    #+end_src

*** 設定

    同時押し時の許容時間、その前後で別のキーが押されていたら発動しない判断をする、みたいな設定を入れている。

    #+begin_src emacs-lisp :tangle inits/70-key-chord.el
    (setq key-chord-two-keys-delay           0.25
          key-chord-safety-interval-backward 0.1
          key-chord-safety-interval-forward  0.15)
    #+end_src

    キーの同時押し判定は 0.15 秒で、
    それらのキーが押される直前の 0.1 秒以内、または直後の 0.15 秒に押されていたら発動しない、
    という設定にしている。

    改良版の作者の記事だと、直後判定は 0.25 秒で設定されていたが
    自分は Hydra の起動に使っている上に Hydra で叩けるやつでよく使うやつは覚えているので
    表示を待たずに次のキーを押すので 0.25 秒も待っていられないという事情があった。

*** 有効化

    設定を入れた後は有効にするだけである。

    #+begin_src emacs-lisp :tangle inits/70-key-chord.el
    (key-chord-mode 1)
    #+end_src

    実際のキーバインド設定は各モードだったり
    グローバルキーバインドを設定しているファイルだったりで書く感じ。

    といいつつ現状では Hydra 起動のやつしか使ってないので、
    グローバルキーバインド設定でしか書いてない。

*** sticky-shift
**** セミコロン2つでシフトを押した状態にする
     セミコロンを2回叩くことで shift が押されてるという状態を実現する。

     これにより magit で P などを入力したい時にも ~;;p~ で入力できるし
     通常の英字入力時にも大文字にできるので
     左手小指が痛い時には Shift を使わずに操作ができるようになる。

     #+begin_src emacs-lisp :tangle inits/70-key-chord.el
     (key-chord-define-global ";;"
                              'event-apply-shift-modifier)

     (key-chord-define key-translation-map
                       ";;"
                       'event-apply-shift-modifier)
     #+end_src

     ~global-key-map~ と ~key-translation-map~ の両方に定義しないと動かないが
     その原因はよく分かってない。一旦動くから良しとしている。

     ここで使っている ~event-apply-shift-modifier~ はデフォルトでは ~C-x @ S~ にバインドされているやつ。
     お仲間に ~event-apply-control-modifier~ などの各 modifier キーがいるので
     sticky 的なことをやる上で便利な子達。
     [[*sticky-control][sticky-control]] の中でも ~event-apply-control-modifier~ が使われているぞい。

**** やりたかったけど実現できてないこと
***** セミコロン*2+数字キー、セミコロン*2+記号キーの対応
      [[https://www.emacswiki.org/emacs/sticky.el][sticky.el]] では実現されてそうなことなので、
      同じことをできるようにしたい
*** その他

    [[*sticky-control][sticky-control]] も control 限定で似たようなことをしているので
    key-chord に全部置き換えできるかもしれない。

** sticky-control
   :PROPERTIES:
   :EXPORT_FILE_NAME: sticky-control
   :END:

*** 概要
    指定したキーを2回叩いたら
    Control が押されてるような状態にしてくれるプラグイン。

    その2回の間隔はデフォルトだと 0.5 秒以内となっている。
    そのため、そのキーを押して 0.5 秒が経過したら、普通にそのキーが押されたことになる

    さらに ~sticky-control-shortcuts~ に指定されてる一部のキーについては
    sticky 用のキーを押した直後に shortcuts のキーを押すと
    Control を押している状態でそのキーを押したことになる。

    例えば私は ~,~ を sticky 用のキーにしていて
    shortcuts に ~c~ を入れているので
    ~,c~ と素早くタイプをすればそれだけで ~C-c~ が押された状態になる。

*** インストール

    まずは el-get-bundle でインストール。

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (el-get-bundle sticky-control)
    #+end_src

    ちなみにレシピは公式ではなかったので
    とりあえず自分の環境で使えるように自作レシピを置いている。

    #+begin_src emacs-lisp :tangle recipes/sticky-control.rcp
    (:name sticky-control
           :description "save your left little finger"
           :type http
           :url "https://raw.githubusercontent.com/martialboniou/emacs-revival/master/sticky-control.el"
           :features "sticky-control")
    #+end_src

    元々は http://www.cs.toronto.edu/~ryanjohn/sticky-control.el にあったのだけど
    最近そこからは取得できなくなったので
    https://github.com/martialboniou/emacs-revival/blob/master/sticky-control.el
    から取得して利用している

*** 設定

    まずは「2回叩いたら Control を押している状態になる」キーを指定する。

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (sticky-control-set-key 'sticky-control-key ?,)
    #+end_src

    私は ~,~ を sticky-control のキーにしているのでこの指定。

    そして次に ~sticky-control-shortuts~ の指定。
    ここに指定しておくと、
    例えば ~,c~ と素早くタイプすることで ~C-c~ が入力された状態とすることができる。

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (setq sticky-control-shortcuts
          '((?c . "\C-c")
            (?g . "\C-g")
            (?k . "\C-k")
            (?a . "\C-a")
            (?e . "\C-e")
            (?n . "\C-n")
            (?o . "\C-o")
            (?p . "\C-p")
            (?j . "\C-j")
            (?f . "\C-f")
            (?b . "\C-b")
            (?x . "\C-x")
            (?r . "\C-r")
            (?s . "\C-s")))
    #+end_src

    結構な数を指定しているけど、普段そんなに使えているわけでもない。
    まあ、大体 Control を押しながら使いそうなところは押さえてあるので
    何も考えずとも使えるようにしてある。

*** 有効化
    最後に有効化

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (sticky-control-mode)
    #+end_src

** Google 連携
   :PROPERTIES:
   :EXPORT_FILE_NAME: google-integration
   :END:
*** 概要
    Google と連携するパッケージとして
    [[*google-this][google-this]] と [[*google-translate][google-translate]] を入れているが、
    どっちも Google を使うので1つの Hydra にまとめていた方が扱いやすいと思って統合している
*** キーバインド

    #+begin_src emacs-lisp :tangle inits/21-google-hydra.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define google-pretty-hydra
        (:foreign-keys warn :title "Google" :quit-key "q" :color blue :separator "-")
        ("Current"
         (("SPC" google-this-noconfirm "No Confirm")
          ("RET" google-this           "Auto")
          ("w"   google-this-word      "Word")
          ("l"   google-this-line      "Line")
          ("s"   google-this-symbol    "Symbol")
          ("r"   google-this-region    "Region")
          ("e"   google-this-error     "Error"))

         "Feeling Lucky"
         (("L" google-this-lucky-search         "Lucky")
          ("i" google-this-lucky-and-insert-url "Insert URL"))

         "Translate"
         (("t" google-translate-at-point         "EN => JP")
          ("T" google-translate-at-point-reverse "JP => EN"))

         "Tool"
         (("W" google-this-forecast "Weather")))))
    #+end_src

    |-----+-----------------------------------------------------------------------|
    | Key | 効果                                                                  |
    |-----+-----------------------------------------------------------------------|
    | SPC | 確認なしで検索                                                        |
    | RET | どの範囲の情報で検索するか自動判定して検索                            |
    | w   | 近くの単語で検索                                                      |
    | l   | その行の内容で検索。エラーの検索とかに良いかも                        |
    | s   | シンボルで検索。使うのは Emacs Lisp の関数調べる時ぐらいか?           |
    | r   | リージョンで検索。まあリージョン選択してたら RET とかでいいんだけども |
    | e   | コンパイルバッファのエラーで検索するっぽい                            |
    |-----+-----------------------------------------------------------------------|
    | L   | 1件目を開く                                                           |
    | i   | 1件目の URL を挿入する                                                |
    |-----+-----------------------------------------------------------------------|
    | t   | 英語→日本語翻訳                                                       |
    | T   | 日本語→英語翻訳                                                       |
    |-----+-----------------------------------------------------------------------|
    | w   | 天気を調べる                                                          |
    |-----+-----------------------------------------------------------------------|

** グローバルキーバインド
   :PROPERTIES:
   :EXPORT_FILE_NAME: global-keybinds
   :END:
*** 概要
    Emacs では様々なグローバルマイナーモードが存在したりしていて
    いつでも使えるようなコマンドが多数存在するので
    ここでまとめて定義している。

    が、Hydra 関係もここに書くと項目が大きくなりすぎるので、それはまた別途定義している。

*** Mac での修飾キー変更
    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (if (eq window-system 'ns)
        (progn
              (setq ns-alternate-modifier (quote super)) ;; option  => super
              (setq ns-command-modifier (quote meta))))  ;; command => meta
    #+end_src
*** C-h を backspace に変更
    C-h で文字を消せないと不便なのでずっと昔からこの設定は入れている。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (keyboard-translate ?\C-h ?\C-?)
    (global-set-key "\C-h" nil)
    #+end_src
*** M-g rをstring-replaceに割り当て
    string-replace はよく使うのでそれなりに使いやすいキーにアサインしている

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (global-set-key (kbd "M-g r") 'replace-string)
    #+end_src

    replace-regexp もまあまあ使うけどそれはキーを当ててないので
    どこかでなんとかしたい。
    Hydra 使う?
*** C-\ で SKK が有効になるようにする
    C-\ で skk-mode を起動できるようにしている。
    C-x C-j の方も設定は生きているが使ってない。っていうか忘れてた。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (global-set-key (kbd "C-\\") 'skk-mode)
    #+end_src

    余談だけど org-mode とか commit message 書く時とかは
    自動で有効になるようにしたい気はする。
*** C-s を swiper に置き換え
    デフォルトだと C-s でインクリメンタルサーチが起動するが
    swiper の方が絞り込みができて便利だしカッチョいいのでそっちを使うようにしている
    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (global-set-key (kbd "C-s") 'swiper)
    #+end_src
*** window 間の移動
**** C-x o を ace-window に置き換え
     C-x o はデフォルトだと順番に window を移動するコマンドだが
     ace-window を使えばたくさん画面分割している時の移動が楽だし
     2分割の時は元の挙動と同様に2つの window を行き来する感じになので
     完全に置き換えても大丈夫と判断して、置き換えている。

     #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
     (global-set-key (kbd "C-x o") 'ace-window)
     #+end_src

     ace-window は他にもコマンドがあって
     Hydra の方で ace-swap-window は使えるようにしている
**** Shift+カーソルキーで window 移動
     シフトキーを押しながらカーソルキーを押すことでも
     window を移動できるようにしている

     #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
     (windmove-default-keybindings)
     #+end_src

     ただし org-mode のキーバインドとぶつかるので実はあまり使ってないし
     そろそろ無効にしてもいいんじゃないかなという気もしている

*** undo/redo
    undo  と redo には undo-fu を使っている
    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (global-set-key (kbd "C-/") 'undo-fu-only-undo)
    (global-set-key (kbd "C-M-/") 'undo-fu-only-redo)
    #+end_src

*** \ を入力した時に円マークにならないようにする設定
    Mac だとデフォルト状態だと \ を入れると円マークになるのだが
    プログラムを書く上ではバックスラッシュであってほしいので
    円マークが入力された時はバックスラッシュが入力されたように扱われるようにしている。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (define-key global-map [?¥] [?\\])
    (define-key global-map [?\C-¥] [?\C-\\])
    (define-key global-map [?\M-¥] [?\M-\\])
    (define-key global-map [?\C-\M-¥] [?\C-\M-\\])
    #+end_src

    ただ、たまに円マークを出したくなる時があるので
    その時はどうすべきかという課題がある。

*** multiple-cursors
    カーソルを複数表示できる [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] 用のキーバインド。
    基本的には公式 README に従って設定している。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    ;; multiple-cursors
    (global-set-key (kbd "C-:") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    #+end_src

    Ladicle さんの https://ladicle.com/post/config/#multiple-cursor の設定が便利そうだなって思って気になってるけどまだ試してない。

*** Ivy
    Helm から乗り換えて今はこちらをメインで使っている。
    基本的には既存のキーバインドの持っていた機能が強化されるようなコマンドを代わりに割り当てている。
    デフォルトより良い感じで良い。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)
    (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    #+end_src

    | Key     | 効果                                                                                                    |
    | M-x     | コマンド実行。絞り込みができるのでコマンド名がうろ覚えでも実行できて便利                                |
    | M-y     | kill-ring の候補表示。適当に複数 kill-ring に入れておいてこれを起動して絞り込んで貼り付けとかできて便利 |
    | C-x b   | バッファ切替。これも適当にバッファを絞り込めて便利                                                      |
    | C-x C-f | find-file の置き換え。ido より便利な感じの絞り込み選択ができる。                                        |

*** zoom-window                                                      :unused:
    [[https://github.com/emacsorphanage/zoom-window][zoom-window]] は tmux の zoom 機能のように
    選択している window だけを表示したり戻したりができるパッケージ。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (global-set-key (kbd "C-x 1") 'zoom-window-zoom)
    #+end_src

    実は戻すことがあんまりないので、
    このキーバインドは戻してもいいかもしれないなと思っていたりする。

*** neotree                                                          :unused:
    [[https://github.com/jaypei/emacs-neotree][Neotree]] は IDE みたいにファイルツリーを表示を表示するパッケージ。
    有効にしているとちょっぴりモダンな雰囲気になるぞい。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (global-set-key [f8] 'neotree-toggle)
    #+end_src

    f8 にバインドしているけど
    Helm でも起動できるようにしているので、こっちの設定は外してもいいかもなとか思っている。

*** org-mode                                                         :unused:
    みんな大好き org-mode 用にもキーバインドを設定している。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (setq my/org-mode-prefix-key "C-c o ")
    (global-set-key (kbd (concat my/org-mode-prefix-key "a")) 'org-agenda)
    (global-set-key (kbd (concat my/org-mode-prefix-key "c")) 'org-capture)
    (global-set-key (kbd (concat my/org-mode-prefix-key "l")) 'org-store-link)
    #+end_src

    けど org-mode 用の Hydra も用意しているので
    これもそろそろ削除かな……

*** keychord
    keycohrd は2つのキーを同時押しというキーバインドを実現するパッケージ。
    麦汁は https://github.com/zk-phi/key-chord/ のバージョンを利用している。

    とりあえず jk を入力すると
    グローバルに使いたいコマンドを載せた Hydra が起動するようにしている。
    めっちゃ使ってる。便利。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    (key-chord-define-global "jk" 'pretty-hydra-usefull-commands/body)
    #+end_src

*** yes or no ではなく y or n で質問する
    何か質問された時に yes とか入力するのがだるいので
    y だけで済ませられるようにしている。

    #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
    ;; Don't ask yes or no.
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

    一応 Emacs 的には重要なのは yes/no で回答するようになっていたはずなので
    より安全に使いたい人はこの設定は入れない方が良いはず。

* ファイル編集/入力補助
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: editing
  :END:
** ファイル編集/入力補助
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>4. </b>" :weight 4 :disableToc true
   :END:

   ここにはファイル編集や入力補助の設定をまとめている

   - [[#editing-base-config][基本設定]] :: 編集周りの基本的な設定
   - [[*auto-insert][auto-insert]] :: ファイル新規作成時にテンプレートを挿入する機能
   - [[*company-mode][company-mode]] :: プラグイン拡張方式を採用した、入力補完インターフェースを提供してくれるやつ
   - [[*emojify][emojify]] :: Slack や GitHub みたいに ~:smile:~ とか入れると笑顔の絵文字を表示する、みたいなやつ
   - [[*multiple-cursors][multiple-cursors]] :: カーソルを増やして複数箇所を同時に編集できるようになるやつ
   - [[*smartparens][smartparens]] :: カッコや引用符などのペアになるやつの入力補助をしてくれるやつ
   - [[*undo-fu][undo-fu]] :: シンプルな undo/redo の機能を提供してくれるやつ
   - [[*view-mode][view-mode]] :: Emacs に組込まれてる閲覧専用のモード。コードリーディングの時に有効にすると便利
   - [[*whitespace][whitespace]] :: 空白文字を可視化したり自動的に消したりする便利なやつ
   - [[*yasnippet][yasnippet]] :: テンプレート挿入機能を提供してくれるやつ

** 基本設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: editing-base
   :CUSTOM_ID: editing-base-config
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1
   :END:

*** 概要
    なんか編集周りの基本的な設定としてまとめられていたのでここに置いとく

*** インデントにタブを使わないようにする
    最近の開発スタイルではインデントにタブを混ぜないスタイルなので
    そのように設定している。

    #+begin_src emacs-lisp :tangle inits/80-edit.el
    (setq indent-tabs-mode nil)
    #+end_src

*** 以前に開いていた位置を保存/復元する
    save-place-mode を有効にしていると
    以前に開いたことのあるファイルの、開いていた場所を覚えておいてくれる。

    一度閉じてまた開いた時なんかに再度移動しないで済んで地味に便利なやつ

    #+begin_src emacs-lisp :tangle inits/80-edit.el
    (save-place-mode 1)
    #+end_src
** auto-insert
   :PROPERTIES:
   :EXPORT_FILE_NAME: auto-insert
   :END:

*** 概要
    auto-insert はファイルを新規作成した時に
    ファイル名に応じたテンプレートを挿入する機能。

    Emacs が標準で持ってるライブラリなのでインストールは不要

*** 設定

    Emacs の設定は .emacs.d の中に閉じ込めたいので
    auto-insert のテンプレートも ~~/.emacs.d/insert~ に閉じ込める設定にしている。

    #+begin_src emacs-lisp :tangle inits/20-auto-insert.el
    (custom-set-variables '(auto-insert-directory "~/.emacs.d/insert/"))
    #+end_src

*** 有効化

    あとは単に有効化している。

    #+begin_src emacs-lisp :tangle inits/20-auto-insert.el
    (auto-insert-mode 1)
    #+end_src

*** 他の設定

    ファイル名を正規表現でマッチさせてテンプレートが選択されるので
    各言語やフレームワーク毎に設定を入れることにしている。

    実際は今のところ inits/41-vue.el でのみ追加設定を入れている。

** company-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: company-mode
   :END:

*** 概要

    [[https://github.com/company-mode/company-mode][company-mode]] は Emacs での補完機能を提供してくれるパッケージです。
    プラグイン式に拡張しやすいのが特徴っぽい。

*** インストール

    いつも透り el-get から入れている

    #+begin_src emacs-lisp :tangle inits/30-company.el
    (el-get-bundle company-mode)
    #+end_src

*** 設定

    ほとんど設定は入れていない。
    有効な時に ~C-s~ を入力すると検索ができる程度。

    というのも最近の更新で、デフォルトが結構好みのキーバインドになったので
    キーバインドはこだわる必要がなくなったのと、
    ついでに色もそこで好みな感じになってくれた。

    というわけで設定は以下のようにとてもシンプル。

    #+begin_src emacs-lisp :tangle inits/30-company.el
    (with-eval-after-load 'company
      ;; active
      (define-key company-active-map (kbd "C-s") 'company-search-candidates))
    #+end_src

    それと最近追加された company-show-quick-access を有効にしている。

    #+begin_src emacs-lisp :tangle inits/30-company.el
    (custom-set-variables '(company-show-quick-access t))
    #+end_src

    これを有効にしていると補完候補の末尾に quick access key が表示されて
    例えば4行目なら 4 とか表示されるので
    そこで M-4 とか入力すると4行目が選択されて便利

*** その他

    グローバルでは有効にしていなくて
    各モードで有効にするような hook を入れている。

    グローバルで有効でもいい気がしている。

** emojify
   :PROPERTIES:
   :EXPORT_FILE_NAME: emojify
   :END:
*** 概要
    [[https://github.com/iqbalansari/emacs-emojify][emojify]] は ~:smile:~ のような入力を笑顔の絵文字が表示されたりするようにするパッケージ。

    文書を書く時に emojify で絵文字に置き換わるような文字列を入れておくと
    文書が華やかになって良いぞ!

*** インストール                                                :improvement:
    いつも通り el-get で入れている。
    何か依存でもあるのが別途 dash.el も読み込んでる。

    #+begin_src emacs-lisp :tangle inits/20-emojify.el
    (el-get-bundle emojify)
    (el-get-bundle dash)
    #+end_src

    dash.el は他でも使うので、ライブラリの読み込みのところで対応した方が良さそうだな。
    今度対応しよう。

*** 有効化

    emojify がグローバルに有効になるようにしている。

    mode-line でも有効になるようにしているので
    mode-line のカスタマイズ時に emojify で装飾することもできる。今そんなことやってないけど。
    #+begin_src emacs-lisp :tangle inits/20-emojify.el
    (global-emojify-mode 1)
    (global-emojify-mode-line-mode 1)
    #+end_src
** multiple-cursors
   :PROPERTIES:
   :EXPORT_FILE_NAME: multiple-cursors
   :END:

*** 概要
    [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] はカーソルを増やせるやつ。
    複数箇所を同時に編集できるようになって便利。

*** インストール
    el-get からインストールしている

    #+begin_src emacs-lisp :tangle inits/50-multiple-cursor.el
    (el-get-bundle multiple-cursors)
    #+end_src

*** キーバインド

    キーバインドは別途定義している。
    もうちょっと真面目に定義したい

** smartparens
   :PROPERTIES:
   :EXPORT_FILE_NAME: smartparens
   :END:

*** 概要

    [[https://github.com/Fuco1/smartparens][smartparens]] はカッコとかクォートとかのペアになるようなものの入力補助をしてくれるやつ。

    strict モードだとペアが崩れないように強制するので
    雑に C-k で行削除しててもペアが維持されて便利。

*** インストール

    いつも透り el-get で導入している

    #+begin_src emacs-lisp :tangle inits/20-smartparens.el
    (el-get-bundle smartparens)
    #+end_src

*** 設定

    実は導入して間もないので、提供されてるオススメ設定のみ突っ込んでいる。
    オススメ設定は別途 reqiure したら良いという作りなので、以下のようにして突っ込んでいる。

    #+begin_src emacs-lisp :tangle inits/20-smartparens.el
    (require 'smartparens-config)
    #+end_src

*** その他

    各言語の hook で ~smartparens-strict-mode~ を有効にしている。
    なんか常に有効だと困りそうな気がしたので。

** undo-fu
   :PROPERTIES:
   :EXPORT_FILE_NAME: undo-fu
   :END:

*** 概要
    [[https://github.com/emacsmirror/undo-fu][undo-fu]] はシンプルな undo/redo 機能を提供してくれるやつ。

    昔はもっと色々できる [[https://www.emacswiki.org/emacs/UndoTree][undo-tree]] を使っていたけど
    そっちにバグがあるっぽいので乗り換えた。

*** インストール
    #+begin_src emacs-lisp :tangle inits/80-undo-fu.el
    (el-get-bundle undo-fu)
    #+end_src

*** キーバインド

    別の場所で定義しているけど、以下のキーバインドにしている。

    | Key   | 効果 |
    | C-/   | undo |
    | C-M-/ | redo |

** view-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: view-mode
   :END:
*** 概要
    [[https://www.emacswiki.org/emacs/ViewMode][view-mode]] は Emacs に標準で組込まれているモードで、バッファを閲覧専用にする機能を提供してくれるやつ。
    コードを眺めたい時などに使っている。

*** キーバインド
    view-mode の時は文字入力をする必要がないので
    通常のモードの時とは違うキーバインドが使えるようにしている。

    #+begin_src emacs-lisp :tangle inits/40-view.el
    (defun my/setup-view-mode-keymap ()
        (let ((keymap view-mode-map))
          (define-key keymap (kbd "h") 'backward-char)
          (define-key keymap (kbd "j") 'next-line)
          (define-key keymap (kbd "k") 'previous-line)
          (define-key keymap (kbd "l") 'forward-char)

          (define-key keymap (kbd "e") 'forward-word)

          (define-key keymap (kbd "b")   'scroll-down)
          (define-key keymap (kbd "SPC") 'scroll-up)

          (define-key keymap (kbd "g") 'beginning-of-buffer)
          (define-key keymap (kbd "G") 'end-of-buffer)
          (define-key keymap (kbd "<") 'beginning-of-buffer)
          (define-key keymap (kbd ">") 'end-of-buffer)))
    #+end_src

    |------+----------------------|
    | Key  | 効果                 |
    |------+----------------------|
    | h    | 1文字戻る            |
    | j    | 1行下がる            |
    | k    | 1行上がる            |
    | l    | 1文字進む            |
    | e    | 単語の直後に移動     |
    | b    | 1スクロール戻る      |
    | SPC  | 1スクロール進む      |
    | g, < | バッファの先頭に移動 |
    | G, > | バッファの末尾に移動 |
    |------+----------------------|

    適当だけど Vim の通常モードの時みたいな操作ができるようにしている。

    これで不要に左手小指を痛める可能性が下がるであろう。

*** hook
    上でキーバインドを設定できる関数を用意してあるので
    view-mode が有効になる時にそれを hook して設定されるようにしている。

    が、 hook する必要あるのか疑問ではあるな。ま、動いているからとりあえずいいけど。

    #+begin_src emacs-lisp :tangle inits/40-view.el
    (defun my/view-mode-hook ()
      (my/setup-view-mode-keymap))

    (add-hook 'view-mode-hook 'my/view-mode-hook)
    #+end_src
*** Toggle するコマンド
    view-mode にしたり戻したりするコマンドを用意している。

    view-mode を有効にする時には hl-line-mode も有効にしているので
    その時眺めている行がハイライトされるようになっている。
    普段はそれがあるかどうかでどっちもモードかざっくり判断している。

    他にも mode-line の色を変更するなどの技があるようだが
    ひとまず今の設定でそう困ってないのでいいかな。

    #+begin_src emacs-lisp :tangle inits/40-view.el
    (defun my/toggle-view-mode ()
      "view-mode と通常モードの切り替えコマンド"
      (interactive)
      (cond (view-mode
             (hl-line-mode -1)
             (view-mode -1))
            (t
             (hl-line-mode 1)
             (view-mode 1))))
    #+end_src

** whitespace
   :PROPERTIES:
   :EXPORT_FILE_NAME: whitespace
   :END:
*** 概要
    whitespace-mode は Emacs に標準添付されている、
    空白文字を可視化したりするためのモード。

    全角空白を可視化したり、行末の空白を可視化したりしておくと便利なので入れている。

*** 設定
    #+begin_src emacs-lisp :tangle inits/30-whitespace.el
    (require 'whitespace)
    #+end_src

*** 可視化対象
    可視化対象の空白について設定している。

    #+begin_src emacs-lisp :tangle inits/30-whitespace.el
    (setq whitespace-style '(face
                             trailing
                             tabs
                             spaces
                             empty
                             space-mark
                             tab-mark))
    #+end_src

    |------------+-------------------------------------------------------------------------|
    | 値         | 意味                                                                    |
    |------------+-------------------------------------------------------------------------|
    | face       | face による可視化を有効にする。これがないと *-mark 以外が有効にならない |
    | trailing   | 行末の空白を可視化する                                                  |
    | tabs       | タブ文字の可視化                                                        |
    | spaces     | 空白の可視化。ただし後の設定で全角のみを可視化するようにている          |
    | empty      | バッファの前後に空行があれば可視化                                      |
    | space-mark | 空白文字を別の文字に置き換える設定。置き換え文字は後述                  |
    | tab-mark   | タブ文字を別の文字に置き換える設定。置き換え文字は後述                  |
    |------------+-------------------------------------------------------------------------|

    他にも lines, lines-tail, indentation, big-indent, newline-mark などがある

    lines-tail あたりを使うと1行80文字制限でコーディングする時などに便利かもしれないなって思ってる。
    設定したことがないからわからんが……。

*** 置き換え表示用の文字の設定
    #+begin_src emacs-lisp :tangle inits/30-whitespace.el
    (setq whitespace-display-mappings
          '((space-mark ?\u3000 [?\u25a1])
            ;; WARNING: the mapping below has a problem.
            ;; When a TAB occupies exactly one column, it will display the
            ;; character ?\xBB at that column followed by a TAB which goes to
            ;; the next TAB column.
            ;; If this is a problem for you, please, comment the line below.
            (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])))
    #+end_src

    |------------+-------------------------------------------------------------------|
    | 置き換え元 | 置き換え先                                                        |
    |------------+-------------------------------------------------------------------|
    | 空白文字   | 　                                                                 |
    | タブ文字   | » + TAB を表示する。もしそれが表示できない時は \ + TAB で代替する |
    |------------+-------------------------------------------------------------------|

    どこかからコピペしてきたやつなので英語のコメントもあるが
    「なんかうまく動かなかったらコメントアウトしてくれよな」って感じ。
    ま、うまく動いてそうなのでヨシッ!

*** スペースは全角のみを可視化
    半角スペースまでいちいち可視化されてたら邪魔だし
    気付きたいのは全角スペースが紛れてるかどうかなので、空白文字ではそれだけを可視化するようにしている。

    #+begin_src emacs-lisp :tangle inits/30-whitespace.el
    (setq whitespace-space-regexp "\\(\u3000+\\)")
    #+end_src

*** 行末の空白も表示
    通常の半角空白と No Break Space(~&nbsp;~ で表示されるやつ) を行末での可視化対象としている。

    #+begin_src emacs-lisp :tangle inits/30-whitespace.el
    (setq whitespace-trailing-regexp  "\\([ \u00A0]+\\)$")
    #+end_src

    タブも入れてもまあいいんだろうけど、別途可視化しているからわざわざ入れなくても良いということでこうしている気がする。

*** 保存前に自動でクリーンアップ
    保存時なんかに自動的に余計な空白を消すような設定。
    保存する時に、バッファ前後の無駄な空白や末尾の空白なんかを取り除いてくれる。

    #+begin_src emacs-lisp :tangle inits/30-whitespace.el
    (setq whitespace-action '(auto-cleanup))
    #+end_src

    実はスペースとタブが混ざってる時などもいい感じに対応してくれそうな雰囲気があるけど
    そもそもスペースとタブが混ざるような設定にしてないのでそれは観測できてない。

*** Emacs 全体で有効化
    とまあ、上で設定してきたように、色々可視化されたり余計な空白を処理してくれたりで便利なやつなので、
    Emacs 全体で有効にしている。

    #+begin_src emacs-lisp :tangle inits/30-whitespace.el
    (global-whitespace-mode 1)
    #+end_src

** yasnippet
   :PROPERTIES:
   :EXPORT_FILE_NAME: yasnippet
   :END:

*** 概要
    [[https://github.com/joaotavora/yasnippet][yasnippet]] はテンプレートを挿入する機能を持ったパッケージ。
    Emacs でそこそこ何かを書いている人なら大体知ってるような有名なやつだと思う。

*** インストール
    いつも通り el-get でインストール

    #+begin_src emacs-lisp :tangle inits/20-yasnippet.el
    (el-get-bundle yasnippet)
    #+end_src
*** 有効化
    どこでも使いたいぐらい便利なやつなので global に有効化している

    #+begin_src emacs-lisp :tangle inits/20-yasnippet.el
    (yas-global-mode 1)
    #+end_src

*** キーバインド
    基本的に覚えられないので Hydra を使って定義している

    #+begin_src emacs-lisp :tangle inits/20-yasnippet.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define
        yasnippet-hydra (:separator "-" :title "Yasnippet" :foreign-key warn :quit-key "q" :exit t)
        ("Edit"
         (("n" yas-new-snippet        "New")
          ("v" yas-visit-snippet-file "Visit"))

         "Other"
         (("i" yas-insert-snippet  "Insert")
          ("l" yas-describe-tables "List")
          ("r" yas-reload-all      "Reload all")))))
    #+end_src

    | Key | 効果                                                |
    | n   | 現在のメジャーモード用に新しい snippet を作る       |
    | v   | 現在のメジャーモードの登録済 snippet ファイルを開く |
    | i   | snippet の挿入。選択は ivy で行われる。             |
    | l   | 現在のメジャーモードの登録済 snippet の一覧表示     |
    | r   | snippet を全部 load し直す                          |

*** その他
    実は、どういう snippet があれば便利なのかよくわかってなくて
    snippet をほとんど登録してない。

    [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] などのよくある snippet 集は、
    そんなの省略形をまず覚えられないだろと思っている。
    ivy で選択可能なので省略形は長くていいので中身がわかりやすい方が良い。

    また導入はしてないが [[https://github.com/mkcms/ivy-yasnippet][ivy-yasnippet]] を入れるとさらにそのあたりがやりやすくなるんじゃないかと思う。

    それから company-yasnippet で補完できるようにしているとより良いかもれない。

    とはいえ snippet を充実させてない今だとどうにもイマイチそのあたりを充実させる気力がない
* UI
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: ui
  :END:
** UI
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>5. </b>" :weight 5 :disableToc true
   :END:

   ここでは Emacs の UI を変更するようなものを載せている

   - [[*alert][alert]] :: 共通インターフェースで色々な通知機能と連携して通知するやつ
   - [[*all-the-icons][all-the-icons]] :: Emacs で様々なアイコンを表示できるようにするやつ
   - [[*color-theme-molokai][color-theme-molokai]] :: ダークグレーベースのカラーテーマ
   - [[*dashboard][dashboard]] :: Emacs 起動時の表示を便利にしてくれるパッケージ
   - [[*frame-cmds][frame-cmds]] :: フレーム移動や拡縮などの操作をするコマンド群
   - [[*fullscreen][fullscreen]] :: 起動時のフルスクリーン設定
   - [[*git-gutter-fringe][git-gutter-fringe]] :: 最後のコミットからどう弄ったかを fringe 領域に表示してくれるやつ
   - [[*highlight-indent-guides][highlight-indent-guides]] :: インデント毎にラインを引いたりして見易くしてくれるやつ
   - [[*hydra][hydra]] :: サブコマンドをビジュアル的に表示してくれるメニューを提供してくれるやつ
   - [[*ido-mode][ido-mode]] :: Emacs 標準添付の補完インターフェース
   - [[*ivy][ivy]] :: 絞り込みインターフェーズを提供してくれるやつ。
   - [[*mode-line][mode-line]] :: モードラインに関する設定をここにまとめている
   - [[*Neotree][Neotree]] :: フォルダ構造を IDE みたいにツリー表示するやつ
   - [[*posframe][posframe]] :: いい感じの位置に child frame を表示する機能を提供するやつ
   - [[*show-paren-mode][show-paren-mode]] :: 対応するカッコとコッカをハイライトしてくれたりするやつ
   - [[*toolbar][toolbar]] :: Emacs 標準のボタンなどの UI 部分の設定
   - [[*uniquify][uniquify]] :: 同名ファイルを開いている時にどこのファイルかまで表示してくれるやつ
   - [[*yascroll][yascroll]] :: 主張の大人しいスクロールバーを表示してくれるやつ
   - [[*zoom][zoom]] :: フォーカスが当たってるウインドウを大きく表示してくれるやつ
   - [[*zoom-window][zoom-window]] :: 見ている window を最大化したり戻したりしてくれるやつ

** alert
   :PROPERTIES:
   :EXPORT_FILE_NAME: alert
   :END:
*** 概要
    [[https://github.com/jwiegley/alert][alert]] は色々な通知システムに対応した通知を飛ばせるパッケージ。
    Mac だと Growl だったり terminal-notifier だったり
    Win だと toast だったり
    Linux だと libnotify だったりを使って
    その環境での標準的な通知機能を使って通知ができるやつ。

*** インストール
    いつも通りに el-get でインストール。

    #+begin_src emacs-lisp :tangle inits/20-alert.el
    (el-get-bundle alert)
    #+end_src
*** 設定
    業務では Mac を使ってるので terminal-notifier を設定している。
    他の環境では大人しく message にしている。

    #+begin_src emacs-lisp :tangle inits/20-alert.el
    (if (or (eq window-system 'ns) (eq window-system 'mac))
        (setq alert-default-style 'notifier) ;; use terminal-notifier
      (setq alert-default-style 'message))
    #+end_src

    本当は WSL2 でもいい感じに通知されるようにしたいが
    [[https://cobodo.hateblo.jp/entry/2018/03/08/160247][WSLで通知を出すメモ - cobodoのブログ]]
    とかを見てるとちょっと面倒そうなのでまた今度にする。

** all-the-icons
   :PROPERTIES:
   :EXPORT_FILE_NAME: all-the-icons
   :END:

*** 概要

    [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] は Emacs で様々なアイコンを表示できるようにして華やかにしてくれるパッケージです。
    [[*Neotree][Neotree]] などでも対応していてアイコンでファイルの種類が表示されるようになってモダンな雰囲気が出ます。

*** インストール                                                :improvement:

    いつも通り el-get-bundle で入れている。
    明示的に require している理由は忘れました。

    #+begin_src emacs-lisp :tangle inits/20-all-the-icons.el
    (el-get-bundle all-the-icons)
    (require 'all-the-icons)
    #+end_src

*** フォントのインストール

    以下のコマンドを叩くことでフォントをインストールすることができる。
    all-the-icons のインストール直後に叩いておいたら普段は叩かなくて良いはず。

    #+begin_src emacs-lisp
    (all-the-icons-install-fonts)
    #+end_src

    all-the-icons の更新後は叩いた方がいいかもしれない

*** キーバインド                                                :improvement:

    キーバインドは覚えられないし、使えるキーも大分埋まってるので、
    pretty-hydra を使って all-the-icons 用の Hydra を用意している。

    #+begin_src emacs-lisp :tangle inits/20-all-the-icons.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define all-the-icons-hydra (:separator "-" :title "All the icons" :exit t :quit-key "q")
        ("Insert"
         (("a" all-the-icons-insert-alltheicon "All the icons")
          ("f" all-the-icons-insert-fileicon   "File icons")
          ("F" all-the-icons-insert-faicons    "FontAwesome")
          ("m" all-the-icons-insert-material   "Material")
          ("o" all-the-icons-insert-octicon    "Octicon")
          ("w" all-the-icons-insert-wicon      "Weather")
          ("*" all-the-icons-insert            "All")))))
    #+end_src

    |-----+----------------------------------------------------|
    | Key | 効果                                               |
    |-----+----------------------------------------------------|
    | a   | all-the-icons で追加されてるアイコンを検索して挿入 |
    | f   | ファイルアイコンを検索して挿入                     |
    | F   | FontAwesome アイコンを検索して挿入                 |
    | m   | Material アイコンを検索して挿入                    |
    | o   | Octicon のアイコンを検索して挿入                   |
    | w   | 天気アイコンを検索して挿入                         |
    | *   | 全てのアイコンを検索して挿入                       |
    |-----+----------------------------------------------------|

    フォントのインストールコマンドもここに収めてしまうのが良さそうな気がする

** color-theme-molokai
   :PROPERTIES:
   :EXPORT_FILE_NAME: color-theme-molokai
   :END:
*** 概要
    [[https://github.com/sonatard/color-theme-molokai][color-theme-molokai]] は
    多分 vim の molokai をベースにしたテーマ。
    更に元はどうも TextMate っぽい。

    ダークグレイ背景をベースにしたテーマで
    もう何年もこのテーマを使っている。
*** インストール
    いつも通り el-get で入れている。
    MELPA に登録されてないのかわからんけど直接 GitHub から入れている。

    #+begin_src emacs-lisp :tangle inits/90-theme.el
    (el-get-bundle alloy-d/color-theme-molokai)
    #+end_src
*** テーマへの PATH を通す
    インストールしただけでは custom-theme-load-path には追加されないので
    自分で add-to-list を使って PATH を通している。

    #+begin_src emacs-lisp :tangle inits/90-theme.el
    (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/el-get/color-theme-molokai"))
    #+end_src
*** テーマの読み込み
    最後に load-theme で molokai を読み込んでいる。

    #+begin_src emacs-lisp :tangle inits/90-theme.el
    (load-theme 'molokai t)
    #+end_src
*** その他
    もう長年これを使っているが、
    近年ではもっと良いテーマも出ているかもしれないので
    そのうち乗り換えるかも。

    なんだけど、テーマ乗り換えるのちょっとだるいのよね〜。

** dashboard
   :PROPERTIES:
   :EXPORT_FILE_NAME: dashboard
   :END:
*** 概要
    [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] は
    Emacs の起動時に色々な情報を表示してくれるパッケージ。
*** インストール
    いつも通り el-get で入れている

    #+begin_src emacs-lisp :tangle inits/92-dashboard.el
    (el-get-bundle dashboard)
    #+end_src
*** 表示するアイコンをロゴに変更
    ロゴ、画像にした方がカッコいいよねってことで logo に変更している

    #+begin_src emacs-lisp :tangle inits/92-dashboard.el
    (setq dashboard-startup-banner 'logo)
    #+end_src

    なお CUI で起動すると自動でテキストでの表示になる
*** 表示する情報の設定
    dashboard-items を弄ることで表示する情報を設定している

    #+begin_src emacs-lisp :tangle inits/92-dashboard.el
    (setq dashboard-items '((recents  . 5)
                            ;; (bookmarks . 5) ;; bookmarks は使ってない
                            (projects . 5)
                            (agenda . 5)
                            ;; (registers . 5) ;; registers は使ってない
                            ))
    #+end_src

    Emacs の bookmarks と register は使ってない(使えてない)のでコメントアウトしている。

    あとは最近開いたファイルとプロジェクトとagendaを表示するようにしているが
    イマイチ活用できてないので色々設定を詰める必要がありそう
*** 各セクションのタイトル部の先頭にアイコンを表示
    これは見た目をちょっとだけカッコよくするために all-the-icons で装飾するための設定

    #+begin_src emacs-lisp :tangle inits/92-dashboard.el
    (setq dashboard-set-heading-icons t)
    #+end_src
*** 各ファイルの先頭にアイコンを表示
    これも見た目をちょっとだエカッコよくするために all-the-icons で装飾するための設定。
    だけどファイルの種類がアイコンでわかるので便利。

    #+begin_src emacs-lisp :tangle inits/92-dashboard.el
    (setq dashboard-set-file-icons t)
    #+end_src
*** 最後に設定を反映
    多分設定を反映するための関数だと思ってる。

    #+begin_src emacs-lisp :tangle inits/92-dashboard.el
    (dashboard-setup-startup-hook)
    #+end_src
*** その他
    agenda などは表示する内容を絞ったりした方が dashboard として使い勝手が良さそう。
    今日の会議何があるとかが出ると便利かもね。

** frame-cmds
   :PROPERTIES:
   :EXPORT_FILE_NAME: frame-cmds
   :END:
*** 概要
    [[https://www.emacswiki.org/emacs/frame-cmds.el][frame-cmds]] は Emacs のフレーム操作に関するコマンド集。
    上下左右に移動したり広げたりといったことができる。
    いや、他にもできそうなんだけど、私がそれを把握してない。

*** インストール
    el-get で以下のように書くと emacswiki からインストールされる。

    #+begin_src emacs-lisp :tangle inits/80-frame-cmds.el
    (el-get-bundle frame-cmds)
    #+end_src
*** キーバインド
    無論キーバインドは覚えられないので以下のように Hydra で定義している

    #+begin_src emacs-lisp :tangle inits/80-frame-cmds.el
    (pretty-hydra-define window-control-hydra (:separator "-" :title "Window Control" :exit nil :quit-key "q")
      ("Move"
       (("h" move-frame-left  "Left")
        ("j" move-frame-down  "Down")
        ("k" move-frame-up    "Up")
        ("l" move-frame-right "Right"))

       "Resize"
       (("H" shrink-frame-horizontally "H-")
        ("J" enlarge-frame "V+")
        ("K" shrink-frame "V-")
        ("L" enlarge-frame-horizontally "H+"))))
    #+end_src

    | Key | 効果             |
    | h   | 左に移動         |
    | j   | 下に移動         |
    | k   | 上に移動         |
    | l   | 右いん移動       |
    | H   | 左右方向に縮める |
    | J   | 上下方向に広げる |
    | K   | 上下方向に縮める |
    | L   | 左右方向に広げる |

** fullscreen
   :PROPERTIES:
   :EXPORT_FILE_NAME: fullscreen
   :END:
*** 概要
    起動時にフルスクリーンにする設定はここにまとめている

*** Mac の設定
    Mac の場合にフルスクリーンにする設定を入れていた。
    けど 2020-01-08 に yabai WM を導入したことにより
    起動時はフルスクリーンじゃない方がよくなったので以下の処理は今は使ってない。

    #+begin_src emacs-lisp
    (if (or (eq window-system 'ns) (eq window-system 'mac))
        (add-hook 'window-setup-hook
                  (lambda ()
                    (set-frame-parameter nil 'fullscreen 'fullboth))))
    #+end_src
*** WSL の設定
    X Window system の場合かつ WSLENV という環境変数が設定されている場合にはフルスクリーンにする。
    新しく Linux マシンを導入したらこれの影響を受けていたので
    後から WSLENV による判定を追加した次第。

    #+begin_src emacs-lisp :tangle inits/90-fullscreen.el
    (if (and (eq window-system 'x) (getenv "WSLENV"))
        (add-hook 'window-setup-hook
                  (lambda ()
                    (set-frame-parameter nil 'fullscreen 'fullboth)
                    (set-frame-position nil 0 0))))
    #+end_src

    微妙に画面の下の方がちゃんとフルになってくれてないけど
    そこは今は我慢して使っている。
    ちなみにその病はどうやら WSLg になっても残りそう。
    https://w.atwiki.jp/ntemacs/pages/69.html

** git-gutter-fringe                                            :improvement:
   :PROPERTIES:
   :EXPORT_FILE_NAME: git-gutter-fringe
   :END:

*** 概要
    [[https://github.com/emacsorphanage/git-gutter-fringe][git-gutter-fringe]] は [[https://github.com/emacsorphanage/git-gutter][git-gutter]] の派生版。
    最後のコミットからどの行を弄ったかを fringe 領域に表示してくれる。

    他にも hunk の操作をできる機能とかあるみたいだけどそのあたりは使ったことがない……。

    派生元の git-gutter は linum-mode と同じ領域を使って描画をしているようで
    併用ができなかったので git-gutter-fringe を利用している。

    が、Emacs 26 から display-line-numbers-mode が搭載されて linum-mode が不要になったので
    git-gutter に乗り換えても良さそう

*** インストール
    いつも通り el-get でインストールしている

    #+begin_src emacs-lisp :tangle inits/30-git-gutter-fringe.el
    (el-get-bundle git-gutter-fringe)
    #+end_src

*** 有効化
    Git 管理しているやつは全部差分情報が表示されて欲しいので
    グローバルマイナーモードを有効にしている。

    #+begin_src emacs-lisp :tangle inits/30-git-gutter-fringe.el
    (global-git-gutter-mode t)
    #+end_src

*** その他

    git-gutter ほどではないけど多少のカスタマイズはできるはずだが
    デフォルト設定で特に不満はないので何もしてない

** highlight-indent-guides
   :PROPERTIES:
   :EXPORT_FILE_NAME: highlight-indent-guides
   :END:

*** 概要

    [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] はインデント毎にラインを引いたりして見易くしてくれるパッケージ。
    通常のプログラムを書く時にも便利だけど、
    YAML などのインデントがそのまま構造になるような言語を弄る時にとても便利。

*** インストール

    これもいつも通り el-get でインストールしている。
    GitHub にあるのでそこを直接指定してインストールもできるのだけど
    el-get.lock からアップデートをチェックする都合上、
    レシピを用意してそれを使ってインストールしている

    #+begin_src emacs-lisp :tangle recipes/highlight-indent-guides.rcp
    (:name highlight-indent-guides
           :website "https://github.com/DarthFennec/highlight-indent-guides"
           :description "This minor mode highlights indentation levels via font-lock"
           :type github
           :pkgname "DarthFennec/highlight-indent-guides")
    #+end_src

    #+begin_src emacs-lisp :tangle inits/30-highlight-indent-guides.el
    (el-get-bundle highlight-indent-guides)
    #+end_src

*** 設定                                                        :improvement:

    今いる行がどのインデントにいるのかをわかりやすくするために
    responsive モードを有効にしている。

    #+begin_src emacs-lisp :tangle inits/30-highlight-indent-guides.el
    (setq highlight-indent-guides-responsive "stack")
    #+end_src

    defcustom で定義されてる変数なので
    custom-set-variables で設定した方がいいかもしれない。

** hydra
   :PROPERTIES:
   :EXPORT_FILE_NAME: hydra
   :END:

*** 概要
    [[https://github.com/abo-abo/hydra][Hydra]] は Emacs の貴重なキーバインドを節約できる便利なパッケージ。

    自分で定義した各 Hydra コマンドを実行すると
    それに紐付くサブコマンドとそれらのキーバインド一覧を表示させることができるというやつ。

*** インストール
    Hydra 本体と関連パッケージをここでインスコしている

**** Hydra 本体のインストール
     Hydra 本体は el-get で普通に入れている

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (el-get-bundle hydra)
     #+end_src

**** hydra-posframe のインストール
     Hydra は通常だと minibuffer あたりに表示されるけど
     画面の真ん中に表示される方が視線移動が少なくて便利なので
     hydra-posframe を使って画面中央に表示されるようにしている。

     インストールはいつも通り el-get で行っている。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (el-get-bundle hydra-posframe)
     #+end_src

     そして Emacs の初期化処理が完了したタイミングで
     それが使われるように after-init-hook で hydra-posframe を有効化している

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (add-hook 'after-init-hook 'hydra-posframe-enable)
     #+end_src

**** WebDAV Sync download の設定
     作業管理用の org-mode のドキュメントは WebDAV サーバにも上げて
     beorg でも使えるようにしているが
     それを拾って来るためのコマンドを用意している。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
       (defun my/download-from-beorg ()
         (interactive)
         (async-shell-command "java -jar ~/bin/webdav_sync1_1_9.jar -c ~/.config/webdav-sync/download.xml && notify-send 'WebDAV Sync' 'Downloaded from WebDAV'"))
     #+end_src

     簡単に ~async-shell-command~ を使って済ませている

**** major-mode-hydra のインストール
     自分以外で使っている人を見たことはないけど
     麦汁さんは [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]] というものを利用している。

     これは major mode 用に簡単に Hydra の設定ができるというやつ。
     なので emacs-lisp-mode 用の Hydra とか
     js2-mode 用の Hydra などを定義できて便利。

     どちらの場合も ~M-x major-mode-hydra~ で起動するので迷わないで済むのも良い。

     内部では同じリポジトリにある pretty-hydra というのを利用していて
     そいつが UI の定義をせずともそれなりの感じに Hydra のメニューを構築してくれるようになっている。
     これもズボラな麦汁さんは気に入っている。
     導入していても表示にこだわりたい場合は直接 ~defhydra~ したらいいだけだしね。

     ってことでそれを el-get を使って GitHub からインストールしている。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (el-get-bundle major-mode-hydra.el)
     #+end_src

     なおレシピは自前で用意している

     #+begin_src emacs-lisp :tangle recipes/major-mode-hydra.el.rcp
       (:name major-mode-hydra.el
              :website "https://github.com/jerrypnz/major-mode-hydra.el"
              :description "this package offers an alternative way to manage your major mode specific key bindings."
              :type github
              :pkgname "jerrypnz/major-mode-hydra.el")
     #+end_src

**** pretty-hydra の関数上書き
     Hydra の表示には hydra-posframe を使っているが
     hydra-posframe は最初に空行があると最後の行を表示しないようなので
     一時的に pretty-hydra--maybe-add-title を上書きして使ってみている。

     #+begin_src emacs-lisp :tangle inits/01-override.el
     (with-eval-after-load 'pretty-hydra
       (defun pretty-hydra--maybe-add-title (title docstring)
       "Add TITLE to the DOCSTRING if it's not nil, other return DOCSTRING unchanged."
       (if (null title)
           docstring
         (format "%s\n%s"
                 (cond
                  ((char-or-string-p title) title)
                  ((symbolp title)          (format "%%s`%s" title))
                  ((listp title)            (format "%%s%s" (prin1-to-string title)))
                  (t                        ""))
                 docstring))))
     #+end_src

     今のところ快適に使えているが
     posframe か hydra-posframe か pretty-hydra のどれかの修正で実はもう不要になっている可能性もある。


*** キーバインド
    Hydra でいくつかのキーバインドを設定していて
    他の機能に属さないものはここでまとめてキーバインドを定義している。

**** el-get
     他の機能に属さないものは、と書いたな? ありゃ嘘だ。
     el-get の Hydra はここで定義してしまっている。
     その内 el-get 用の設定ファイルにでも移動したい気がする。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (pretty-hydra-define el-get-hydra (:separator "-" :title "el-get" :foreign-key warn :quit-key "q" :exit t)
       ("Install"
        (("i" el-get-install   "Install")
         ("I" el-get-reinstall "Re-install")
         ("D" el-get-remove    "Uninstall"))

        "Update"
        (("s" el-get-self-update  "Self Update")
         ("u" el-get-update       "Update")
         ("A" el-get-update-all   "Update All")
         ("r" el-get-reload       "Reload"))

        "Recipe"
        (("f" el-get-find-recipe-file  "Find recipe"))

        "Lock"
        (("C" el-get-lock-checkout  "Checkout")
         ("U" el-get-lock-unlock    "Unlock"))))
     #+end_src

     | Key | 効果                                                                      |
     | i   | パッケージの新規インストール。正直このキー叩いた記憶がない                |
     | I   | パッケージの再インストール                                                |
     | D   | パッケージの削除                                                          |
     | s   | el-get 自身のアップデート                                                 |
     | u   | 指定パッケージのアップデート                                              |
     | A   | 全パッケージのアップデート                                                |
     | r   | パッケージの読み直し                                                      |
     | f   | パッケージのインストール用レシピファイルを開く                            |
     | C   | 指定したパッケージを el-get-lock でロックされたバージョンをチェックアウト |
     | U   | 指定したパッケージの el-get-lock のロックを解除                           |

**** Toggle Switches
     ここでは ON/OFF を切り替えるような機能のコントロールを行っている。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (pretty-hydra-define
       toggle-hydra
       (:separator "-"
                   :title (concat (all-the-icons-faicon "toggle-on") " Toggle Switches")
                   :foreign-key warn
                   :quit-key "q"
                   :exit t)
       ("View"
        (("z" zoom-mode                 "zoom-mode"      :toggle zoom-mode)
         ("Z" toggle-frame-fullscreen   "Fullscreen"     :toggle (frame-parameter nil 'fullscreen))
         ("b" display-battery-mode      "Battery"        :toggle display-battery-mode)
         ("L" display-line-numbers-mode "Line Number"    :toggle display-line-numbers-mode)
         ("N" neotree-toggle            "Neotree"        :toggle (if (fboundp 'neo-global--window-exists-p) (neo-global--window-exists-p) nil)))

        "Behavior"
        (("S" my/notify-slack-toggle    "Notify Slack"   :toggle my/notify-slack-enable-p)
         ("v" my/toggle-view-mode       "Readonly"       :toggle view-mode)
         ("E" toggle-debug-on-error     "Debug on error" :toggle debug-on-error))))
     #+end_src

     | Key | 効果                                                                                              |
     | z   | [[*zoom][zoom-mode]] のON/OFF切替。狭いディスプレイの時は ON にするが、大きいディスプレイだと OFF にしている |
     | Z   | フルスクリーンの切替。狭いディスプレイの時は ON にするが、大きいディスプレイだと OFF にしている   |
     | b   | バッテリー表示モードの切替。OFF にしたことないな……                                                |
     | L   | 行番号表示の切替。邪魔になる時もあるので ON/OFF 切り替えている                                    |
     | N   | [[*Neotree][Neotree]] の表示切替。普段は邪魔なので OFF にしている                                               |
     | S   | Slack 通知の切替。org-clock-in とかのタイミングで Slack に通知を飛ばしているが切る時もある        |
     | v   | view-mode にしたり戻したり。コードを眺めたい時などに ON にする                                    |
     | E   | エラー時のデバッグモードの切替。設定を弄ってる時はバックトレースある方が嬉しいよね                |

**** Sub Tools

     最初に起動した Hydra からは外してるけど、そこそこ使うコマンド群を適当に詰めてるやつ。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
            (pretty-hydra-define
              subtools-hydra
              (:separator "-"
                          :color teal
                          :foreign-key warn
                          :title (concat (all-the-icons-material "build") " Sub tools")
                          :quit-key "q"
                          :exit t)
              ("Describe"
               (("b" counsel-descbinds "Keybind")
                ("f" counsel-describe-function "Function")
                ("v" counsel-describe-variable "Variable")
                ("m" describe-minor-mode "Minor mode"))

               ;; ("P"   my/open-review-requested-pr "Open Requested PR")
               "Other"
               (("@" all-the-icons-hydra/body "List icons")
                ("D" my/download-from-beorg))))
     #+end_src

     | Key | 効果                                               |
     | b   | キーバインドを調べる                               |
     | f   | Emacs Lisp の関数を調べる                          |
     | v   | Emacs Lisp の変数を調べる                          |
     | m   | minor-mode を調べる                                |
     | @   | All the icons の Hydra を起動                      |
     | D   | beorg 連携に使ってる WebDAV サーバからダウンロード |

**** Text Scale
     文字サイズの切替用。たまに字を大きくしたりしたいので。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (pretty-hydra-define text-scale-hydra (:separator "-" :title (concat (all-the-icons-material "text_fields") " Text Scale") :exit nil :quit-key "q")
       ("Scale"
        (("+" text-scale-increase "Increase")
         ("-" text-scale-decrease "Decrease")
         ("0" text-scale-adjust   "Adjust"))))
     #+end_src

     | Key | 効果                   |
     | +   | 文字サイズを大きくする |
     | -   | 文字サイズを小さくする |
     | 0   | 文字サイズを元に戻す   |

**** Main
     よく使うコマンドをまとめたやつ。
     [[*key-chord][key-chord]] を使って ~jk~ 同時押しで起動できるようにしている。

     #+begin_src emacs-lisp :tangle inits/81-hydra.el
     (pretty-hydra-define pretty-hydra-usefull-commands (:separator "-" :color teal :foreign-key warn :title (concat (all-the-icons-material "build") " Usefull commands") :quit-key "q")
       ("File"
        (("p" projectile-hydra/body "Projectile")
         ("f" counsel-find-file     "Find File")
         ("d" counsel-find-dir      "Find Dir")
         ("r" counsel-recentf       "Recentf")
         ("l" counsel-locate        "Locate")
         ("A" counsel-osx-app       "macOS App"))

        "Edit"
        (("a" align-regexp "Align Regexp")
         (";" comment-dwim "Comment"))

        "Code"
        (("G" counsel-projectile-ag       "Grep")
         ("j" dumb-jump-pretty-hydra/body "Dumb jump")
         ("g" avy-hydra/body              "Avy")
         ("i" counsel-imenu               "imenu")
         ("y" yasnippet-hydra/body        "Yasnippet")
         ("B" browse-at-remote            "Browse")
         ("m" magit-status                "Magit"))

        "View"
        (("D" delete-other-windows      "Only This Win")
         ("W" window-control-hydra/body "Window Control")
         ("+" text-scale-hydra/body     "Text Scale")
         ("w" ace-swap-window           "Swap Window"))

        "Tool"
        (("SPC" major-mode-hydra         "Hydra(Major)")
         ("s"   toggle-hydra/body        "Toggle switches")
         ("c"   counsel-org-capture      "Capture")
         ("o"   global-org-hydra/body    "Org")
         ("e"   el-get-hydra/body        "el-get")
         ("/"   google-pretty-hydra/body "Google")
         ("t"   subtools-hydra/body      "Sub Tools"))))
     #+end_src

     | Key | 効果                                                                      |
     | p   | [[*projectile][Projectile]] 用の Hydra 起動                                                |
     | f   | counsel でファイルを開く                                                  |
     | d   | counsel でフォルダ開く                                                    |
     | r   | counsel で最近使ったファイルを開く                                        |
     | l   | counsel で locate する。Mac だと mdfind だけど                            |
     | A   | counsel で macOS の Application を開く                                    |
     | a   | 正規表現に基いて整形                                                      |
     | ;   | コメント挿入。 M-; を使ってるから要らないかも                             |
     | G   | projectile 内の検索。関係ないのがかかる時もあるので調整必要               |
     | j   | [[*dumb-jump][dumb-jump]] 用の Hydra 起動                                                 |
     | g   | 画面上の好きな位置にジャンプする [[*avy][avy]] の起動                               |
     | i   | counsel-imenu 起動。使ってない気がする                                    |
     | y   | [[*yasnippet][yasnippet]] 用の Hydra 起動                                                 |
     | B   | [[*browse-at-remote][browse-at-remote]] で GitHub などのコード位置を開く                         |
     | m   | [[*magit][magit]] を起動                                                              |
     | D   | 他の Window を消す                                                        |
     | W   | フレームサイズや位置を弄るための Hydra を起動。ほぼ使ってない             |
     | +   | [[*Text Scale][文字サイズ変更用 Hydra]] の起動                                             |
     | w   | Window の入替                                                             |
     | SPC | [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]] の起動                                                   |
     | s   | [[*Toggle Switches][ON/OFF 切替系の Hydra]] を起動する                                          |
     | c   | counsel-org-capture を呼び出す                                            |
     | o   | org-mode 用の Hydra を起動する                                            |
     | e   | el-get 用の Hydra を起動する                                              |
     | /   | [[*Google 連携][Google 連携用 Hydra]] を起動する                                            |
     | t   | [[*Sub Tools][第一階層には入れてないけどまあまあ便利なコマンドを詰めた Hydra]] を起動する |

** ido-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: ido-mode
   :END:
*** 概要
    Emacs に標準添付の補完インターフェース。
    ivy 使ってるからこれ有効化している意味がない気はする。

    拡張入れてない段階でもこいつを有効にしていると
    find-file とかが楽になって良い。

*** 有効化
    とりあえず昔からずっと有効化している

    #+begin_src emacs-lisp :tangle inits/50-ido.el
    (ido-mode 1)
    #+end_src
*** 設定
    ファイル名の補完とかを曖昧一致を有効にするっぽいい。

    #+begin_src emacs-lisp :tangle inits/50-ido.el
    (setq ido-enable-flex-matching t)
    #+end_src
*** その他
    https://qiita.com/tadsan/items/33ebb8db2271897a462b に書いていることだけど

    - ido-everywhere を有効にするとファイル名とバッファ切替以外にも使えるようになるらしい
    - smex 入れると M-x が強化される
    - ido-ubiquitous を入れると ido-everywhere よりもさらに色々な他に使えるらしい
    - ido-vertical-mode を入れたら候補が縦並びになって便利っぽい
** ivy
   :PROPERTIES:
   :EXPORT_FILE_NAME: ivy
   :END:
*** 概要
*** インストール
    el-get を使って GitHub のリポジトリから直で入れている。


    #+begin_src emacs-lisp :tangle inits/82-ivy.el
    (el-get-bundle abo-abo/swiper) ;; ivy, swiper, counsel が同時に入って来る
    #+end_src

    MELPA 経由だと org-mode 関係のパッケージ周りでハマったことがあるので
    GitHub から直で入れる運用にしている。

    が、やっぱり MELPA とかに寄せるべきかなって気になってきているところだったりもする。
*** なんか設定
    便利に使えるようにするための設定を書いている。
    が、何を設定しているのかよく覚えてないので今度調べておこう……
    #+begin_src emacs-lisp :tangle inits/82-ivy.el
    (when (require 'ivy nil t)
      ;; M-o を ivy-dispatching-done-hydra に割り当てる．
      (require 'ivy-hydra)

      ;; `ivy-switch-buffer' (C-x b) のリストに recent files と bookmark を含める．
      (setq ivy-use-virtual-buffers t)

      ;; ミニバッファでコマンド発行を認める
      (when (setq enable-recursive-minibuffers t)
        (minibuffer-depth-indicate-mode 1)) ;; 何回層入ったかプロンプトに表示．

      ;; ESC連打でミニバッファを閉じる
      (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)

      ;; (index/総数) 表示で何番目の候補かわかりやすくする
      (setq ivy-count-format "(%d/%d) ")

      ;; アクティベート
      (ivy-mode 1))
    #+end_src
*** counsel の有効化
    counsel は ivy で提供されているやつで、
    既存の Emacs のコマンドを置き換えてくれるやつ。

    とても便利なので当然有効にしている。

    #+begin_src emacs-lisp :tangle inits/82-ivy.el
    (counsel-mode 1)
    #+end_src
*** ivy-posframe
    ivy-posframe は ivy を posframe で表示してくれるようにするやつ。
    posframe 表示だと Emacs の中央に表示できるので
    視線移動が少なく済んで便利。

    #+begin_src emacs-lisp :tangle inits/82-ivy.el
    (el-get-bundle ivy-posframe)
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (ivy-posframe-mode 1)
    #+end_src
*** ivy-rich
    ivy-rich は ivy の見た目をよりモダンにしてくれるやつ。
    なんだけど、オフにした時の表示どんな感じだったか忘れたな……。

**** インストール
     #+begin_src emacs-lisp :tangle inits/82-ivy.el
     (el-get-bundle ivy-rich)
     #+end_src

**** アイコン設定
     いい感じにアイコンが表示されるように
     https://ladicle.com/post/config/#ivy に書かれている関数を丸コピしてきた

     #+begin_src emacs-lisp :tangle inits/82-ivy.el
     (defun ivy-rich-file-icon (candidate)
       "Display file icons in `ivy-rich'."
       (when (display-graphic-p)
         (let ((icon (if (file-directory-p candidate)
                         (cond
                          ((and (fboundp 'tramp-tramp-file-p)
                                (tramp-tramp-file-p default-directory))
                           (all-the-icons-octicon "file-directory"))
                          ((file-symlink-p candidate)
                           (all-the-icons-octicon "file-symlink-directory"))
                          ((all-the-icons-dir-is-submodule candidate)
                           (all-the-icons-octicon "file-submodule"))
                          ((file-exists-p (format "%s/.git" candidate))
                           (all-the-icons-octicon "repo"))
                          (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                               (apply (car matcher) (list (cadr matcher))))))
                       (all-the-icons-icon-for-file candidate))))
           (unless (symbolp icon)
             (propertize icon
                         'face `(
                                 :height 1.1
                                 :family ,(all-the-icons-icon-family icon)
                                 ))))))
     #+end_src

**** switch-buffer でのアイコン表示
     公式に書かれてるように設定することで
     バッファを切り替える時もアイコンが表示されるようにしている。
     https://github.com/Yevgnen/ivy-rich#how-i-can-add-icons-for-ivy-switch-buffer

     #+begin_src emacs-lisp :tangle inits/82-ivy.el
     (defun ivy-rich-switch-buffer-icon (candidate)
       (with-current-buffer
           (get-buffer candidate)
         (let ((icon (all-the-icons-icon-for-mode major-mode)))
           (if (symbolp icon)
               (all-the-icons-icon-for-mode 'fundamental-mode)
             icon))))
     #+end_src

**** yank-pop の区切り設定
     yank-pop の区切りをちょっと長めにしている。
     長い方が区切りだってわかりやすいので。
     #+begin_src emacs-lisp :tangle inits/82-ivy.el
     (setq counsel-yank-pop-separator "\n--------------------\n")
     #+end_src

**** ivy-rich の表示設定
     それぞれのカラムがどのぐらいの幅、みたいな設定を
     コマンド毎に設定できるようになっている。

     #+begin_src emacs-lisp :tangle inits/82-ivy.el
     (setq ivy-rich-display-transformers-list
           '(ivy-switch-buffer
             (:columns
              ((ivy-rich-switch-buffer-icon :width 2)
               (ivy-rich-candidate (:width 30))
               (ivy-rich-switch-buffer-size (:width 7))
               (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
               (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
               (ivy-rich-switch-buffer-project (:width 15 :face success))
               (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
              :predicate
              (lambda (cand) (get-buffer cand)))
             counsel-M-x
             (:columns
              ((counsel-M-x-transformer (:width 40))  ; thr original transformer
               (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
             counsel-find-file
             (:columns
              ((ivy-rich-file-icon)
               (ivy-rich-candidate)))
             counsel-recentf
             (:columns
              ((ivy-rich-file-icon)
               (ivy-rich-candidate (:width 110))))
             ))
     #+end_src
***** switch-buffer

      以下のような構成になっている。

      |----------------+------+----------------------------------------------------------|
      | 列名           |   幅 | 内容                                                     |
      |----------------+------+----------------------------------------------------------|
      | アイコン       |    2 | all-the-icons のアイコン表示幅の設定                     |
      | 候補名         |   30 | 選択候補名。バッファ名が表示される。                     |
      | バッファサイズ |    7 | 容量を示す。120.3k みたいな表示になる                    |
      | インジケータ   |    4 | 保存されてるかなどの表示。正直マーク何が何かわかってない |
      | メジャーモード |   12 | そのバッファのメジャーモード。Org とか表示されたりする   |
      | プロジェクト名 |   15 | プロジェクト名の表示。.git があるフォルダ名が大体出てる  |
      | ファイルパス   | 可変 | プロジェクト内でのファイル位置の表示                     |
      |----------------+------+----------------------------------------------------------|

      正直ファイル名以外あんまり気にしたことがない……。

***** M-x

      コマンド選択時のやつは以下の構成になっている。

      |------------+----------+-------------------------------------------------------|
      | 列名       | 幅       | 内容                                                  |
      |------------+----------+-------------------------------------------------------|
      | コマンド名 | 40       | 候補となるコマンド名の表示                            |
      | 概要       | 制限なし | コマンドの概要。docstring の1行目が表示されてるっぽい |
      |------------+----------+-------------------------------------------------------|

***** find-file
      |------------+--------+--------------------------------------------------------|
      | 列名       | 幅     | 内容                                                   |
      |------------+--------+--------------------------------------------------------|
      | アイコン   | 未設定 | all-the-icons のアイコン表示                           |
      | ファイル名 | 未設定 | カレントディレクトリ内のファイルが候補として表示される |
      |------------+--------+--------------------------------------------------------|

***** recentf
      |------------+--------+--------------------------------------------|
      | 列名       | 幅     | 内容                                       |
      |------------+--------+--------------------------------------------|
      | アイコン   | 未設定 | all-the-icons のアイコン表示               |
      | ファイル名 | 110    | 最近使われたファイルが候補として表示される |
      |------------+--------+--------------------------------------------|

      もうちょっと追加で情報表示できると便利かも。

**** ivy-rich-mode の有効化
     #+begin_src emacs-lisp :tangle inits/82-ivy.el
     (ivy-rich-mode 1)
     #+end_src

**** C-s で migemo れるようにする関数設定
     swiper は標準だと migemo れないのだが

     https://www.yewton.net/2020/05/21/migemo-ivy/

     でそれをできるようにしている記事があったので、
     それを元に入れている関数を追加して使えるようにしている。
     関数名などは書き換えてる

     #+begin_src emacs-lisp :tangle inits/82-ivy.el
     (defun my/ivy-migemo-re-builder (str)
       (let* ((sep " \\|\\^\\|\\.\\|\\*")
              (splitted (--map (s-join "" it)
                               (--partition-by (s-matches-p " \\|\\^\\|\\.\\|\\*" it)
                                               (s-split "" str t)))))
         (s-join "" (--map (cond ((s-equals? it " ") ".*?")
                                 ((s-matches? sep it) it)
                                 (t (migemo-get-pattern it)))
                           splitted))))

     (setq ivy-re-builders-alist '((t . ivy--regex-plus)
                                   (swiper . my/ivy-migemo-re-builder)))
     #+end_src

     なんだけど
     https://github.com/ROCKTAKEY/ivy-migemo
     に乗り換えた方がいいのかな〜とも思っている。
     検証していきたい。

*** counsel-osx-app.                                            :improvement:
    Mac で Emacs を使ってる時に ivy でアプリケーションを起動するためのパッケージ。

    #+begin_src emacs-lisp :tangle inits/83-counsel-osx-app.el
    (el-get-bundle counsel-osx-app)
    #+end_src

    Mac を使ってる時は Emacs がランチャー代わりになるので便利。

    WSL 使ってる時に同じようなことをしてみたいんだけどどうしたらいいんだろう。
    まあできなくてもいいんだけど、
    このパッケージは Mac でだけ読むようにしたら良いよねって感じではある。

*** prescient.el
    [[https://github.com/raxod502/prescient.el][prescient.el]] は強力なソート・フィルタ機能を提供してくれるパッケージ。
    ivy などの絞り込み系ツールと組み合わせて使う。

    とりあえずいつも通り el-get でインストールしている。
    #+begin_src emacs-lisp :tangle inits/83-prescient.el
    (el-get-bundle prescient.el)
    #+end_src

    レシピは自前で追加している

    #+begin_src emacs-lisp :tangle recipes/prescient.el.rcp
      (:name raxod502/prescient.el
             :website "https://github.com/raxod502/prescient.el"
             :description "simple but effective sorting and filtering for Emacs."
             :type github
             :pkgname "raxod502/prescient.el")
    #+end_src

    そんで ivy でそれが使われるように ivy-prescient-mode を有効にしている。
    #+begin_src emacs-lisp :tangle inits/83-prescient.el
    (ivy-prescient-mode 1)
    #+end_src

    ただ候補文字列の長さで sort されるのはどうも微妙さを感じるので無効にしている。
    #+begin_src emacs-lisp :tangle inits/83-prescient.el
    (setq prescient-sort-length-enable nil)
    #+end_src

    どうやら company-mode でも使えるらしいので
    設定は別のところに分離した方がいいかもしれない。

** mode-line
   :PROPERTIES:
   :EXPORT_FILE_NAME: mode-line
   :END:
*** 概要
    Emacs のバッファ下部に表示されるモードライン関連の設定をここにまとめている。
    このメニューの並びとかはどこかで直した方が良さそう。

*** hide-mode-line
    [[https://github.com/hlissner/emacs-hide-mode-line][hide-mode-line]] は mode-line を隠してくれるパッケージ。
    ここでは neotree-mode-hook で引っ掛けて Neotree では mode-line を隠すように設定している

    #+begin_src emacs-lisp :tangle inits/90-mode-line.el
    (el-get-bundle hlissner/emacs-hide-mode-line)
    (add-hook 'neotree-mode-hook #'hide-mode-line-mode)
    #+end_src

    他にも mode-line の表示が不要なモードとかってありそうだけど
    特に思い付かないから今のところ Neotree 専用になっている。

*** 日時を mode-line で表示する
    mode-line に日時も表示されてる方が便利な気がしてとりあえず表示している。

    #+begin_src emacs-lisp :tangle inits/90-mode-line.el
    (display-time-mode 1)
    #+end_src

*** smart-mode-line 関連の設定                                       :unused:
    [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] は mode-line をセクシーな感じにしてくれるパッケージ。
    というわけで昔入れていたけどもう使ってない。
    一応コードの残骸があったから一旦残しておく。

    多分アイコン表示周りをゴリゴリ設定するのがだるくなって doom-modeline に乗り換えたんだと思う。

    #+begin_src emacs-lisp
    ;; (el-get-bundle smart-mode-line)
    ;; (defvar sml/no-confirm-load-theme t)
    ;; (defvar sml/theme 'dark)
    ;; (sml/setup)

    ;; major-mode
    ;; (add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name (all-the-icons-fileicon "elisp"))))
    ;; (add-hook 'enh-ruby-mode-hook (lambda () (setq mode-name (concat "e" (all-the-icons-alltheicon "ruby-alt")))))
    ;; (add-hook 'ruby-mode-hook (lambda () (setq mode-name (all-the-icons-alltheicon "ruby-alt"))))
    ;; (add-hook 'vue-mode-hook (lambda ()
    ;;                            (make-local-variable 'mmm-submode-mode-line-format)
    ;;                            (setq mmm-submode-mode-line-format "~M:~m")
    ;;                            (make-local-variable 'mmm-buffer-mode-display-name)
    ;;                            (setq mmm-buffer-mode-display-name "V")))
    ;; (add-hook 'js-mode-hook (lambda () (setq mode-name "")))
    ;; (add-hook 'pug-mode-hook (lambda () (setq mode-name (all-the-icons-fileicon "pug"))))
    ;; (add-hook 'css-mode-hook (lambda () (setq mode-name (all-the-icons-faicon "css3"))))
    ;; (add-hook 'twittering-mode-hook (lambda () (setq mode-name (all-the-icons-faicon "twitter-square"))))
    ;; (add-hook 'org-mode-hook (lambda () (setq mode-name (all-the-icons-fileicon "org"))))
    #+end_src

*** diminish
    [[https://github.com/emacsmirror/diminish][diminish]] は minor-mode の表示をカスタマイズするためのモード。

    これも昔使ってたけど今は使ってない。
    というか最近はマイナーモードを mode-line で表示してない。
    表示しなくなったから要らなくなった感じ。

**** インストール・有効化
     el-get-bundle で入れて require したら有効になる
     #+begin_src emacs-lisp :tangle inits/90-mode-line.el
     (el-get-bundle diminish)
     (require 'diminish)
     #+end_src

**** マクロ定義
     各パッケージが読まれた後に
     指定した表示が設定されるようにするマクロを書いている。

     #+begin_src emacs-lisp :tangle inits/90-mode-line.el
     (defmacro my/diminish (file mode &optional new-name)
       "https://github.com/larstvei/dot-emacs/blob/master/init.org"
       `(with-eval-after-load ,file
          (diminish ,mode ,new-name)))
     #+end_src

     https://github.com/larstvei/dot-emacs/blob/master/init.org
     に書かれているのを流用しただけであるはずだが、
     リンク先にその記述が見当たらないな……。

**** マイナーモード毎の表示指定
     上で用意したマクロを用いて各マイナーモード毎の設定を行っていた。
     今は使ってないので全部コメントアウトしている

     #+begin_src emacs-lisp :tangle inits/90-mode-line.el
     ;; (my/diminish "git-gutter" 'git-gutter-mode (all-the-icons-octicon "git-compare"))
     ;; (my/diminish "yasnippet" 'yas-minor-mode " Ys")
     ;; (my/diminish "whitespace" 'whitespace-mode "◽")
     ;; (my/diminish "whitespace" 'global-whitespace-mode "◽")
     ;; (my/diminish "tempbuf" 'tempbuf-mode "")
     ;; (my/diminish "flycheck" 'flycheck-mode "")
     ;; (my/diminish "zoom" 'zoom-mode "")
     ;; (my/diminish "rainbow" 'rainbow-mode "🌈")
     ;; (my/diminish "projectile-rails" 'projectile-rails-mode "🛤")
     ;; (my/diminish "company" 'company-mode "")
     ;; (my/diminish "ElDoc" 'eldoc-mode "")
     #+end_src

     結構頑張ったけど絵文字周りで思うような表示にならなかったりして
     最終的にはマイナーモードを mode-line に表示しないようになっている。

     使ってる minor-mode どうやって把握したりしたらいいんだろうね。
     ま、表示されなくてもなんとなくで把握しているから、困ってはいないんだけど。

*** doom-modeline
    [[https://github.com/seagle0128/doom-modeline][doom-modeline]] は Emacs の mode-line を装飾するパッケージの1つ。
    結構スッキリした見た目になるので気に入ってる。

**** インストール
     いつも通り el-get で入れてるだけ
     #+begin_src emacs-lisp :tangle inits/91-doom-modeline.el
     (el-get-bundle doom-modeline)
     #+end_src

**** 有効化
     #+begin_src emacs-lisp :tangle inits/91-doom-modeline.el
     (doom-modeline-mode 1)
     #+end_src

**** VCS 用表示の長さ変更
     デフォルトだと 12 なんだけど
     それだと短かくて何のブランチかよくわからんので
     30 まえのばしている。

     #+begin_src emacs-lisp :tangle inits/91-doom-modeline.el
     (setq doom-modeline-vcs-max-length 30)
     #+end_src

**** バッテリー残量表示
     これは doom-modeline 専用の設定ではないけど
     doom-modeline で見た目をカッコよくしているのでこっちに設定を書いている。

     #+begin_src emacs-lisp :tangle inits/91-doom-modeline.el
     (display-battery-mode 1)
     #+end_src

**** その他
     ~doom-modeline-github~ を t にしたら GitHub の通知数も表示されるらしいが
     ちょっと試しに t にしているけどどうも表示されない。

     あとはメジャーモード名はアイコンの方があるから消したいな。
     ~doom-modeline-def-modeline~ で自分用に作れば良さそうな雰囲気はある

*** その他
    多分 mode-line 周りはもうちょっと整理した方が設定は読み易いんだろうなという気がしている

** Neotree                                                      :replacement:
   :PROPERTIES:
   :EXPORT_FILE_NAME: neotree
   :END:

*** 概要
    [[https://github.com/jaypei/emacs-neotree][Neotree]] は Emacs でフォルダのツリー表示ができるやつ。
    メンテは活発じゃないようなので、その内乗り換えたい。

*** レシピ

    Neotree でメンテされているのは dev ブランチだけど
    el-get の公式のレシピでは master ブランチを見ているので
    自前で recipe を用意してそれを使っている。

    #+begin_src emacs-lisp :tangle recipes/emacs-neotree-dev.rcp
    (:name emacs-neotree-dev
           :website "https://github.com/jaypei/emacs-neotree"
           :description "An Emacs tree plugin like NerdTree for Vim."
           :type github
           :branch "dev"
           :pkgname "jaypei/emacs-neotree")
    #+end_src

*** インストール

    上に書いたレシピを使ってインストールしている。

    #+begin_src emacs-lisp :tangle inits/40-neotree.el
    (el-get-bundle emacs-neotree-dev)
    #+end_src

*** 使わなくなったコード

    元々設定していたが、
    counsel-projectile を使ってると
    projectile-switch-project-action を設定していても反映されず
    意味がないのに気付いたので使わなくなった

    https://github.com/mugijiru/.emacs.d/pull/183/files#r541843206

    #+begin_src emacs-lisp
    (setq projectile-switch-project-action 'neotree-projectile-action)
    #+end_src

*** テーマの設定

    GUI で起動している時はアイコン表示し
    そうでない場合は ▾ とかで表示する

    #+begin_src emacs-lisp :tangle inits/40-neotree.el
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    #+end_src

    のだけど、
    実際に今使ってるやつだともっとグラフィカルな表示なので
    all-the-icons の設定で上書きしている気がするので要確認

*** major-mode-hydra

    いちいちキーバインドを覚えてられないので
    [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]] を使って主要なキーバインドは [[https://github.com/abo-abo/hydra][hydra]] で使えるようにしている。

    とはいえ、この文書を書く前日ぐらいに設定しているのでまだ使い慣れてないというか、ほとんど使えてない。

    #+begin_src emacs-lisp :tangle inits/40-neotree.el
    (with-eval-after-load 'major-mode-hydra
      (major-mode-hydra-define neotree-mode (:separator "-" :quit-key "q" :title (concat (all-the-icons-octicon "list-unordered") " Neotree"))
        ("Nav"
         (("u"   neotree-select-up-node   "Up")
          ("g"   neotree-refresh          "Refresh")
          ("Q"   neotree-hide             "Hide"))

         "File"
         (("a"   neo-open-file-ace-window "Ace")
          ("N"   neotree-create-node      "Create")
          ("R"   neotree-rename-node      "Rename")
          ("C"   neotree-copy-node        "Copy")
          ("D"   neotree-delete-node      "Delete")
          ("SPC" neotree-quick-look       "Look")
          ;; ("d" neo-open-dired "Dired")
          ;; ("O" neo-open-dir-recursive   "Recursive")
          )
         "Toggle"
         (("z" neotree-stretch-toggle     "Size"        :toggle (not (neo-window--minimize-p)))
          ("h" neotree-hidden-file-toggle "Hidden file" :toggle neo-buffer--show-hidden-file-p)))))
    #+end_src

**** キーバインド
***** ナビゲーション
      |-----+------------------|
      | Key | 効果             |
      |-----+------------------|
      | u   | 上のノードに移動 |
      | g   | 再描画           |
      | Q   | Neotree を隠す   |
      |-----+------------------|

***** ファイル操作

      |-----+--------------------------------------------------------------|
      | Key | 効果                                                         |
      |-----+--------------------------------------------------------------|
      | a   | ファイルを開く。その際に ace-window で開く window を指定する |
      | N   | 新しいノードを作る                                           |
      | R   | ノードの名前を変える                                         |
      | C   | ノードのコピー                                               |
      | D   | ノードの削除                                                 |
      | SPC | クイックルック                                               |
      |-----+--------------------------------------------------------------|

***** Toggle

      |-----+--------------------------------------------|
      | Key | 効果                                       |
      |-----+--------------------------------------------|
      | z   | Neotree のサイズを大きくしたり小さくしたり |
      | h   | 隠しファイルを表示したり隠したり           |
      |-----+--------------------------------------------|
** posframe
   :PROPERTIES:
   :EXPORT_FILE_NAME: posframe
   :END:
*** 概要

    [[https://github.com/tumashu/posframe][posframe]] は child frame を表示させるためのパッケージ。
    Emacs のど真ん中に表示したり、
    今あるカーソル位置のすぐそばに出したりできる。

    ivy なんかを使う時に [[https://github.com/tumashu/ivy-posframe][ivy-posframe]] ど真ん中に出すと、
    いつもそこに表示されるし真ん中なの視線移動が少なくて済むし
    [[https://github.com/conao3/ddskk-posframe.el][ddskk-posframe]] なんかで変換候補をカーソル位置のそばに出て来るので
    一般的な日本語変換ソフトと同様にこれまた視線移動が少なくて便利。

    という感じで色々なものの拡張として使わているやつ。

*** インストール

    いつも通り el-get で入れているだけ。

    #+begin_src emacs-lisp :tangle inits/20-posframe.el
    (el-get-bundle posframe)
    #+end_src

    こいつ自体には特に設定を入れてない。
    というか設定項目自体2個しか存在していない。

    ま、こいつ単体で使うものでもないしね。

** show-paren-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: show-paren-mode
   :END:

*** 概要
    [[https://www.emacswiki.org/emacs/ShowParenMode][show-paren-mode]] は Emacs に標準で入っているやつで
    開き括弧と閉じ括弧の対応を示してくれたり
    括弧の中身を強調表示したりする機能を提供してくれるやつ。

*** 有効化
    デフォで入ってるので以下のようにするだけで有効化される。

    #+begin_src emacs-lisp :tangle inits/30-show-paren.el
    (show-paren-mode 1)
    #+end_src

    デフォ設定だと対応する括弧を強調表示するだけだけど
    まあそれで悪くないと思ってるので今のところデフォルト設定のままである。

*** その他
    http://syohex.hatenablog.com/entry/20110331/1301584188

    の記事へのリンクを設定ファイルの中に残していたけど
    設定は特に弄ってないので
    またその記事読んだりで設定弄ってみてもいいかもしれない。

    また smartparens.el にも似た機能はあるようだけど
    Emacs 標準機能の方が軽そうなのでとりあえずこのままにするつもり。

** toolbar
   :PROPERTIES:
   :EXPORT_FILE_NAME: toolbar
   :END:

*** 概要

    Emacs 標準の toolbar の設定。
    麦汁さんは使わないし幅を取るので隠す派。

*** 設定

    単に無効にして隠している

    #+begin_src emacs-lisp :tangle inits/90-toolbar.el
    (tool-bar-mode -1)
    #+end_src

** uniquify
   :PROPERTIES:
   :EXPORT_FILE_NAME: uniquify
   :END:

*** 概要
    同じ名前のファイルを開いている時に
    祖先のディレクトリ名を表示してくれてどこのファイルかわかりやすくしてくれるやつ。

    すぐ親とかも同名でも、名前が違うところまで遡って表示してくれる。

*** 有効化
    Emacs に標準で入ってるので require するだけで有効にできる

    #+begin_src emacs-lisp :tangle inits/20-uniquify.el
    (require 'uniquify)
    #+end_src

*** 設定

    自分は ~ファイル名<フォルダ名>~ みたいな表示になる形式にしている。
    その方がファイル名が主という感じになって使いやすそうだなって。

    そういう意味では ~post-foward~ の方が幅を使わない分良いかもしれない。
    いつか検討しても良いかもしれない。

    #+begin_src emacs-lisp :tangle inits/20-uniquify.el
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    #+end_src
** yascroll
   :PROPERTIES:
   :EXPORT_FILE_NAME: yascroll
   :END:
*** 概要
    [[https://github.com/emacsorphanage/yascroll][yascroll]] は標準のスクロールバーとは異なるスクロールバーを表示するやつ。

    デフォルトだと右側の fringe 領域に表示するのであまり邪魔にならないし
    表示領域を必要以上に狭めないので気に入っている。

    最初に作られたっぽい記事は
    [[https://m2ym.hatenadiary.org/entry/20110401/1301617991][主張しないスクロールバーモード、yascroll.elをリリースしました - Functional Emacser]]
    にある。
    タイトル通り、あまり主張しない感じで良い。

*** インストール
    いつも通り el-get でインストールしている

    #+begin_src emacs-lisp :tangle inits/70-yascroll.el
    (el-get-bundle yascroll)
    #+end_src

    これだけで大体いい感じに表示されるので便利。
    たまに表示されなくなることもあるが、まあそこまで重要なやつでもないのであまり気にしていない
** zoom
   :PROPERTIES:
   :EXPORT_FILE_NAME: zoom
   :END:

*** 概要

    [[https://github.com/cyrus-and/zoom][zoom]] はフォーカスが当たっている Window が大きく表示されるようにするやつ。
    最近流行りのビデオチャットツールではない。

    どこにフォーカスが当たっているかわかりやすくなるし、
    狭い画面でも見たい部分を広げて表示できるので便利。

*** インストール

    いつも通り el-get から入れる。
    GitHub から直接取得するように設定している。

    #+begin_src emacs-lisp :tangle inits/90-zoom.el
    (el-get-bundle cyrus-and/zoom)
    #+end_src

*** 設定

    - 起動時に有効化 :: 1画面しか使えない時は必須なので
    - 比率を黄金比に変更 :: この方が使いやすいっぽい。

    という設定をしている。

    #+begin_src emacs-lisp :tangle inits/90-zoom.el
    (custom-set-variables
     '(zoom-mode t)
     '(zoom-size '(0.618 . 0.618)))
    #+end_src

** zoom-window
   :PROPERTIES:
   :EXPORT_FILE_NAME: zoom-window
   :END:

*** 概要
    [[https://github.com/emacsorphanage/zoom-window][zoom-window]] は tmux の prefix z のような動きをするやつ。
    表示している window をフレーム全体に広げたり戻したりすることができる。

*** インストール
    いつも通り el-get から入れている

    #+begin_src emacs-lisp :tangle inits/70-zoom-window.el
    (el-get-bundle zoom-window)
    #+end_src
*** その他                                                      :improvement:

    キーバインドは 80-global-keybinds に書いたけど
    ~C-x 1~ に割り当てている。

    ただそれだと tmux と使い勝手が違うなって感じているので
    そのうち hydra の中の z にでもアサインしようかと思う。

    あと、その window を最大化して戻すことよりも
    単に他の window が邪魔なことの方が多い気もしている。。。

* ナビゲーション
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: nav
  :END:
** ナビゲーション
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>6. </b>" :weight 6 :disableToc true
   :EXPORT_FILE_NAME: _index
   :END:

   ここではカーソル移動やファイル移動などのナビゲーション系の設定を記載していく

   - [[*ace-window][ace-window]] :: 3つ以上にウインドウを分割している際のウインドウ切替を楽にしてくれるパッケージ
   - [[*avy][avy]] :: 表示されてるところの好きな場所にさくっとジャンプするためのパッケージ
   - [[*browse-at-remote][browse-at-remote]] :: 表示している行の GitHub などのサービス上の位置でブラウザで開いてくれるパッケージ
   - [[*dumb-jump][dumb-jump]] :: カーソル下の関数とかの定義場所にジャンプしてくれるパッケージ
   - [[*projectile][projectile]] :: プロジェクト内のファイルなどを開いたりするのに便利なパッケージ

** ace-window
   :PROPERTIES:
   :EXPORT_FILE_NAME: ace-window
   :END:

*** 概要

    Window 間の移動を ace-jump や avy のように
    表示されてる文字の Window に移動するやつ。

    Window が2分割の時は文字も出ないで別の Window に移動してくれる。

    ~C-x o~ にデフォルトで設定されている ~other-window~ は別の window に順番に移動するコマンドなので
    大量に分割していると移動がしんどいのだが
    ace-window を使うと起動して 1 ストロークで移動できるので
    ~C-x o~ をデフォルトの ~other-window~ から ~ace-window~ そのまま置き換えても便利に使える。

*** インストール

    いつも通り el-get でインストールしている。

    #+begin_src emacs-lisp :tangle inits/20-ace-window.el
    (el-get-bundle ace-window)
    #+end_src

*** 設定

    キーバインドは別の箇所で定義しているが
    ~C-x o~ で ace-window が起動するようにしている。

    また Hydra からは ace-swap-window が起動できるようにしている。

    ace-window には色々な機能があるから
    それ用の Hydra を別途定義してもいいかもしれない。

** avy
   :PROPERTIES:
   :EXPORT_FILE_NAME: avy
   :END:

*** 概要
    [[https://github.com/abo-abo/avy][avy]] は好きな文字とか単語など、表示されてる場所にさくっとジャンプするためのパッケージ。
    Vimium の f とかに似てる。

*** インストール

    el-get で普通にインストールしている

    #+begin_src emacs-lisp :tangle inits/50-avy.el
    (el-get-bundle avy)
    #+end_src

*** 設定

    文字の上に重なると元の文字列がよくわからなくなるので、
    移動先の文字の前に表示するようにしている

    #+begin_src emacs-lisp :tangle inits/50-avy.el
    (setq avy-style 'pre)
    #+end_src
*** キーバインド

    グローバルなキーバインドを汚染したくなかったので
    ひとまず Hydra を定義している。

    #+begin_src emacs-lisp :tangle inits/50-avy.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define avy-hydra
        (:separator "-" :title "avy" :foreign-key warn :quit-key "q" :exit t)
        ("Char"
         (("c" avy-goto-char       "Char")
          ("C" avy-goto-char-2     "Char 2")
          ("x" avy-goto-char-timer "Char Timer"))

         "Word"
         (("w" avy-goto-word-1 "Word")
          ("W" avy-goto-word-0 "Word 0"))

         "Line"
         (("l" avy-goto-line "Line"))

         "Other"
         (("r" avy-resume "Resume")))))
    #+end_src


    |-----+-------------------------------|
    | Key | 効果                          |
    |-----+-------------------------------|
    | c   | 1文字からの絞り込み           |
    | C   | 2文字から絞り込み             |
    | x   | 任意の文字列からの絞り込み    |
    | w   | 1文字絞り込んで単語先頭に移動 |
    | W   | 絞り込みなしの単語移動        |
    | l   | 列移動                        |
    | r   | 繰り返し同じコマンドを実行    |
    |-----+-------------------------------|

** browse-at-remote
   :PROPERTIES:
   :EXPORT_FILE_NAME: browse-at-remote
   :END:

*** 概要
    [[https://github.com/rmuslimov/browse-at-remote][browse-at-remote]] は Emacs で見ているファイルについて
    GitHub や GitLab などのサービス上での該当ブランチ、該当ファイル、該当行を開いてくれる便利なやつ。

    業務だとレビュー中に「ここにこういう関数あるよ」みたいに示すことがあるけど
    その時に Emacs 内で関数を探して browse-at-remote で GitHub 上の位置を開くことで
    そこへのリンクを拾いやすく便利。

*** インストール

    いつも透り el-get で入れている。

    #+begin_src emacs-lisp :tangle inits/50-browse-at-remote.el
    (el-get-bundle browse-at-remote)
    #+end_src

*** 使い方

    ブラウザで見たい行の上で ~M-x browse-at-remote~ を実行する。

    または Region を選択している状態で実行すると、
    その範囲を選択している状態で開いてくれる。便利。

*** その他

    Hydra でいつでも使えるようにキーバインドを割り当てている。

** dumb-jump
   :PROPERTIES:
   :EXPORT_FILE_NAME: dumb-jump
   :END:

*** 概要

    [[https://github.com/jacktasia/dumb-jump][dumb-jump]] は関数とかの定義されてる場所にお手軽にジャンプできるようにするパッケージ。
    めっちゃ色々な言語をサポートしている。

*** インストール

    いつも通り el-get でインストールしている。

    #+begin_src emacs-lisp :tangle inits/40-dumb-jump.el
    (el-get-bundle dumb-jump)
    #+end_src

*** 設定

**** デフォルトプロジェクトの変更

     デフォルトだと ~~/~ がデフォルトプロジェクトらしいが
     そんなに上の階層から調べられてもしょうがない気がするので
     ソースコードを置いているフォルダを指定している。

     #+begin_src emacs-lisp :tangle inits/40-dumb-jump.el
     (setq dumb-jump-default-project "~/projects")
     #+end_src

**** 複数マッチした時に使う絞り込み

     最近はできるだけ ivy を使うようにしているので
     dumb-jump でも ivy を使うように指定している。

     #+begin_src emacs-lisp :tangle inits/40-dumb-jump.el
     (setq dumb-jump-selector 'ivy)
     #+end_src

*** キーバインド

    README に書いている hydra の設定をほぼパクってるけど
    pretty-hydra を使ってキーを定義している

    #+begin_src emacs-lisp :tangle inits/40-dumb-jump.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define dumb-jump-pretty-hydra
        (:foreign-keys warn :title "Dumb jump" :quit-key "q" :color blue :separator "-")
        ("Go"
         (("j" dumb-jump-go "Jump")
          ("o" dumb-jump-go-other-window "Other window"))

         "External"
         (("e" dumb-jump-go-prefer-external "Go external")
          ("x" dumb-jump-go-prefer-external-other-window "Go external other window"))

         "Lock"
         (("l" dumb-jump-quick-look "Quick look"))

         "Other"
         (("b" dumb-jump-back "Back")))))
    #+end_src

    |-----+--------------------------------------------------------------------------------|
    | Key | 効果                                                                           |
    |-----+--------------------------------------------------------------------------------|
    | j   | 定義場所にジャンプ                                                             |
    | o   | 定義場所を別 window で開く                                                     |
    | e   | 定義場所にジャンプ。ただし同じファイルより外部ファイルとのマッチを優先         |
    | x   | 定義場所を別 window で開く。ただし同じファイルより外部ファイルとのマッチを優先 |
    | l   | クイックルック。定義をツールチップ表示する                                     |
    | b   | 最後にジャンプされた場所に戻る。今は既に obsolute 扱い                         |
    |-----+--------------------------------------------------------------------------------|

** projectile
   :PROPERTIES:
   :EXPORT_FILE_NAME: projectile
   :END:

*** 概要
    [[https://github.com/bbatsov/projectile][projectile]] はプロジェクト内のファイルを検索したりするのに便利なパッケージ

*** インストール
    いつも通り el-get からインストールする

    #+begin_src emacs-lisp :tangle inits/30-projectile.el
    (el-get-bundle projectile)
    #+end_src
*** 有効化
    このあたりで有効化しておいている。
    この順序に意味があったかは忘れた……。

    #+begin_src emacs-lisp :tangle inits/30-projectile.el
    (projectile-mode)
    #+end_src
*** 無視リスト
    普段 Rails ばっかりやってるのでそれ関係のものを無視リストに入れている。
    けどあんまりメンテしてない。

**** 無視するディレクトリ
     #+begin_src emacs-lisp :tangle inits/30-projectile.el
     (add-to-list 'projectile-globally-ignored-directories "tmp")
     (add-to-list 'projectile-globally-ignored-directories ".tmp")
     (add-to-list 'projectile-globally-ignored-directories "vendor")
     (add-to-list 'projectile-globally-ignored-directories ".sass-cache")
     (add-to-list 'projectile-globally-ignored-directories "coverage")
     (add-to-list 'projectile-globally-ignored-directories "cache")
     (add-to-list 'projectile-globally-ignored-directories "log")
     #+end_src

     node_modules もここに突っ込んでも良いかもしれない。

**** 無視するファイル
     #+begin_src emacs-lisp :tangle inits/30-projectile.el
     (add-to-list 'projectile-globally-ignored-files "gems.tags")
     (add-to-list 'projectile-globally-ignored-files "project.tags")
     (add-to-list 'projectile-globally-ignored-files "manifest.json")
     #+end_src

     tags ファイルは昔は使っていたけど、
     最近は dumb-jump が優秀なのと、面倒で使ってないので
     そろそろ gems.tags と project.tags は不要かもしれない。

*** ivy/counsel との連携
    上の方で helm との連携処理を入れていたが
    今は大体 ivy に乗り換えているので ivy 連携もしている。

    #+begin_src emacs-lisp :tangle inits/30-projectile.el
    (setq projectile-completion-system 'ivy)
    (el-get-bundle counsel-projectile)
    #+end_src

    counsel-projectile はいくつかの絞り込み処理を提供してくれて便利。
    それでも足りなかったら自前で何か作ることになるのかなと思っている。
*** キーバインド
    デフォルトでいくつかのキーバインドが用意されてるようだけど
    そんなものさっぱり覚えられないので
    とりあえずいくつかを Hydra で叩けるようにしている

    #+begin_src emacs-lisp :tangle inits/30-projectile.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define
        projectile-hydra (:separator "-" :title "Projectile" :foreign-key warn :quit-key "q" :exit t)
        ("File"
         (("f" counsel-projectile-find-file "Find File")
          ("d" counsel-projectile-find-dir "Find Dir")
          ("r" projectile-recentf "Recentf"))

         "Other"
         (("p" (counsel-projectile-switch-project 'neotree-dir) "Switch Project")))))
    #+end_src

    | Key | 効果                                           |
    | f   | プロジェクト内のファイルを検索                 |
    | d   | プロジェクト内のフォルダを検索                 |
    | r   | プロジェクト内で最近触ったファイルのリスト表示 |
    | p   | 別のプロジェクトに切り替え                     |

    - ~projectile-find-implementation-or-test~
    - ~projectile-replace~
    - ~projectile-replace-regxp~

    あたりも使えるようにするともしかしたら便利かもしれない。
    あとは ~counsel-projectile-grep~ とかの類か。
*** その他
    基本的に Rails のプロジェクトをやっているので
    projectile-rails をベースにいつも触ってるので projectile そのものはあまり弄ってないのであった

* プログラミング関係の設定
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: programming
  :END:
** プログラミング関係の設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>7. </b>" :weight 7 :disableToc true
   :END:

   ここでは各言語やフレームワーク毎の設定をまとめている。
   markdown-mode とか yaml-mode なんかはプログラム言語ではないけど面倒なので一旦ここにまとめている。

   - [[*emacs-lisp][emacs-lisp]] :: Emacs Lisp を書くための設定
   - [[*Ember.js][Ember.js]] :: Web フロントエンド MVC フレームワークである Ember.js 用の設定を書いている
   - [[*es6][es6]] :: ES2015 以降の JS に関する設定。es6 としているのは過去の経緯のため。
   - [[*flycheck][flycheck]] :: Flycheck の設定について書いている
   - [[*gnuplot-mode][gnuplot-mode]] :: グラフ作成ソフト gnuplot を使うための設定
   - [[*lsp-mode][lsp-mode]] :: Emacs の LSP クライアントの一種である lsp-mode に関する設定
   - [[*markdown][markdown]] :: Markdown を書く時の設定
   - [[*plantuml-mode][plantuml-mode]] :: PlantUML を書く時のメジャーモードの設定
   - [[*rails][rails]] :: Rails 開発をする上での設定
   - [[*React.js][React.js]] :: React.js アプリを開発するための設定
   - [[*rspec-mode][rspec-mode]] :: Ruby のテストフレームワーク RSpec を書いたりするのに便利なモード
   - [[*ruby][ruby]] :: Ruby を書く上での設定
   - [[*scss][scss]] :: SCSS を書く上での設定
   - [[TypeScript][TypeScript]] :: TypeScript を書く上での設定
   - [[*Vue.js][Vue.js]] :: Vue.js を書く上での設定
   - [[*yaml-mode][yaml-mode]] :: YAML を書く時のメジャーモードの設定

** emacs-lisp
   :PROPERTIES:
   :EXPORT_FILE_NAME: emacs-lisp
   :END:

*** 概要
    Emacs Lisp を書くための設定。
    まあそんなにしっかり書いてないので、あんまり設定は入ってない

*** Hook
    Hook 用の関数を定義してその中に色々書いている。

    - とりあえず行数表示が欲しいので display-line-numbers-mode を有効化
    - 当然補完もしたいので company-mode を有効にしている
    - カッコの対応などもいい感じに動いて欲しいので smartparens-mode とその strict-mode を有効にしている

    #+begin_src emacs-lisp :tangle inits/40-emacs-lisp.el
    (defun my/emacs-lisp-mode-hook ()
      (display-line-numbers-mode 1)
      (company-mode 1)
      (smartparens-mode 1)
      (turn-on-smartparens-strict-mode))
    #+end_src

    そんで最後にその関数を hook に突っ込んでる。

    #+begin_src emacs-lisp :tangle inits/40-emacs-lisp.el
    (add-hook 'emacs-lisp-mode-hook 'my/emacs-lisp-mode-hook)
    #+end_src
*** アイコン挿入コマンドの用意
    時々 UI 設定目的で絵文字を使うことがあるので
    挿入できるコマンドを用意している。最近使った記憶ないけど。

    #+begin_src emacs-lisp :tangle inits/40-emacs-lisp.el
    (defun my/insert-all-the-icons-code (family)
      (interactive)
      (let* ((candidates (all-the-icons--read-candidates-for-family family))
             (prompt     (format "%s Icon: " (funcall (all-the-icons--family-name family))))
             (selection  (completing-read prompt candidates nil t)))
        (insert "(all-the-icons-" (symbol-name family) " \"" selection "\")")))
    #+end_src
*** キーバインド

    emacs-lisp-mode 用に major-mode-hydra を設定している。
    けどそんなにしっかり Emacs Lisp を書いてるわけではないのがバレバレな感じである。

    #+begin_src emacs-lisp :tangle inits/40-emacs-lisp.el
    (with-eval-after-load 'major-mode-hydra
      (major-mode-hydra-define emacs-lisp-mode (:separator "-" :quit-key "q" :title (concat (all-the-icons-fileicon "elisp") " Emacs Lisp"))
        ("Describe"
         (("F" counsel-describe-function "Function")
          ("V" counsel-describe-variable "Variable"))

         "Insert Icon Code"
         (("@a" (my/insert-all-the-icons-code 'alltheicon) "All the icons")
          ("@f" (my/insert-all-the-icons-code 'fileicon)   "File icons")
          ("@F" (my/insert-all-the-icons-code 'faicon)     "FontAwesome")
          ("@m" (my/insert-all-the-icons-code 'material)   "Material")
          ("@o" (my/insert-all-the-icons-code 'octicon)    "Octicon")
          ("@w" (my/insert-all-the-icons-code 'wicon)      "Weather")))))
    #+end_src

    | Key | 効果                            |
    | F   | 関数を調べる                    |
    | V   | 変数を調べる                    |
    | @a  | all-the-icon のアイコンを挿入   |
    | @f  | fileicon のアイコンを挿入       |
    | @F  | FontAwesome のアイコンを挿入    |
    | @m  | Material Icons のアイコンを挿入 |
    | @o  | Octicons のアイコンを挿入       |
    | @w  | 天気アイコンを挿入              |

** Ember.js
   :PROPERTIES:
   :EXPORT_FILE_NAME: ember-js
   :END:

*** 概要

    Ember.js 用の Emacs の拡張としては
    ~ember-mode~ と ~handlebars-mode~ が存在する

*** ember-mode                                                       :unused:

    [[https://github.com/madnificent/ember-mode][ember-mode]] は
    Ember.js アプリケーションのファイルナビゲーションや生成を行ってくれるモード。
    実は麦汁さんは使えてない。

    インストールするだけではダメで、
    ember-mode を明示的に起動しないといけない。

    そのためには dir-locals を使うとか
    projectile なんかがやってるように
    フォルダ構成から判定させるみたいなことが必要そう。だるい。

    というわけで死蔵中。

    ついでにいうとキーバインドもだるい系なので
    使う時は Hydra を用意した方が良さそう

    インストールは GitHub からできるが
    el-get.lock を用いたバージョン更新確認スクリプトのため
    レシピを追加している

    #+begin_src emacs-lisp :tangle recipes/ember-mode.rcp
    (:name madnificent/ember-mode
           :website "https://github.com/madnificent/ember-mode"
           :description "Ember-mode speeds up navigation in EmberJS projects."
           :type github
           :pkgname "madnificent/ember-mode")
    #+end_src

    このレシピを用意した上で以下でインストール

    #+begin_src emacs-lisp :tangle inits/40-ember.el
    (el-get-bundle ember-mode)
    #+end_src

*** handlebars-mode                                             :improvement:

    [[https://github.com/danielevans/handlebars-mode][handlebars-mode]] は Ember.js のテンプレートエンジンとして採用されている
    Handlebars を書くためのモード。

    syntax highlight と、いくつかの編集機能を備えている。
    が、今のところ麦汁さんは syntax highlight しか使えてない。

    編集コマンドは [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]] で使えるようにしてあげれば良さそう

    #+begin_src emacs-lisp :tangle inits/40-ember.el
    (el-get-bundle handlebars-mode)
    #+end_src
** es6
   :PROPERTIES:
   :EXPORT_FILE_NAME: es6
   :END:

*** 概要
    ES5 以前ではない JS を書くための設定。
    es6 といいつつ ES2016(ES7) などもこの設定のまま書いている。

    [[https://github.com/TannerRogalsky/sprockets-es6][sprockets-es6]] を使って ES6 対応をしていた時に
    es6 という拡張子を使っていたのでこのファイル名になっている。

*** インストール
    es6 はつまり JS なのでとりあえず el-get で js2-mode を入れている。

    #+begin_src emacs-lisp :tangle inits/40-es6.el
    (el-get-bundle js2-mode)
    #+end_src

*** Hook

    - flycheck を有効にしてリアルタイムに文法チェックをしている
      - また ~javascript-eslint~ を使いたいので他2つは disable にしている
    - company-mode で補完できるようにしている
    - smartparens-strict-mode でカッコなどの入力補助をしている
    - インデントは空白2文字としている

    #+begin_src emacs-lisp :tangle inits/40-es6.el
    (defun my/js2-mode-hook ()
      (flycheck-mode 1)
      (setq flycheck-disabled-checkers '(javascript-standard javascript-jshint))

      (company-mode 1)
      (turn-on-smartparens-strict-mode)

      (setq js2-basic-offset 2))
    #+end_src

    という Hook 用関数を用意しておいて

    #+begin_src emacs-lisp :tangle inits/40-es6.el
    (add-hook 'js2-mode-hook 'my/js2-mode-hook)
    #+end_src

    という感じで js2-mode-hook に追加している。

    Lambda で一括でやる方法もあるけども、
    関数名つけて分離しておくと中身を簡単に入れ替えられて便利。

*** es6 を js2-mode で扱うようにする

    #+begin_src emacs-lisp :tangle inits/40-es6.el
    (add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode))
    #+end_src

*** 他に気になるツール

**** xref-js2
     https://github.com/js-emacs/xref-js2

     コード間の移動が楽になるかもしれない。
     けど dumb-jump があるから別に要らない気もする

**** js2-refactor
     https://github.com/js-emacs/js2-refactor.el

     リファクタリングツール。
     キーバインドは覚えるのつらそうだから Hydra を用意する必要がありそう。

**** skewer-mode
     https://github.com/skeeto/skewer-mode

     Web ブラウザと連携して JS の評価をしたりとかしてくれたり
     一部の変更を反映してくれたりするらしい。

     保存したら自動リロードされる環境はともかく
     そうじゃない環境だと楽かもしねあい。

**** js-import
     https://github.com/jakoblind/js-import

     import を書くのを楽にしてくれるっぽい。

**** indium
     https://github.com/NicolasPetton/indium

     Node.js と連携してステップ実行とかができるようになるらしい。
     便利そう。

** flycheck
   :PROPERTIES:
   :EXPORT_FILE_NAME: flycheck
   :END:
*** 概要
    [[https://www.flycheck.org/en/latest/][flycheck]] はリアルタイムで文法チェックなんかをするのに便利なモード。
    flymake よりモダンなやつだったんだけど最近は flymake に戻る人もいるっぽいので
    どっちが良いかよくわかってない

**** インストール
     flycheck と同時に
     カーソルのそばに pos-tip で通知内容を表示してくれる [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] をインストールしている

     #+begin_src emacs-lisp :tangle inits/30-flycheck.el
     (el-get-bundle flycheck)
     (el-get-bundle flycheck-pos-tip)
     #+end_src

**** 設定
     flycheck を読んだ後で flycheck-pos-tip-mode が有効になるようにしている。
     これは公式に書かれているやりかたに則っている
     https://github.com/flycheck/flycheck-pos-tip#installation

     また web-mode はデフォルトでは flycheck が使えないので
     flycheck-add-mode を使って web-mode でも flycheck が使えるようにしている

     #+begin_src emacs-lisp :tangle inits/30-flycheck.el
       (with-eval-after-load 'flycheck
         (flycheck-pos-tip-mode)
         (flycheck-add-mode 'javascript-eslint 'web-mode))
     #+end_src
**** その他
***** flycheck-posframe
      flycheck-pos-tip は flycheck 公式のプラグインなので採用しているけど
      同じことを posframe でやってくれる [[https://github.com/alexmurray/flycheck-posframe][flycheck-posframe]] に置き換えた方が
      見た目麗しくなりそうな気がしている。
***** 言語毎の設定
      各言語向けの設定もあるけど
      それは各言語の設定ファイル内に書いているのでここでは書いてない

      [[*ruby][プログラミング関係の設定 > ruby]] とか [[*scss][プログラミング関係の設定 > scss]] とかに書いているはず
** gnuplot-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: gnuplot-mode
   :END:
*** 概要
    [[https://github.com/emacsorphanage/gnuplot][gnuplot-mode]] はグラフ作成ソフトである [[http://www.gnuplot.info/][gnuplot]] を Emacs で使うためのパッケージ。
    Syntax Highlight や 補完機能 などを提供する。

    まあほとんど使ってないんだけど。

*** インストール
    いつも通り el-get で入れている

    #+begin_src emacs-lisp :tangle inits/40-gnuplot.el
    (el-get-bundle gnuplot-mode)
    #+end_src

*** その他
    org-mode から使ってた記憶があるのでそっちの方で何か設定があるかもしれない

** lsp-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: lsp-mode
   :END:
*** 概要
    [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] は Emacs で Language server protocol が使えるようにするパッケージ。

    より軽そうなやつに [[https://github.com/joaotavora/eglot][eglot]] というのもあるがこっちは試したことがない。
*** インストール
    lsp-mode 本体と
    UI 周りを担当する lsp-ui-mode の両方をインストールしている。
    また lsp-mode が有効になる際に lsp-ui-mode も同時に有効になるようにしている。

    #+begin_src emacs-lisp :tangle inits/20-lsp.el
    (el-get-bundle lsp-mode)
    (el-get-bundle lsp-ui)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    #+end_src
*** 設定
    lsp-ui-doc はカーソル位置にある変数や関数などの説明を child frame で表示してくれるやつ。

    これがデフォルトではフレーム基準で右上に表示するのだが
    大きめの画面を分割して使っていると大分遠くに表示されてしまうので
    window 基準で表示するように設定を変更している

    #+begin_src emacs-lisp :tangle inits/20-lsp.el
    (setq lsp-ui-doc-alignment 'window)
    #+end_src
** markdown
   :PROPERTIES:
   :EXPORT_FILE_NAME: markdown
   :END:

*** 概要
    Markdown を書くための設定。
    といいつつ markdown-mode を入れてるだけだけども。

    手元でテキストドキュメントを弄るのは org-mode が多いからなあ……

*** インストール
    いつも通り el-get で入れている。

    #+begin_src emacs-lisp :tangle inits/40-markdown.el
    (el-get-bundle markdown-mode)
    #+end_src

** plantuml-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: plantuml-mode
   :END:

*** 概要
    [[https://github.com/skuro/plantuml-mode][plantuml-mode]] は [[https://plantuml.com/ja/][PlantUML]] という、テキストだけで UML 図などが描けるツール用のモード。

*** インストール
    いつも通り el-get で入れてる

    #+begin_src emacs-lisp :tangle inits/50-plantuml.el
    (el-get-bundle plantuml-mode)
    #+end_src
*** 設定
    実行モードは ~'jar~ を指定している。
    デフォルトは ~'server~ なんだけどオフラインの時も使いたいししね。

    #+begin_src emacs-lisp :tangle inits/50-plantuml.el
    (setq plantuml-default-exec-mode 'jar)
    #+end_src

    el-get でインスコすると jar ファイルも自動で拾って来て
    plantuml-mode と同じディレクトリに設置して
    ~plantuml-jar-path~ も通してくれるからそっち使う方が便利だしね。
*** その他
    最新の develop ブランチだとインデントを調整できる機能が入っているので乗り換えたいけど
    そのためには el-get のレシピを書いてあげる必要がありそうで放置している。

** rails
   :PROPERTIES:
   :EXPORT_FILE_NAME: rails
   :END:
*** 概要
    Rails 開発関係だけど Ruby 開発とはちょっと違う設定をここに書いている。
*** 関連パッケージのインストール
    テンプレートエンジンには haml を使っているので [[https://github.com/nex3/haml-mode][haml-mode]] を入れていて
    ファイルナビゲーションには [[*projectile][projectile]] の拡張である [[https://github.com/asok/projectile-rails][projectile-rails]] を利用している。

    #+begin_src emacs-lisp :tangle inits/41-rails.el
    (el-get-bundle haml-mode)
    (el-get-bundle projectile-rails)
    (projectile-rails-global-mode 1)
    #+end_src

*** projectile-rails 用のコマンド追加
    自身のプロジェクトだと少しナビゲーション用のコマンドが不足していたので
    projectile-rails の実装を参考にコマンドを追加している

**** Uploader Finder
     ~app/uploaders~ に格納している upload に関連するファイルを検索するコマンド

     #+begin_src emacs-lisp :tangle inits/41-rails.el
     (defun my/projectile-rails-find-uploader ()
       "Find a Uploader."
       (interactive)
       (projectile-rails-find-resource
        "uploader: "
        '(("app/uploaders/" "\\(.+\\)\\.rb$"))
        "app/uploaders/${filename}.rb"))
     #+end_src

**** Admin Finder
     Active Admin 用のファイルを検索するためのコマンド
     #+begin_src emacs-lisp :tangle inits/41-rails.el
     (defun my/projectile-rails-find-admin ()
       "Find a ActiveAdmin file."
       (interactive)
       (projectile-rails-find-resource
        "admin: "
        '(("app/admin/" "\\(.+\\)\\.rb$"))
        "app/admin/${filename}.rb"))
     #+end_src

**** Form Object Finder
     Form Object を探すためのコマンド
     #+begin_src emacs-lisp :tangle inits/41-rails.el
     (defun my/projectile-rails-find-form-object ()
       "Find a Form Object."
       (interactive)
       (projectile-rails-find-resource
        "form object: "
        '(("app/models/forms/" "\\(.+\\)\\.rb$"))
        "app/models/forms/${filename}.rb"))
     #+end_src

**** Vue Finder
     Vue.js の単一ファイルコンポーネントを探すためのコマンド
     #+begin_src emacs-lisp :tangle inits/41-rails.el
     (defun my/projectile-rails-find-vue ()
       "Find a Vue."
       (interactive)
       (projectile-rails-find-resource
        "vue: "
        '(("app/javascript/" "\\(.+\\)\\.vue$"))
        "app/javascript/${filename}.vue"))
     #+end_src

**** Webpacker 管理の JS 検索コマンド
     Webpacker で JS を管理していたりもするので必要だった

     #+begin_src emacs-lisp :tangle inits/41-rails.el
     (defun my/projectile-rails-find-webpack-js ()
       "Find a Webpack js."
       (interactive)
       (projectile-rails-find-resource
        "webpack js: "
        '(("app/javascript/" "\\(.+\\)\\.js$"))
        "app/javascript/${filename}.js"))
     #+end_src

*** キーバインド
    もちろん基本的にコマンドなんて覚えられないので
    いつも通り Hydra を定義して大体キーバインドは忘れている。

    なおこの Hydra は Rails のファイルを開いている時には ~C-c r~ で起動するようにしている。
    これは通常のセットアップで prefix としてこう設定するといいよ、みたいに書かれているのを流用している。
    https://github.com/asok/projectile-rails#keymap-prefix

    #+begin_src emacs-lisp :tangle inits/41-rails.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define pretty-hydra-projectile-rails-find (:separator "-" :color blue :foreign-keys warn :title "Projectile Rails" :quit-key "q")
        ("Current"
         (("M" projectile-rails-find-current-model      "Current model")
          ("V" projectile-rails-find-current-view       "Current view")
          ("C" projectile-rails-find-current-controller "Current controller")
          ("H" projectile-rails-find-current-helper     "Current helper")
          ("P" projectile-rails-find-current-spec       "Current spec")
          ("Z" projectile-rails-find-current-serializer "Current serializer"))

         "App"
         (("m" projectile-rails-find-model           "Model")
          ("v" projectile-rails-find-view            "View")
          ("c" projectile-rails-find-controller      "Controller")
          ("h" projectile-rails-find-helper          "Helper")
          ("a" my/projectile-rails-find-admin        "ActiveAdmin")
          ("f" my/projectile-rails-find-form-object  "Form object")
          ("@" projectile-rails-find-mailer          "Mailer")
          ("V" my/projectile-rails-find-vue          "Vue")
          ("J" my/projectile-rails-find-webpack-js   "Webpack js")
          ("u" my/projectile-rails-find-uploader     "Controller")
          ("!" projectile-rails-find-validator       "Validator")
          ;; ("y" projectile-rails-find-layout       "Layout")
          ("z" projectile-rails-find-serializer      "Serializer"))

         "Assets"
         (("j" projectile-rails-find-javascript  "Javascript")
          ;; ("w" projectile-rails-find-component)
          ("s" projectile-rails-find-stylesheet  "CSS"))

         "Other"
         (("n" projectile-rails-find-migration    "Migration")
          ("r" projectile-rails-find-rake-task    "Rake task")
          ("i" projectile-rails-find-initializer  "Initializer")
          ("l" projectile-rails-find-lib          "Lib")
          ("p" projectile-rails-find-spec         "Spec")
          ("t" projectile-rails-find-locale       "Translation"))

         "Single Files"
         (("R" projectile-rails-goto-routes   "routes.rb")
          ("G" projectile-rails-goto-gemfile  "Gemfile")
          ("D" projectile-rails-goto-schema   "schema.rb"))))
      (define-key projectile-rails-mode-map (kbd "C-c r") 'pretty-hydra-projectile-rails-find/body))
    #+end_src

    | Key | 効果                                               | 備考                                                      |
    | M   | 現在のファイルに関連する Model を開く              |                                                           |
    | V   | 現在のファイルに関連する View を開く               | キーが Vue ファイル検索とかぶってしまっていて現在使えない |
    | C   | 現在のファイルに関連する Controller を開く         |                                                           |
    | H   | 現在のファイルに関連する Helper を開く             |                                                           |
    | P   | 現在のファイルに関連する Spec を開く               |                                                           |
    | Z   | 現在のファイルに関連する Serializer を開く         | [[https://github.com/rails-api/active_model_serializers][ActiveModelSerializer]] を使ってるプロジェクトがある        |
    | m   | Model ファイルを検索する                           |                                                           |
    | v   | View ファイルを検索する                            |                                                           |
    | c   | Controller ファイルを検索する                      |                                                           |
    | h   | Helper ファイルを検索する                          |                                                           |
    | a   | ActiveAdmin のファイルを検索する                   |                                                           |
    | f   | Form Object ファイルを検索する                     |                                                           |
    | @   | ActionMailer ファイルを検索する                    |                                                           |
    | V   | Vue の単一ファイルコンポーネントファイルを検索する |                                                           |
    | J   | Webpacker 管理の JS ファイルを検索する             |                                                           |
    | u   | Uploader ファイルを検索する                        |                                                           |
    | !   | Validator ファイルを検索する                       |                                                           |
    | z   | Serializer ファイルを検索する                      |                                                           |
    | j   | assets 配架の JS ファイルを検索する                |                                                           |
    | s   | SCSS ファイルを検索する                            |                                                           |
    | n   | migration ファイルを検索する                       |                                                           |
    | r   | rake ファイルを検索する                            |                                                           |
    | i   | config/initializers 以下のファイルを検索する       |                                                           |
    | l   | lib 以下のファイルを検索する                       |                                                           |
    | p   | rspec ファイルを検索する                           |                                                           |
    | t   | I18n の翻訳ファイルを検索する                      |                                                           |
    | R   | routes.rb を開く                                   |                                                           |
    | G   | Gemfile を開く                                     |                                                           |
    | D   | Schema.rb を開く                                   |                                                           |

** React.js
   :PROPERTIES:
   :EXPORT_FILE_NAME: react-js
   :END:
*** 概要
    React.js を書くための設定をここにまとめている
*** dap-mode
    Debug Adapter Protocol をサポートするモード。
    入れておいた方がきっとデバッグしやすいんだろうということで入れている。

    lsp-mode の仲間なので、本当はそっち側で入れるようにした方が良さそうだけど
    ひとまず React のために入れているので React 用の設定ファイルに書いている。
    #+begin_src emacs-lisp :tangle inits/41-react.el
    (el-get-bundle dap-mode)
    #+end_src

    同時に treemacs や lsp-treemacs も入ってくる罠がある。
    Neotree 使ってるからちょっとアレだなあ。
    いずれ乗り換えようとはしていたけども。

*** web-mode
    とりあえず tsx を弄る上では web-mode が良いという話もあるので入れておく。

    #+begin_src emacs-lisp :tangle inits/41-react.el
    (el-get-bundle web-mode)
    #+end_src

*** メジャーモードの紐付け
    jsx/tsx ファイルを開いた時には web-mode で動いてほしいので
    auto-mode-alist で関連付けをする

    #+begin_src emacs-lisp :tangle inits/41-react.el
    (add-to-list 'auto-mode-alist '("\\.[jt]sx" . web-mode))
    #+end_src

*** lsp-mode などの有効化
    jsx/tsx ファイルを開く時に web-mode が有効になるようにしているので
    その web-mode の hook で

    - display-line-numbers-mode
    - lsp
    - lsp-ui-mode
    - company-mode


    を有効にしている。

    また web-mode の設定も少し弄っていて
    indent は2桁スペースになるようにしているが
    自動インデントだとそれが反映されないっぽいので自動インデントはオフにしている。

    #+begin_src emacs-lisp :tangle inits/41-react.el
      (defun my/web-mode-tsx-hook ()
        (let ((ext (file-name-extension buffer-file-name)))
          (when (or (string-equal "jsx" ext) (string-equal "tsx" ext))
            (setq web-mode-markup-indent-offset 2)
            (setq web-mode-code-indent-offset 2)
            (setq web-mode-enable-auto-indentation nil)
            (company-mode 1)
            (turn-on-smartparens-mode)
            (display-line-numbers-mode t)
            (lsp)
            (lsp-ui-mode 1))))

      (add-hook 'web-mode-hook 'my/web-mode-tsx-hook)
    #+end_src

** rspec-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: rspec-mode
   :END:

*** 概要
    [[https://github.com/pezra/rspec-mode][rspec-mode]] は Emacs で RSpec を実行したりする時に便利なパッケージ。
    といいつつ麦汁さんはちゃんと使いこなしていない……

*** インストール
    #+begin_src emacs-lisp :tangle inits/42-rspec.el
    (el-get-bundle rspec-mode)
    #+end_src

*** 有効化
    rspec 実行バッファで byebug などで止まった際に C-x C-q したら inf-ruby が動くようにしている。

    #+begin_src emacs-lisp :tangle inits/42-rspec.el
    (add-hook 'after-init-hook 'inf-ruby-switch-setup)
    #+end_src

    binding.pry は何故かまともに動かないので byebug か binding.irb 推奨。
    麦汁さんはいつも ~debugger~ とコードに入れて使っている。
*** キーバインド
    C-c C-c で開いている rspec ファイルのカーソルがある行のテストを実行できるようにしている。
    #+begin_src emacs-lisp :tangle inits/42-rspec.el
    (define-key rspec-mode-map (kbd "C-c C-c") 'rspec-verify-single)
    #+end_src
    他にも色々な機能があるのだけどキーバインド未設定なのでこれだけしか使ってない。
** ruby
   :PROPERTIES:
   :EXPORT_FILE_NAME: ruby
   :END:
*** 概要
    Ruby のコードを編集する上での設定をここには書いている。
    別の箇所で [[*rspec-mode][rspec-mode]] などの設定も書いているので
    いつか記述場所を統合した方が良さそうな気もする

*** rbenv.el
    Ruby のバージョンを切り替えられる [[https://github.com/rbenv/rbenv][rbenv]] を使ってるので
    Emacs 上でもそれが使えるように [[https://github.com/senny/rbenv.el][rbenv.el]] を導入している。
**** インストール
     インストールはいつも通り el-get でやっている

     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (el-get-bundle rbenv)
     #+end_src
**** 有効化
     そして global に有効化している。
     というか global じゃない有効化ってあるのかなってのと、
     あるとしても意味があるのかな的な。
     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (global-rbenv-mode)
     #+end_src
*** enh-ruby-mode
    メジャーモードは [[https://github.com/zenspider/enhanced-ruby-mode][enhanced-ruby-mode]] を利用している。
    が、最近は ruby-mode の方がやっぱり良いみたいな話もどこかで見た気がするので
    戻ってみるのも手かもしれないと思っている。

**** インストール
     いつも通り el-get で入れている。
     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (el-get-bundle enh-ruby-mode)
     #+end_src

**** カスタム設定
     enh-ruby-mode が読み込まれた後に setq で以下のように設定されている

     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (with-eval-after-load 'enh-ruby-mode
       (setq enh-ruby-add-encoding-comment-on-save nil)
       (setq enh-ruby-deep-indent-paren nil)
       (setq enh-ruby-bounce-deep-indent t))
     #+end_src

***** encoding のマジックコメントが入らないようにする
      ~enh-ruby-add-encoding-comment-on-save~ を nil にすることで
      encoding 設定のマジックコメントが入らないようにしている。

      これは昔は有効にしておいた方が良かったけど
      最近の Ruby では設定しなくても UTF-8 が前提になるから
      むしろ無い方が良いというお話だったはず。

      そういう状況に変わったのも大分前なので詳細は忘れた。

      ただとりあえず [[https://github.com/zenspider/enhanced-ruby-mode/blob/e960bf941d9fa9d92eabf7c03a8bbb51ba1ac453/enh-ruby-mode.el#L74][最新の enhanced-ruby-mode]] を見るとデフォルトが nil なので
      わざわざ設定しなくて良さそう。

***** インデントの調整
      ~enh-ruby-deep-indent-paren~ が t の場合

      #+begin_src ruby
      hoge = {
               foo: 1
             }
      #+end_src

      みたいな深いインデントになるけど

      #+begin_src ruby
      hoge = {
        foo: 1
      }
      #+end_src

      というようにしたいので nil に設定している。

***** インデントの切替
      インデントを深くしたくないといいつつ、
      全然それができないのも困りそうなので
      ~enh-ruby-bounce-deep-indent~ を t に設定してタブを押すごとに切り替わるようにしている。

      ところでデフォルトで深い方になってるような気がするので
      今度設定の見直しした方が良さそう。

**** hook
     hook 用の関数で補完などの機能を有効にしている

     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (defun my/enh-ruby-mode-hook ()
       (company-mode 1)
       (lsp)
       (lsp-ui-mode 1)
       (turn-on-smartparens-strict-mode)
       (display-line-numbers-mode 1))
     #+end_src

     - 補完用に company-mode を有効化
     - [[https://github.com/castwide/solargraph][solargraph]] を使ってるので lsp-mode を有効にしている
       - lsp-ui-mode も有効にして色々な情報を表示している
     - 開きカッコと閉じカッコの組み合わせがズレないように smartparens-strict-mode を有効にしている
     - 行番号も表示されている方が便利なので display-line-numbers-mode を有効にしている

     それらを設定する関数を enh-ruby-mode-hook に突っ込んでいる

     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (add-hook 'enh-ruby-mode-hook 'my/enh-ruby-mode-hook)
     #+end_src

**** SKK の調整
     ~enh-ruby-mode~ を ~context-skk-programming-mode~ に追加することで
     Ruby を使ってる時にコメント部分はクォートの外以外では
     自動的に日本語入力がオフになるようにしている

     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (add-to-list 'context-skk-programming-mode 'enh-ruby-mode)
     #+end_src

**** キーバインド
     キーバインドは覚えられないので
     [[*major-mode-hydra][major-mode-hydra]] でキーを定義している

     #+begin_src emacs-lisp :tangle inits/40-ruby.el
     (with-eval-after-load 'major-mode-hydra
       (major-mode-hydra-define enh-ruby-mode (:quit-key "q" :title (concat (all-the-icons-alltheicon "ruby-alt") " Ruby commands"))
         ("Enh Ruby"
          (("{" enh-ruby-toggle-block "Toggle block")
           ("e" enh-ruby-insert-end "Insert end"))

          "LSP"
          (("i" lsp-ui-imenu "Imenu")
           ("f" lsp-ui-flycheck-list "Flycheck list"))

          "RSpec"
          (("s" rspec-verify "Run associated spec")
           ("m" rspec-verify-method "Run method spec")
           ("r" rspec-rerun "Rerun")
           ("l" rspec-run-last-failed "Run last failed"))

          "REPL"
          (("I" inf-ruby "inf-ruby"))

          "Other"
          (("j" dumb-jump-go "Dumb Jump")))))
     #+end_src

     | Key | 効果                                                                        |
     | {   | do 〜 end と { 〜 } を切り替える                                            |
     | e   | end を挿入する。使ったことない気がする                                      |
     | i   | lsp-ui-imenu の表示                                                         |
     | f   | Flycheck の通知されるエラーのリスト表示                                     |
     | s   | 関連するテストまたは特定のテストの実行                                      |
     | m   | カーソル位置のコードのテストを探して実行する                                |
     | r   | 最後に実行したテストを再実行                                                |
     | l   | 最後に失敗したテストの再実行                                                |
     | I   | REPL バッファで Ruby を実行する                                             |
     | j   | dumb-jump で関数定義にジャンプ。dumb-jump 用の hydra があるから要らなさそう |

** scss
   :PROPERTIES:
   :EXPORT_FILE_NAME: scss
   :END:
*** 概要
    scss を使う上での設定をここではまとめている。
    長いこと手を入れてないので今はより良い設定がありそうな気がする。

*** rainbow-mode
    [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] はカラーコードを入力した際に、そのカラーコード部分の背景色をカラーコードの色に変化させるパッケージ。
    ぱっと見で大体どんな色かわかって便利なやつ

**** インストール
     自分はel-get で入れている。

     #+begin_src emacs-lisp :tangle inits/40-scss.el
     (el-get-bundle rainbow-mode)
     #+end_src

     ELPA に登録されているので package-install でもいける
*** scss-mode
    scss-mode は Emacs 組込みの css-mode の中で定義されているメジャーモード。
    なのでインストール不要で使えるし
    ~.scss~ という拡張子なら自動的に scss-mode で開いてくれるようになっている。
**** 設定                                                       :improvement:
     インデントはデフォルトだと半角空白 4 つとなっているが
     麦汁さん的には 2 の方が良いのでそのように変更している。

     #+begin_src emacs-lisp :tangle inits/40-scss.el
     (with-eval-after-load 'scss-mode
       (setq css-indent-offset 2))
     #+end_src

     ~with-eval-after-load~ を使っているが
     ~css-indent-offset~ は ~defcustom~ で定義されているので
     ~custom-set-variables~ を使うように修正した方が良さそう
*** hook                                                        :improvement:
    scss を使う上で hook を使って色々有効化したりしている。

    #+begin_src emacs-lisp :tangle inits/40-scss.el
    (defun my/scss-mode-hook ()
      (flycheck-mode 1)

      (setq-local lsp-prefer-flymake nil)
      (lsp)
      (lsp-ui-mode -1)

      (smartparens-strict-mode 1)

      ;; lsp-ui とかより後に設定しないと上書きされるのでここに移動した
      (setq-local flycheck-checker 'scss-stylelint)
      (setq-local flycheck-check-syntax-automatically '(save new-line idle-change))

      (company-mode 1)
      (display-line-numbers-mode 1)

      (rainbow-mode))
    (add-hook 'scss-mode-hook 'my/scss-mode-hook)
    #+end_src

    - flycheck-mode の有効化
      - これによりリアルタイムに lint 結果が分かって便利になる
    - lsp-prefer-flymake の無効化
      - flycheck が有効にならない問題を防いでいる。どうも自分の設定の書き方が悪い気もするが……。
    - lsp-mode を有効化しつつ lsp-ui は無効にしている
      - lsp-ui が有効だと画面上でガチャガチャ height とかのプロパティの説明をしてうざいので
    - smartparens-strict-mode を入れることで {} のペアが維持されるようにしている
    - flycheck-checker, flycheck-check-syntax-automatically の設定
      - lsp-ui とかより後に設定しないと上書きされるので、それらより後に設定している
      - 設定の書き方の悪さのせいな気もする
    - company-mode の有効化。これがないと補完できなくて厳しいよね
    - display-line-numbers-mode の有効化。行数表示も欲しいよね。巨大ファイルだと邪魔だけど巨大にしなきゃいい
    - [[*rainbow-mode][rainbow-mode]] の有効化
*** カラーコード→ CSS Variable の置き換え
    外部コマンドで fetch-color-var というのを定義して
    そいつにカラーコードを渡すとプロジェクトで使ってる CSS Variable を返してくるようにしている。

    で、それを Emacs から叩いて使えるようにしているのが以下のコマンド

    #+begin_src emacs-lisp :tangle inits/40-scss.el
    (defun my/replace-var (point mark)
      (interactive "r")
      (let* ((str (buffer-substring point mark))
             (cmd (concat "fetch-color-var '" str "'"))
             (response (shell-command-to-string cmd)))
        (delete-region point mark)
        (insert response)))
    #+end_src

*** キーバインド
    設定しているけど使ってないなあ……。

    #+begin_src emacs-lisp :tangle inits/40-scss.el
    (with-eval-after-load 'major-mode-hydra
      (major-mode-hydra-define scss-mode (:quit-key "q" :title (concat (all-the-icons-alltheicon "css3") " CSS"))
        ("Edit"
         (("v" my/replace-var "replace-var")))))
    #+end_src

    | Key | 効果                                                                          |
    | v   | リージョンの値で CSS 変数を検索して置き換えるやつ。自作コマンドを利用している |
** TypeScript
   :PROPERTIES:
   :EXPORT_FILE_NAME: typescript
   :END:
*** 概要
    TypeScript ファイル(.ts) を使う上での設定を書いている。
    とりあえず簡単な設定だけ。
*** typescript-mode
    [[https://github.com/emacs-typescript/typescript.el][typescript-mode]] は TypeScript 向けの Syntax Highlight とかを提供してくれるメジャーモード。
**** インストール
     自分はいつも通り el-get で入れている

     #+begin_src emacs-lisp :tangle inits/40-ts.el
     (el-get-bundle typescript-mode)
     #+end_src
**** カスタム変数
     indent は2文字がいいのでデフォルトから変更している

     #+begin_src emacs-lisp :tangle inits/40-ts.el
     (custom-set-variables
      '(typescript-indent-level 2))
     #+end_src
**** hook
     company-mode などのプログラミングで便利な各種のモードを
     hook を使って有効化している

     #+begin_src emacs-lisp :tangle inits/40-ts.el
     (defun my/ts-mode-hook ()
       (company-mode 1)
       (turn-on-smartparens-strict-mode)
       (display-line-numbers-mode t)
       (lsp)
       (lsp-ui-mode 1))
     #+end_src

     という関数を用意して

     #+begin_src emacs-lisp :tangle inits/40-ts.el
     (add-hook 'typescript-mode-hook 'my/ts-mode-hook)
     #+end_src

     として hook に追加している。

     直接 lambda で add-hook に書くという手もあるが
     関数を分離しておくと修正の反映が用意なのでこのようにしている

**** 拡張子による有効化
     .ts ファイルであれば typescript-mode で動いてほしいので
     auto-mode-alist に突っ込んでいる

     #+begin_src emacs-lisp :tangle inits/40-ts.el
     (add-to-list 'auto-mode-alist '("\\.ts" . typescript-mode))
     #+end_src

** Vue.js
   :PROPERTIES:
   :EXPORT_FILE_NAME: vue-js
   :END:
*** 概要
    ここでは Vue.js アプリケーションを書く上での設定を書いている。

*** auto-insert の設定
    Vue.js のコンポーネントファイルを新規作成する時に
    テンプレートが自動挿入できるようにしている

**** テンプレート
     Vue.js の単一ファイルコンポーネントなので template, script, style を出力している。

     template には [[https://pugjs.org/api/getting-started.html][pug]] を、CSS には scss を使っている。

     #+begin_src html :tangle insert/template.vue
     <template lang='pug'>
     </template>

     <script>
     export default {

     };
     </script>

     <style lang='scss' scoped>
     </style>
     #+end_src

**** テンプレートを適用可能にする
     ~.vue~ という拡張子のファイルを新規作成する時には
     上で定義したテンプレートが自動的に挿入されるようにする。

     #+begin_src emacs-lisp :tangle inits/41-vue.el
     (define-auto-insert "\\.vue$" "template.vue")
     #+end_src
*** パッケージのインストール
    ここでは Vue.js 開発に使っている関連パッケージを入れている。
**** vue-mode
     [[https://github.com/AdamNiederer/vue-mode][vue-mode]] は [[https://github.com/purcell/mmm-mode][mmm-mode]] をベースにして作られた Vue.js の単一ファイルコンポーネント用のモード。
     mmm-mode ベースなので
     template, script, css 部分でそれぞれ別のメジャーモードが動くようになっている。
***** インストール
      いつも透り el-get で入れている

      #+begin_src emacs-lisp :tangle inits/41-vue.el
      (el-get-bundle vue-mode)
      #+end_src
***** 備考
      あまり更新は活発でなく微妙な挙動もあるので
      mmm-mode に乗り換えたり web-mode を使うようにしている人も多い様子。

      自分もそういった乗り換えを検討した方がいいかもと思いつつ
      最近あまり Vue.js 触ってないから、まあいいかという気持ちもある。

      なお vue-mode では JS 部分は js2-mode は使えないはず。
      mmm-mode の方が何かの制限で使えないという話だったはずなので。
      https://github.com/mooz/js2-mode/issues/124
**** pug-mode
     [[https://github.com/hlissner/emacs-pug-mode][pug-mode]] は [[https://pugjs.org/api/getting-started.html][pug]] というテンプレートエンジンを使って記述するためのモード。
     Vue.js でテンプレートエンジンに pug を利用することが多いので入れている。
     麦汁さんは HTML をそのまま書くようなことは好きじゃないのです。
***** インストール
      いつも透り el-get で入れている

      #+begin_src emacs-lisp :tangle inits/41-vue.el
      (el-get-bundle hlissner/emacs-pug-mode)
      #+end_src
*** hooks
    css-mode と vue-mode だけは hook を定義している。
    pug-mode や js-mode についても何か手を入れた方がいいのかもしれない。
**** css-mode
     Vue.js では style に scss を指定いちえる場合には css-mode が利用されるようになっているので
     css-mode の hook としている。
     https://github.com/AdamNiederer/vue-mode/blob/031edd1f97db6e7d8d6c295c0e6d58dd128b9e71/vue-mode.el#L63

     #+begin_src emacs-lisp :tangle inits/41-vue.el
     (defun my/css-mode-hook ()
       (setq-local flycheck-checker 'css-stylelint)
       (rainbow-mode 1))

     (add-hook 'css-mode-hook 'my/css-mode-hook)
     #+end_src

     見ての透り rainbow-mode と flycheck-checker の設定ぐらいしかしてない。
     [[*scss-mode][scss-mode]] の方ではもう少し手を入れているので
     同じようなのをここに反映してもいいかもしれない。

     もしくは設定を統合するという手もあるかも。
**** vue-mode
     #+begin_src emacs-lisp :tangle inits/41-vue.el
     (defun my/vue-mode-hook ()
       (display-line-numbers-mode t)
       (lsp)
       (flycheck-mode 1))

     (add-hook 'vue-mode-hook 'my/vue-mode-hook)
     #+end_src

     - 行番号表示
     - lsp を有効化
     - flyckeck-mode を有効化

     しているだけである。
     lsp-ui とか色々設定の余地はありそうな気がする。
*** キーバインド
    これもろくに設定してないし、ろくに使ってないもいないが、一応設定自体はある。

    #+begin_src emacs-lisp :tangle inits/41-vue.el
    (with-eval-after-load 'major-mode-hydra
      (major-mode-hydra-define css-mode (:quit-key "q" :title (concat (all-the-icons-alltheicon "css3") " CSS"))
        ("Edit"
         (("v" my/replace-var "replace-var")))))
    #+end_src

    | Key | 効果                                                                          |
    | v   | リージョンの値で CSS 変数を検索して置き換えるやつ。自作コマンドを利用している |
** yaml-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: yaml-mode
   :END:
*** 概要
    [[https://github.com/yoshiki/yaml-mode][yaml-mode]] は yaml を編集する時のメジャーモード。
    インデントを調整しやすい。

*** インストール
    いつも通り el-get でインストール

    #+begin_src emacs-lisp :tangle inits/40-yaml.el
    (el-get-bundle yaml-mode)
    #+end_src
*** hook
    mode に対する hook は関数を定義して
    その中で呼びたいコードを書いていくようにしている。

    lambda で書いてしまうと hook を弄りたい時に結構面倒なのだけど
    関数を定義しておくと、その関数の中身を変更して評価しておくだけで
    hook で動作する中身が変更できて便利。

    とりあえず yaml-mode では以下のようにして
    [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] を有効にしている。

    #+begin_src emacs-lisp :tangle inits/40-yaml.el
    (defun my/yaml-mode-hook ()
      (highlight-indent-guides-mode 1))
    #+end_src

    で、その hook を最後に yaml-mode-hook に追加している。

    #+begin_src emacs-lisp :tangle inits/40-yaml.el
    (add-hook 'yaml-mode-hook 'my/yaml-mode-hook)
    #+end_src

* 外部連携ツール設定
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: external-tool
  :END:
** 外部連携ツール設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>8. </b>" :weight 8 :disableToc true
   :END:

   ここでは外部のサービスと連携するようなやつをまとめています

   - [[*emacs-w3m][emacs-w3m]] :: 和製テキストブラウザである w3m を Emacs で使えるようにするパッケージ
   - [[*esa.el][esa.el]] :: [[https://esa.io/][esa.io]] と連携するためのパッケージ
   - [[*forge][forge]] :: [[*magit][magit]] と GitHub を連携して Emacs 上で PR を眺めたりできるようにするパッケージ
   - [[*google-this][google-this]] :: Google 検索機能を提供してくれるパッケージ
   - [[*google-translate][google-translate]] :: Emacs から Google 翻訳するためのパッケージ
   - [[*magit][magit]] :: Emacs 上で Git の操作をするのにとても便利なパッケージ
   - [[*notify-slack][notify-slack]] :: Emacs から外部コマンドを通じて Slack に通知するための関数周りの事を書いている
   - [[*wakatime-mode][wakatime-mode]] :: Emacs と WakaTime を連携してどのプロジェクトの作業をどのぐらいしてたかを計測するパッケージ
   - [[*todoist][todoist]] :: Todoist と連携して org-mode で扱えるようにするパッケージ
   - [[*twmode][twmode]] :: Emacs 上で動く Twitter クライアント
   - [[*ブラウザ設定][ブラウザ設定]] :: ブラウザ連携周りの設定
** emacs-w3m
   :PROPERTIES:
   :EXPORT_FILE_NAME: emacs-w3m
   :END:
*** 概要
    w3m という和製のテキストブラウザを Emacs 上で使うためのパッケージ。
    つまり w3m 自体もインストールしておく必要がある。
*** インストール
    emacs-w3m は el-get で入れられるので以下のようにして入れている

    #+begin_src emacs-lisp :tangle inits/70-w3m.el
    (el-get-bundle emacs-w3m)
    #+end_src

    今はこれだけしか入れてない。
    昔の設定はどこかにいっちゃった……。

** esa.el
   :PROPERTIES:
   :EXPORT_FILE_NAME: esa.el
   :END:
*** 概要
    [[https://github.com/nabinno/esa.el][esa.el]] は [[https://esa.io/][esa.io]] と連携するためのパッケージ。
    大体直接 Web で書くので活用はできてない……

*** インストール・設定
    いつも通り el-get で入れている。

    設定は別ファイルに分離している。authinfo に移動したい

    #+begin_src emacs-lisp :tangle inits/70-esa.el
    (el-get-bundle esa)
    (my/load-config "my-esa-config")
    #+end_src
** forge
   :PROPERTIES:
   :EXPORT_FILE_NAME: forge
   :END:
*** 概要
    [[https://github.com/magit/forge][forge]] は magit と github を連携させるやつ。
    一応入れているけど実は使えてないのであまりこの設定を呼んでも意味はなさそう

*** インストール
    いつも通り el-get でインストール

    #+begin_src emacs-lisp :tangle inits/36-forge.el
    (el-get-bundle forge)
    #+end_src

*** 読み込み
    magit の拡張なので magit を読み込んで後に読み込まれるようにしている

    #+begin_src emacs-lisp :tangle inits/36-forge.el
    (with-eval-after-load 'magit
      (require 'forge))
    #+end_src

*** その他
    リポジトリのコミット数が多いとまともに使えない感じだけどどうしたらいいの。

** google-this
   :PROPERTIES:
   :EXPORT_FILE_NAME: google-this
   :END:
*** 概要
    [[https://github.com/Malabarba/emacs-google-this][google-this]] は Google 検索を Emacs の中から行えるやつ。

*** インストール
    いつも通り el-get でインストール

    #+begin_src emacs-lisp :tangle inits/20-google-this.el
    (el-get-bundle google-this)
    #+end_src

    で、本来の使い方だとこのあとに

    #+begin_src emacs-lisp
    (google-this-mode 1)
    #+end_src

    とやって有効化することになるが
    それをしても google-this のデフォルトキーバインドが設定されるぐらいで
    自分はそのデフォルトキーバインドを使う気がないので有効化はしてない。

*** キーバインド
    キーバインドは Hydra で設定しているが、
    [[*google-translate][google-translate]] と統合したので
    [[*Google 連携][キーバインド > Google 連携]] に記載している。

** google-translate
   :PROPERTIES:
   :EXPORT_FILE_NAME: google-translate
   :END:
*** 概要
    [[https://github.com/atykhonov/google-translate][google-translate]] は Google 翻訳する機能を提供するパッケージ。
*** インストール
    いつも通り el-get でインストール

    #+begin_src emacs-lisp :tangle inits/20-google-translate.el
    (el-get-bundle google-translate)
    #+end_src
*** 関数のオーバーライド
    どうも最新版でも壊れっぱなしのようなので
    https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
    にあるように関数を上書きしている。

    #+begin_src emacs-lisp :tangle inits/20-google-translate.el
    (with-eval-after-load 'google-translate-tk
      (defun google-translate--search-tkk ()
        "Search TKK."
        (list 430675 2721866130)))
    #+end_src

    google-translate-tk に定義されていて、
    それが読まれた後に上書きしないといけないので
    with-eval-after-load を使っている。
*** default-ui の読み込み
    Google Translate は UI を defauult と smooth のどちらかから選べるようになっている。

    default だと

    - ~google-translate-default-source-language~
    - ~google-translate-default-target-language~

    を設定しておいて

    - ~M-x google-translate-at-point~ :: source → target の翻訳
    - ~M-x google-translate-at-point-reverse~ :: target → source の翻訳

    という使い方をする。

    smooth だと翻訳の source, target を複数設定して多言語対応ができるが、
    英語以外を翻訳することがないので smooth でなくていいかという感じで default を採用している。

    #+begin_src emacs-lisp :tangle inits/20-google-translate.el
    (with-eval-after-load 'popup
      (require 'google-translate-default-ui))
    #+end_src

    popup.el に依存しているのでそれが読まれた後に require しないといけなかった。
    というわけで with-eval-after-load で対応している。
*** カスタム変数の設定
    上述の通り default UI を使うことにしたので
    その変数をいくらか設定している。

    #+begin_src emacs-lisp :tangle inits/20-google-translate.el
    (custom-set-variables
     '(google-translate-default-source-language "en")
     '(google-translate-default-target-language "ja")
     '(google-translate-output-destination 'popup))
    #+end_src

    - google-translate-default-source-language :: 翻訳元言語
    - google-translate-default-target-language :: 翻訳先言語
    - google-translate-output-destination :: 翻訳結果の表示

    日本語を母国語としていて英語はからきしという人間なので当然英日変換されるように設定していて
    あとは変換結果の表示方法は popup でツールチップ表示するようにしている。

    popup 表示の欠点としては、その結果をコピペできないところだけど
    current-buffer への挿入も邪魔そうだし
    kill-ring に入れるのも違うしなどを考えた結果、消去法でこれにしてみた。

    #+begin_src emacs-lisp
    (my/google-translate-at-point-output-tempbuf ()
      (let ((google-translate-output-destination nil))
        (google-translate-at-point)))
    #+end_src

    とか用意しておいたらその時だけデフォルト動作の temporary buffer への出力ができそうだけどもね。
    ただこれだと逆版も作らないといけなさそうなのでちょっと方法考えるか。
    別で output destination を切り替えるようにするとか。
*** キーバインド
    [[*google-this][google-this]] と同じく Google 連係機能なので
    [[*Google 連携][キーバインド > Google 連携]] でまとめて Hydra を定義している
** magit
   :PROPERTIES:
   :EXPORT_FILE_NAME: magit
   :END:
*** 概要
    [[https://github.com/magit/magit][magit]] は Emacs の上で Git の色々な操作ができるやつ。
    結構使いやすいのでオススメなやつ。

    [[*forge][forge]] を使うと GitHub や GitLab とも連携できてさらに便利、なはず。
*** インストール
    #+begin_src emacs-lisp :tangle inits/35-magit.el
    (el-get-bundle magit)
    #+end_src
*** 使い方
    Git 管理されてるファイルを開いている時に
    ~M-x magit~ とかすると Git 管理用のバッファが出て来るし
    そこで ~?~ を叩いたらどういうコマンドが使えるのか教えてくれるよ(雑)
** notify-slack
   :PROPERTIES:
   :EXPORT_FILE_NAME: notify-slack
   :END:
*** 概要
    Emacs から Slack に通知するための自作関数。
    実体は同じく自作の外部コマンドを叩いているだけである。

    何に使ってるかというと
    org-clock-in, org-clock-out の時に
    作業の開始と終了を分報チャンネルに投稿しているだけである。
    作業の可視化である。
*** 実装
**** 分報チャンネル設定用の変数
     通知先のチャンネル名を格納する変数が必要なので ~defvar~ で定義しておく

     #+begin_src emacs-lisp :tangle inits/30-notify-slack.el
     (defvar my/notify-slack-times-channel nil)
     #+end_src
**** 送信するコマンド
     start-process を使って外部コマンドを叩いている。

     #+begin_src emacs-lisp :tangle inits/30-notify-slack.el
     (defun my/notify-slack (channel text)
       (if my/notify-slack-enable-p
           (start-process "my/org-clock-slack-notifier" "*my/org-clock-slack-notifier*" "my-slack-notifier" channel text)))
     #+end_src

     ~my/notify-slack-enable-p~ という変数が nil だと大分コマンドが実行されないようになっている。

**** Slack 連携を Toggle するコマンド
     連携したい時としたくない時があるので
     送信したりしなかったりを切り替えられるコマンドを用意している。

     中身は何をしているかというと
     上に書いた ~my/notify-slack-enable-p~ という変数を切り替えているだけ。

     #+begin_src emacs-lisp :tangle inits/30-notify-slack.el
     (defun my/notify-slack-toggle ()
       (interactive)
       (if my/notify-slack-enable-p
           (setq my/notify-slack-enable-p nil)
         (setq my/notify-slack-enable-p t)))
     #+end_src

**** 分報チャンネル投稿関数
     「分報チャンネル投稿関数」としているけど
     デフォルト投稿先に投稿するための関数というような扱いの関数。

     単純に前出の ~my/notify-slack~ 関数の第一引数に ~my/notify-slack-times-channel~ という変数を設定して
     そのチャンネルに向けて投稿するだけ。

     #+begin_src emacs-lisp :tangle inits/30-notify-slack.el
     (defun my/notify-slack-times (text)
       (if my/notify-slack-times-channel
           (my/notify-slack my/notify-slack-times-channel text)))
     #+end_src

**** 設定
     あまり見せたくない設定ファイルを別ファイルに分離しているので
     それを読み出している。

     内部では ~my/notify-slack-times-channel~ という変数を設定しているだけじゃないだろうか。
     職場の Slack のチャンネルを指定しているので隠したいという意図があった。

     そのうち .authinfo.gpg に移動しようと思ってる。

     #+begin_src emacs-lisp :tangle inits/30-notify-slack.el
     (my/load-config "my-notify-slack-config")
     #+end_src

     ちなみに [[*my/load-config][my/load-config]] は
     この手の設定ファイルを読み出すために使っている自作関数である。
     load と同じように使えば大体 OK。
     むしろ load の引数ちゃんと使えばこの関数要らない説まである。

     そして起動直後は連携を ON にしたいので
     ~my/notify-slack-enable-p~ を ON にしている

     #+begin_src emacs-lisp :tangle inits/30-notify-slack.el
     (setq my/notify-slack-enable-p t)
     #+end_src
** todoist
   :PROPERTIES:
   :EXPORT_FILE_NAME: todoist
   :END:
*** 概要
    [[https://github.com/abrochard/emacs-todoist][emacs-todoist]] は Todo 管理サービスである Todoist と連携するためのパッケージ。
    org-mode に依存している。
*** インストール
    まず以下のレシピを用意している

    #+begin_src emacs-lisp :tangle recipes/emacs-todoist.rcp
      (:name emacs-todoist
             :website "https://github.com/abrochard/emacs-todoist"
             :description "Emacs interface to Todoist"
             :type github
             :pkgname "abrochard/emacs-todoist")
    #+end_src

    その上で以下のようにしてインストールしている

    #+begin_src emacs-lisp :tangle inits/50-todoist.el
    (el-get-bundle emacs-todoist)
    #+end_src
*** 設定
    API キーを設定するので別ファイルに分離している。
    いつか .authinfo.gpg に移動しようかなと思っているけど
    そもそも最近 TODOIST 使ってない……

    #+begin_src emacs-lisp :tangle inits/50-todoist.el
    (with-eval-after-load 'org
      (my/load-config "my-todoist-config"))
    #+end_src

** twmode
   :PROPERTIES:
   :EXPORT_FILE_NAME: twmode
   :END:
*** 概要
    [[https://github.com/hayamiz/twittering-mode][twmode]] は Emacs 上で動く Twitter クライアント。

    今でもたまーに使っている。
    勉強会に参加して実況する時などに。

*** インストール
    いつも通り el-get でインスコしている。

    #+begin_src emacs-lisp :tangle inits/90-twmode.el
    (el-get-bundle twittering-mode)
    #+end_src
*** 設定
    #+begin_src emacs-lisp :tangle inits/90-twmode.el
    (setq twittering-username "mugijiru")
    (setq twittering-jojo-mode t)
    (setq twittering-timer-interval 60)
    ;(setq twittering-auth-method 'xauth)
    (setq twittering-auth-method 'oauth)
    (setq twittering-update-status-function 'twittering-update-status-from-minibuffer)
    (setq twittering-status-format "%i %S(%s)%p, %@:\n%FILL{  %T // from %f%L%r%R}\n ")
    (setq twittering-retweet-format "RT @%s %t")
    (setq twittering-display-remaining t)
    #+end_src

    なんか色々設定しているけど、まあ大体こんな感じ。

    - ユーザー名の指定
    - twittering-jojo-mode を有効化
    - 自動リロードの間隔を60秒に設定
    - OAuth で認証するように設定
    - 投稿時にミニバッファから投稿するように設定
    - 各ツイートのフォーマット指定
    - 旧式の Retweet 時のフォーマット指定
    - late limit をmode-line に表示

*** キーバインド
    #+begin_src emacs-lisp :tangle inits/90-twmode.el
    (let ((km twittering-mode-map))
      (define-key km (kbd "SPC") 'scroll-up)
      (define-key km (kbd "b") 'scroll-down)
      (define-key km (kbd "g") 'beginning-of-buffer)
      (define-key km (kbd "G") 'end-of-buffer)
      (define-key km (kbd "<") 'beginning-of-buffer)
      (define-key km (kbd ">") 'end-of-buffer)
      (define-key km (kbd "R") 'twittering-current-timeline)
      (define-key km (kbd "F") 'twittering-favorite)
      (define-key km (kbd "\C-cfd") 'twittering-unfavorite)
      (define-key km (kbd "\C-c[") 'twittering-follow)
      (define-key km (kbd "\C-c]") 'twittering-unfollow)
      nil)
    #+end_src

    |---------+--------------------------|
    | Key     | 効果                     |
    |---------+--------------------------|
    | SPC     | スクロールする           |
    | b       | 上にスクロールする       |
    | g, <    | バッファの先頭に移動     |
    | G, >    | バッファの末尾に移動     |
    | R       | 現在のタイムラインを更新 |
    | F       | ふぁぼる                 |
    | C-c f d | ふぁぼ取り消し           |
    | C-c [   | フォローする             |
    | C-c ]   | アンフォロー             |
    |---------+--------------------------|

** wakatime-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: wakatime-mode
   :END:
*** 概要
    [[https://github.com/wakatime/wakatime-mode][wakatime-mode]] は [[https://wakatime.com][WakaTime]] というサービスと連携するためのパッケージ。

    WakaTime は自分がどのプロジェクトの作業をしているかを計測してくれるようなツール。
    普段の行動の改善に使えるかもしれないので、なんとなく連携してみている。

*** インストール
    いつも通り el-get から入れている

    #+begin_src emacs-lisp :tangle inits/80-wakatime.el
    (el-get-bundle wakatime-mode)
    #+end_src
*** APIキーの設定
    APIキーは .authinfo.gpg に保存しているので
    そこから引っ張り出している。

    #+begin_src emacs-lisp :tangle inits/80-wakatime.el
    (custom-set-variables
     '(wakatime-api-key (funcall (plist-get (nth 0 (auth-source-search :host "wakatime.com" :max 1)) :secret))))
    #+end_src
*** 有効化
    Emacs を使っている間は常に有効になっていて欲しいので
    global-wakatime-mode を有効にしている。

    #+begin_src emacs-lisp :tangle inits/80-wakatime.el
    (global-wakatime-mode 1)
    #+end_src

    APIキーが取れてない時はやたらエラーを吐くので
    何かしら調整はしてもいいかもしれない。

    #+begin_src emacs-lisp
    (if (boundp 'wakatime-api-key)
      (global-wakatime-mode 1))
    #+end_src

    みたいにして API キーが取れている時だけ有効にするとかね。
** ブラウザ設定                                                      :unused:
   :PROPERTIES:
   :EXPORT_FILE_NAME: browse-url
   :END:

   browse-url の時の開くプログラムの指定。

   #+begin_src emacs-lisp :tangle inits/20-browse-url.el
   (setq browse-url-generic-program "vivaldi")
   #+end_src

   Vivaldi を指定しているが、最近 Emacs から何かブラウザ立ち上げても Firefox がいつも開いているし、
   この設定ほんとうに生きてる? って感じ。

   WSL2 を入れてる Windows の方は Vivladi 入れてないし
   Mac の方は入れてるけど別に Emacs から Vivaldi が立ち上がるのも観測してないしほんと謎……。

* org-mode
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: org-mode
  :END:
** org-mode
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>9. </b>" :weight 9 :disableToc true
   :END:

   ここでは org-mode 周りの設定をまとめている。
   org-mode だけでも書くことが多いからね……。

   1. [[#org-mode-base-config][基本設定]]
   2. [[*org-babel][org-babel]]
   3. [[*予定のカレンダー表示][予定のカレンダー表示]]
   4. [[*Agenda 関係の設定][Agenda 関係の設定]]
   5. [[*org-capture][org-capture]]
   6. [[*org-clock][org-clock]]
   7. [[*org-export][org-export]]
   8. [[*org-gcal][org-gcal]]
   9. [[*org-ql][org-ql]]
   10. [[*org-refile][org-refile]]
   11. [[*org-trello][org-trello]]
   12. [[*ox-hugo][ox-hugo]]
   13. [[*org-mode 用の独自コマンド][org-mode 用の独自コマンド]]
   14. [[*org-mode 関係の keybinds][org-mode 関係の keybinds]]
   15. [[*日報用の設定(旧)][日報用の設定(旧)]]
** 基本設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: base
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1
   :CUSTOM_ID: org-mode-base-config
   :END:
*** 概要
    ここでは org-mode 周りのベースとなる設定を書いているつもり。
    といいつつ、まだ書き方が雑だなと思っている。
    またその内にでも修正しよう
*** org-mode のインストール
    Emacs に標準で入っている org-mode は大体古過ぎるので
    とりあえずデフォルトで入ってるやつは削除しちゃって
    el-get でインストールしている。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (el-get-bundle org-mode)
    #+end_src

    なんか入れてるパッケージの問題か、依存関係が解決できなかったので
    Git から入れた上でバージョンを固定している。

    バージョンぐらいはそのうち上げたいね

*** org 用ディレクトリの指定
    org-mode のファイルを保存するデフォルトのディレクトリを指定している。

    デフォルトだと ~~/org~ なのだけど
    ホームディレクトリを汚したくないのと
    基本的に Mac を使ってるので ~~/Documents/org~ というディレクトリを用意してそこにファイルを置いている。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (setq org-directory (expand-file-name "~/Documents/org/"))
    #+end_src

*** タスク管理ファイルのフォルダの指定
    タスク管理ファイルがいくつかに分かれているが
    それらをまとめて ~~/Documents/org/tasks~ フォルダに置いている。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (setq my/org-tasks-directory (concat org-directory "tasks/"))
    #+end_src

    とりあえずこの ~my/org-tasks-directory~ という変数を用意することで
    あちらこちらでこれを使い回している。

*** タスクの状態管理のキーワード指定
    org-mode といえば TODO 管理で使ってる人も多いと思う。
    自分も最初はそういう使い方から始めたし、今でもそれをメインにして使っている。

    そして TODO の状態がデフォルトでは

    - TODO
    - DONE

    の2つしかないけど、それでは足りないので
    昔見たインターネットのどこかの記事を参考に以下のように設定している。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (setq org-todo-keywords
          '((sequence "TODO" "EXAMINATION(e)" "READY(r)" "DOING(!)" "WAIT" "|" "DONE(!)" "SOMEDAY(s)")))
    #+end_src

    初期状態は TODO で、作業開始時点で DOING にして
    待ちが発生したら WAIT にして
    完了したら DONE にしている。

    SOMEDAY は「いつかやる」に付与しているけど
    最近ほとんど使ってない。

    org-todo-keywords は複数の sequence を指定したり
    type を指定したりもできるが
    そこまでの活用ができていないので、どこかで見直したいですね。

*** 完了時間の記録
    org-clock を使うようにしているしあんまり要らない気がする。
    もしかしたら habits で必要かもしれないけど。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (setq org-log-done 'time)
    (setq org-log-into-drawer "LOGBOOK")
    #+end_src
*** Excel ファイルを OS で指定したアプリで開く
    org-mode のリンク先の拡張子が xlsx の時に OS 側で指定した標準アプリを開くようにしている。
    Excel が入っていたらそっちで開かれるし、入ってなければ Numbers で開かれる。はず。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (with-eval-after-load 'org
      (add-to-list 'org-file-apps '("\\.xlsx?\\'" . default)))
    #+end_src

    第二引数に default を指定すると、内部的には open コマンドが使われることを利用している。

** org-babel
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-babel
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 2
   :END:
*** 概要
    ここでは org-babel の設定をまとめている。

*** org-babel で評価可能な言語の指定

    なんか普段から使いそうな奴をとりあえず選定しているつもり。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((plantuml . t)
                                   (sql . t)
                                   (gnuplot . t)
                                   (emacs-lisp . t)
                                   (shell . t)
                                   (js . t)
                                   (ruby . t)))
    #+end_src

    - js, ruby :: 仕事でメインで使ってる言語なので入れている。
    - shell :: 入れてる方が便利そう、ぐらいの雑な理由。
    - sql :: メモしておいて手元から実行できると便利そう
    - plantuml :: 図の出力。一番使ってる。
    - gnuplot :: 趣味で入れてみているけど実際使う機会ほとんどないよなって気がしてきている。

*** org-babel-execute 後に画像を再表示
    PlantUML の処理をすることが多いので
    以下の hook を設定することで実行後に画像を再表示するようにしている

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
    #+end_src

*** org-babel の非同期実行                                      :improvement:
    非同期に org-babel の source を実行するために
    [[https://github.com/astahlman/ob-async][ob-async]] を入れている

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (el-get-bundle ob-async)
    (require 'ob-async)
    #+end_src

    で、ob-async を何のために入れているかというと PlantUML の図の出力である。
    画像まで作成するからね、時間かかりそうだしね。

    そんで、その時に ~org-plantuml-jar-path~ を強制的に指定している。

    #+begin_src emacs-lisp :tangle inits/60-org.el
    (add-hook 'ob-async-pre-execute-src-block-hook
          '(lambda ()
             (setq org-plantuml-jar-path "~/bin/plantuml.jar")))
    #+end_src

    多分 custom-set-variables でちゃんと設定したらいいんだろうなあ。
** 予定のカレンダー表示
   :PROPERTIES:
   :EXPORT_FILE_NAME: calendar
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 3
   :END:
*** 概要
    普段の予定をカレンダー表示で見れると嬉しいな〜と思って
    [[https://github.com/kiwanami/emacs-calfw][calfw]] で予定が見れるようにしている。

    が、今ここに書いているのはまだ設定の一部である。
    agenda 部分と関わっていてまだうまく整理しきれてない。
*** 日本の休日

    calfw に日本の休日を表示できるように
    [[https://github.com/emacs-jp/japanese-holidays][japanese-holidays]] を入れている。

    #+begin_src emacs-lisp :tangle inits/61-calfw.el
    (el-get-bundle japanese-holidays)
    (require 'japanese-holidays)
    (setq calendar-holidays (append japanese-holidays))
    #+end_src

    もっとちゃんと設定したら Emacs のデフォルトのカレンダーでも休日表示がわかりやすくなって良いので
    今度設定し直す。

    その時には多分 org-mode カテゴリではないところに移動するはず。
*** calfw
    calfw を el-get で入れた上で、
    org-mode と連携するように calfw-org も require している。

    #+begin_src emacs-lisp :tangle inits/61-calfw.el
    (el-get-bundle calfw)
    (require 'calfw)
    (require 'calfw-org)
    #+end_src

    ここではまだこれ以上のことはしてない
** Agenda 関係の設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: agenda
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 4
   :END:
*** 概要
    org-mode の素晴らしい機能の1つに Agenda というものがある。

    これは色々な org ファイルに散らばった情報を1つのビューに表示するための機能で、
    使いこなすとファイルがバラけていてもいい感じに情報が抽出できて便利なやつ。

    まあ麦汁さんはまだ使いこなせてないけど。

    それでもいくつか Agenda 用の View を用意したりして
    日常業務に役立てている。

*** org-super-agenda のインストール
    org-mode のデフォルトの agenda だと表示周りが物足りなかったので
    [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] を導入している。

    #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
    (el-get-bundle org-super-agenda)
    #+end_src

*** 週の始まりを日曜日に設定
    麦汁さんは週のスタートを日曜日とする派なので
    org-agenda の週の始まりも日曜日に設定している

    #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
    (setq org-agenda-start-on-weekday 0)
    #+end_src

*** 1日単位をデフォルト表示に設定
    1週間表示よりも「今日って何するんだっけ」みたいな使い方が多いので
    1日を表示単位としている。

    #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
    (setq org-agenda-span 'day)
    #+end_src

    週単位で何をするかについては今のところ記憶力で対応している。

    あと、基本的にカスタムビューを使ってるので
    これの影響は受けてるかどうか微妙。

*** agenda の対象ファイルを指定
    org-agenda を使う時に抽出対象とする org ファイルを指定している。

    #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
    (setq org-agenda-files
          '("~/Documents/org/ical.org"
            "~/Documents/org/tasks/"))
    #+end_src

    けどカスタムビューを多用しているので多分この設定ちゃんと活かしてない。
    ical.org とか更新してないし……。

*** agenda の表示周りの設定

**** agenda に時間の区切りを入れない
     ~org-agenda-use-time-grid~ を t にしていると
     10:00 とかのキリがいいところに区切り線を表示してくれるのだが
     日報提出時には邪魔だし、
     普段使いでもその区切り線はあっても邪魔っぽいので
     nil にして表示しないようにしている。

     #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
     (setq org-agenda-use-time-grid nil)
     #+end_src

**** ブロック間の区切り表示
     ブロックとブロックの区切りをハイフン繋ぎの文字列で指定している。

     文字列を指定することで固定の長さの区切り文字になるが
     実は ~?-~ とか指定して長さが無限に伸びるようにしてもいいかもしれない。
     と思いつつ、多分 zoom-mode とかでバッファの幅が切り替わる時に邪魔になるから固定でいいか。

     #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
     (setq org-agenda-block-separator "------------------------------")
     #+end_src

**** org-super-agnda-mode の有効化
     なんでここで有効化しているのかね。
     インストールのやつと近付けた方がいい気がする。

     とりあえず有効化して使えるようにしている。

     #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
     (org-super-agenda-mode 1)
     #+end_src

**** agenda で使う変数の初期化
     ~my/org-agenda-calendar-files~ という変数でカレンダーの情報を取り込んで agenda を表示できるようにしている。
     けど今はカレンダー連携をしていないので空で初期化している。

     #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
       (setq my/org-agenda-calendar-files '())
     #+end_src

**** カスタムビュー
     色々なカスタムビューを定義している。
     かといって全部使ってるわけではないし、つまり使いこなせているかというと微妙。

     |------+----------------------------------------------+--------------------------------------------------------------------------|
     | キー | 内容                                         | 備考                                                                     |
     |------+----------------------------------------------+--------------------------------------------------------------------------|
     | hs   | 稼動日の始業直後に実施する習慣タスクの表示   | よく使っている。その日やるタスクを決めたりしている                       |
     | hf   | 稼動日の退勤直前に実施する習慣タスクの表示   | よく使っている。その日の日報を書くなどしている                           |
     | hw   | 週間隔または隔週で実施する習慣タスクの表示   | 週1で使う感じ。この中に放置しているタスクもある                          |
     | hh   | 休日の習慣タスク                             | 最近使ってない。。。真面目にタスクを作り過ぎてだるくなってるやつ         |
     |------+----------------------------------------------+--------------------------------------------------------------------------|
     | d    | 今日の予定などを表示                         | 普段は会議部分しか見てないので改善が必要そう                             |
     | D    | 休日タスクの表示                             | 使ってない。。。                                                         |
     |------+----------------------------------------------+--------------------------------------------------------------------------|
     | pp   | GTD の Projects の表示                       | たまに使う程度。もうちょっと洗練させたい                                 |
     | pP   | GTD の Projects の内、環境整備系以外         | 環境整備はやっても業務に直接寄与しないので忙しい時は見たくないでござる   |
     | P    | GTD の Pointers の表示                       | たまーに使う。資料が貯まり過ぎて取り扱いに困っている                     |
     |------+----------------------------------------------+--------------------------------------------------------------------------|
     | X    | 終了したタスクを表示                         | まとめてお掃除する時に使っている                                         |
     | z    | 日報用表示                                   | 毎日業務日報の提出が要求されているのでそれっぽく表示されるようにしている |
     | H    | GTD の Projects の中の家事を抽出             | 最近は使ってない                                                         |
     |------+----------------------------------------------+--------------------------------------------------------------------------|
     | EO   | org-mode 関連の環境整備タスク                | 最近見てない                                                             |
     | EE   | Emacs 関係かつ org-mode 以外の環境整備タスク | 貯まる一方                                                               |
     | Ee   | Emacs 以外の環境整備タスク                   | これも貯まる。Emacs 設定ほどじゃないけど                                 |
     |------+----------------------------------------------+--------------------------------------------------------------------------|

     #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
       (setq org-agenda-custom-commands
       '(("h" . "Habits")
         ("hs" "Weekday Start"
          ((tags "Weekday&Start|Daily"
                 ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                             (:name "今日の作業" :scheduled today)
                                             (:discard (:anything t))))))))
         ("hf" "Weekday Finish"
          ((tags "Weekday&Finish"
                 ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                             (:name "今日の作業" :scheduled today)
                                             (:discard (:anything t))))))))
         ("hw" "Weekly"
          ((tags "Weekly"
                 ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                             (:name "今週の作業" :scheduled today)
                                             (:discard (:anything t))))))))
         ("hh" "Holiday"
          ((tags "Weekend|Holiday|Daily"
                 ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                             (:name "今日の作業" :scheduled today)
                                             (:discard (:anything t))))))))
         ("d" "Today"
          ((agenda "会議など"
                   ((org-agenda-span 'day)
                    (org-agenda-files my/org-agenda-calendar-files)))
           (alltodo ""
                      ((org-agenda-prefix-format " ")
                       (org-agenda-overriding-header "予定作業")
                       (org-habit-show-habits nil)
                       (org-agenda-span 'day)
                       (org-agenda-todo-keyword-format "-")
                       (org-overriding-columns-format "%25ITEM %TODO")
                       (org-agenda-files '("~/Documents/org/tasks/projects.org"))
                       (org-super-agenda-groups '((:name "〆切が過ぎてる作業" :and (:deadline past :not (:category "Private")))
                                                  (:name "予定が過ぎてる作業" :and (:scheduled past :not (:category "Private")))
                                                  (:name "今日〆切の作業" :and (:deadline today :not (:category "Private")))
                                                  (:name "今日予定の作業" :and (:scheduled today :not (:category "Private")))
                                                  ;; (:name "今後1週間の作業" :and (:and (:scheduled (before ,(format-time-string "%Y-%m-%d" (time-add (current-time) (* 60 60 24 7)))) (:scheduled (after (format-time-string "%Y-%m-%d" (current-time))))) :not (:category "Private")))
                                                  (:discard (:anything t))))))
           (tags-todo "-Weekday-Daily-Holiday-Weekly-Weekend"
                      ((org-agenda-prefix-format " ")
                       (org-agenda-overriding-header "今日の作業")
                       (org-habit-show-habits nil)
                       (org-agenda-span 'day)
                       (org-agenda-todo-keyword-format "-")
                       (org-overriding-columns-format "%25ITEM %TODO")
                       (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                       (org-super-agenda-groups '((:name "仕掛かり中" :todo "DOING")
                                                  (:name "TODO" :todo "TODO")
                                                  (:name "待ち" :todo "WAIT")
                                                  (:discard (:anything t))))))
           (tags-todo "Weekday-Finish|Daily"
                      ((org-agenda-overriding-header "習慣")
                       (org-habit-show-habits t)
                       (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                       (org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                                  (:name "今日予定" :scheduled today)
                                                  (:discard (:anything t))))))))
         ("D" "Holiday"
          ((tags-todo "-Weekday-Daily-Holiday-Weekly-Weekend"
                      ((org-agenda-prefix-format " ")
                       (org-agenda-overriding-header "休日の作業")
                       (org-habit-show-habits nil)
                       (org-agenda-span 'day)
                       (org-agenda-todo-keyword-format "-")
                       (org-overriding-columns-format "%25ITEM %TODO")
                       (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                       (org-super-agenda-groups '((:name "仕掛かり中" :todo "DOING")
                                                  (:name "TODO" :todo "TODO")
                                                  (:name "待ち" :todo "WAIT")
                                                  (:discard (:anything t))))))
           (tags-todo "Holiday|Weekend|Daily"
                      ((org-agenda-overriding-header "習慣")
                       (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                       (org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                                  (:name "今日予定の作業" :scheduled today)
                                                  (:discard (:anything t))))))))
         ("p" . "Projects")
         ("pp" "Projects"
          ((alltodo "" ((org-agenda-prefix-format " ")
                        (org-agenda-overriding-header "今日のタスク")
                        (org-habit-show-habits nil)
                        (org-agenda-span 'day)
                        (org-agenda-todo-keyword-format "-")
                        (org-overriding-columns-format "%25ITEM %TODO")
                        (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                        (org-super-agenda-groups (append
                                                  (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DOING" "WAIT")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                                  '((:name "その他" :scheduled nil)
                                                    (:discard (:anything t)))))))
           (alltodo "" ((org-agenda-prefix-format " ")
                        (org-agenda-overriding-header "予定に入ってる作業")
                        (org-habit-show-habits nil)
                        (org-agenda-span 'day)
                        (org-agenda-todo-keyword-format "-")
                        (org-overriding-columns-format "%25ITEM %TODO")
                        (org-agenda-files '("~/Documents/org/tasks/projects.org"))
                        (org-super-agenda-groups '((:name "〆切が過ぎてる作業" :deadline past)
                                                   (:name "予定が過ぎてる作業" :scheduled past)
                                                   (:name "今日〆切の作業" :deadline today)
                                                   (:name "今日予定の作業" :scheduled today)
                                                   (:discard (:anything t))))))
           (todo "DOING" ((org-agenda-files '("~/Documents/org/tasks/projects.org"))))
           (todo "TODO"  ((org-agenda-files '("~/Documents/org/tasks/projects.org"))))))
         ("pP" "Projects without Env"
          ((alltodo "" ((org-agenda-prefix-format " ")
                        (org-agenda-overriding-header "今日のタスク")
                        (org-habit-show-habits nil)
                        (org-agenda-span 'day)
                        (org-agenda-todo-keyword-format "-")
                        (org-overriding-columns-format "%25ITEM %TODO")
                        (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                        (org-super-agenda-groups (append
                                                  (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DOING" "WAIT")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                                  '((:name "その他" :scheduled nil)
                                                    (:discard (:anything t)))))))
           (alltodo "" ((org-agenda-prefix-format " ")
                        (org-agenda-overriding-header "予定に入ってる作業")
                        (org-habit-show-habits nil)
                        (org-agenda-span 'day)
                        (org-agenda-todo-keyword-format "-")
                        (org-overriding-columns-format "%25ITEM %TODO")
                        (org-agenda-files '("~/Documents/org/tasks/projects.org"))
                        (org-super-agenda-groups '((:name "〆切が過ぎてる作業" :deadline past)
                                                   (:name "予定が過ぎてる作業" :scheduled past)
                                                   (:name "今日〆切の作業" :deadline today)
                                                   (:name "今日予定の作業" :scheduled today)
                                                   (:discard (:anything t))))))
           (tags-todo "-Emacs-org-Env-Hugo" ((org-agenda-files '("~/Documents/org/tasks/projects.org"))))))
         ("P" "Pointers"
          ((todo "DOING" ((org-agenda-files '("~/Documents/org/tasks/pointers.org"))))
           (todo "TODO"  ((org-agenda-files '("~/Documents/org/tasks/pointers.org"))))))
         ("X" "Finished"
          ((todo "DONE"    ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                                "~/Documents/org/tasks/inbox.org"
                                                "~/Documents/org/tasks/shopping.org"
                                                "~/Documents/org/tasks/next-actions.org"))))
           (todo "SOMEDAY" ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                                "~/Documents/org/tasks/inbox.org"
                                                "~/Documents/org/tasks/shopping.org"
                                                "~/Documents/org/tasks/next-actions.org"))))))

         ("z" "日報"
          ((agenda "" ((org-agenda-span 'day)
                       (org-agenda-overriding-header "")
                       (org-habit-show-habits nil)
                       (org-agenda-format-date "## %Y/%m/%d (%a) 日報")
                       (org-agenda-prefix-format " %?-12t")
                       (org-agenda-files my/org-agenda-calendar-files)
                       (org-super-agenda-groups
                        '((:name "会議など" :time-grid t)
                          (:discard (:anything t))))))
           (todo "DONE" ((org-agenda-prefix-format " ")
                         (org-agenda-overriding-header "対応済")
                         (org-habit-show-habits nil)
                         (org-agenda-span 'day)
                         (org-agenda-todo-keyword-format "-")
                         ;; (org-overriding-columns-format "%25ITEM %TODO %CATEGORY")
                         (org-columns-default-format-for-agenda "%25ITEM %TODO %3PRIORITY")
                         (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                         (org-super-agenda-groups (append
                                                   (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DONE")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                                   '((:discard (:anything t :name "discard")))))))
           (alltodo "" ((org-agenda-prefix-format " ")
                        (org-agenda-overriding-header "仕掛かり中")
                        (org-habit-show-habits nil)
                        (org-agenda-span 'day)
                        (org-agenda-todo-keyword-format "-")
                        (org-overriding-columns-format "%25ITEM %TODO")
                        (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                        (org-super-agenda-groups (append
                                                  (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DOING" "WAIT")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                                  '((:discard (:anything t :name "discard")))))))))

         ("H" "HouseWork" ((tags "HouseWork")))
         ("E" . "Env")
         ("EO" "org"
          ((tags-todo "+org"
                      ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                           "~/Documents/org/tasks/inbox.org"))))))
         ("EE" "Emacs without org"
          ((tags-todo "+Emacs-org"
                      ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                           "~/Documents/org/tasks/inbox.org"))))))
         ("Ee" "without Emacs"
          ((tags-todo "+Env-Emacs-org"
                      ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                           "~/Documents/org/tasks/inbox.org"))))))))
     #+end_src

** org-capture
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-capture
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 5
   :END:
*** 概要
    org-capture は org-mode 用にさくっとメモを取るための機能。

*** org-capture-ical-file                                            :unused:
    https://qiita.com/takaxp/items/0b717ad1d0488b74429d を参考に設定したやつ。

    今は別で Google Calendar 連携しているので使ってない……。

    #+begin_src emacs-lisp :tangle inits/61-org-capture.el
    ;; org-capture
    (defvar org-capture-ical-file (concat org-directory "ical.org"))
    (setq org-capture-ical-file (concat org-directory "ical.org"))
    #+end_src

*** capture 用ファイルを変数定義                                :improvement:
    変数定義しなくてもいい気がしないでもないけど
    とりあえず変数定義している。
    バラバラの変数にするよりも alist とか plist とかにする方が適切な気がする

    #+begin_src emacs-lisp :tangle inits/61-org-capture.el
    (setq my/org-capture-interrupted-file  (concat my/org-tasks-directory "interrupted.org"))
    (setq my/org-capture-inbox-file        (concat my/org-tasks-directory "inbox.org"))
    (setq my/org-capture-pointers-file     (concat my/org-tasks-directory "pointers.org"))
    (setq my/org-capture-impediments-file  (concat org-directory "work/scrum/impediments.org"))
    (setq my/org-capture-memo-file         (concat org-directory "memo.org"))
    (setq my/org-capture-sql-file          (concat org-directory "work/sql.org"))
    (setq my/org-capture-shopping-file     (concat my/org-tasks-directory "shopping.org"))
    (setq my/org-capture-2020-summary-file (concat org-directory "private/2020_summary.org"))
    #+end_src

*** テンプレートの定義
    上記の変数を使って capture 用テンプレートを登録している。

    | Key | 効果                                                          | 備考                                                                                |
    | g   | GTD でとりあえず最初に放り込む Inbox に相当するファイルに登録 | Why?, Goal, How? の欄を設けることでそのタスクの諸々をハッキリさせようとしている     |
    | m   | とりあえずメモっておきたいやつを放り込む                      | 最近使ってない。使いにくいのかも                                                    |
    | p   | 資料を放り込むやつ                                            | あとで読むリストになってる。読み終わっても、便利そうなのは DONE のまま置いている    |
    | i   | 割込みタスクの登録                                            | [[https://grugrut.hatenablog.jp/entry/2016/03/13/085417][org-modeで割り込みにも対応した時間記録をとる方法]] のやつを流用している。たまに使う。 |
    | I   | 開発を進める上での障害をリストアップする用                    | 最近使ってない。溜めても振り替えってないので溜める気すらなくなった                  |
    | R   | 2020年の振り返り用                                            | もう2020年は過去の話なので不要でしょ                                                |
    | s   | SQL 用のメモに登録                                            | さくっと書いた SQL を後からまた使えないかな〜と思って溜めてみている                 |
    | S   | 買物リストに登録                                              | Inbox から refile でもいい気がする                                                  |
    | b   | Blogネタにエントリー                                          | 最近使ってない……。ブログ止まってるしな。                                            |
    | P   | Firefox からページの一部を資料として放り込む用                | https://github.com/sprig/org-capture-extension 関係。Win では設定できてない         |
    | L   | Firefox からページURLを資料として放り込む用                   | https://github.com/sprig/org-capture-extension 関係。Win では設定できてない         |
    | c   | スケジュール管理用ファイルに登録                              | 使ってない。対象ファイルを変えて使ってみてもいいかも                                |

    #+begin_src emacs-lisp :tangle inits/61-org-capture.el
    (setq org-capture-templates
          `(("g" "Inbox にエントリー" entry
             (file ,my/org-capture-inbox-file)
             "* TODO %?\n** Ready の定義\n   - Why?, Goal, How? が埋められていること\n   - How がある程度具体的に書かれていること\n** Why?\n** Goal\n** How?\n\t")
            ("m" "Memoにエントリー" entry
             (file+headline ,my/org-capture-memo-file "未分類")
             "*** %?\n\t")
            ("p" "Pointersにエントリー" entry
             (file+headline ,my/org-capture-pointers-file "Pointers")
             "** %?\n\t")
            ("i" "割り込みタスクにエントリー" entry ;; 参考: http://grugrut.hatenablog.jp/entry/2016/03/13/085417
             (file+headline ,my/org-capture-interrupted-file "Interrupted")
             "** %?\n\t" :clock-in t :clock-resume t)
            ("I" "障害リストにエントリー" entry
             (file+headline ,my/org-capture-impediments-file "Impediments")
             "** TODO %?\n\t")
            ("R" "2020ふりかえりにエントリー" entry
             (file+headline ,my/org-capture-2020-summary-file "Timeline")
             "** %?\n\t")
            ("s" "SQL にエントリー" entry
             (file+headline ,my/org-capture-sql-file "SQL")
             "** %?\n\t")
            ("S" "買い物リストエントリー" entry
             (file ,my/org-capture-shopping-file)
             "* TODO %?\n\t")
            ("b" "Blogネタにエントリー" entry
             (file+headline ,my/org-capture-memo-file "Blogネタ")
             "** %?\n\t")
            ("P" "Protocol" entry
             (file+headline ,my/org-capture-pointers-file "Pointers")
             "** %?\n   #+BEGIN_QUOTE\n   %i\n   #+END_QUOTE\n\n   Source: %u, [[%:link][%:description]]\n")
            ("L" "Protocol Link" entry
             (file+headline ,my/org-capture-pointers-file "Pointers")
             "** %:description\n   %:link\n   %?\n   Captured On: %U")
            ("c" "同期カレンダーにエントリー" entry
             (file+headline ,org-capture-ical-file "Schedule")
             "** TODO %?\n\t")))
    #+end_src

** org-clock
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-clock
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 6
   :END:
*** 概要
    org-clock 関係の設定をここにまとめている

*** clocktable の設定
    clocktable は report 表示などで使う表の設定。

    #+begin_src emacs-lisp :tangle inits/61-org-clock.el
    (setq org-clock-clocktable-default-properties
          '(:maxlevel 10
                     :lang "ja"
                     :scope agenda-with-archives
                     :block today
                     :level 4))
    #+end_src

    | 項目名   | 設定内容                                                                       |
    | maxlevel | ツリーの何段目まで表示するかの設定。隠さないで欲しいので大きい値を指定している |
    | lang     | 日本語ネイティブなので日本語で                                                 |
    | scope    | agenda とそのアーカイブもチェック。結構するアーカイブするので                  |
    | block    | 基本的に退勤前に実行するので today にしている                                  |
    | level    | 最低限表示するレベル。まあ適当                                                 |

*** hooks

**** clock-in 時の hook
     clock-in のタイミングで以下の処理をするための hook を用意している

     - 作業開始したことを Slack 通知する
     - TODO ステータスを DOING に変更

     #+begin_src emacs-lisp :tangle inits/61-org-clock.el
     (defun my/org-clock-in-hook ()
       (let* ((task org-clock-current-task)
              (message (format "開始: %s" task)))
         (my/notify-slack-times message))

       (if (org-clocking-p)
           (org-todo "DOING")))

     (setq org-clock-in-hook 'my/org-clock-in-hook)
     #+end_src

**** clock-out 時の hook
     clock-out のタイミングで以下の処理をするための hook を用意している

     - 作業終了を Slack 通知する
       - 中断でも終了扱いになるのでちょっと悩み中。DONE にしたことを hook する必要があるかも。

     #+begin_src emacs-lisp :tangle inits/61-org-clock.el
     (defun my/org-clock-out-hook ()
       (let* ((task org-clock-current-task)
              (message (format "終了: %s" task)))
         (my/notify-slack-times message)))

     (setq org-clock-out-hook 'my/org-clock-out-hook)
     #+end_src

*** org-pomodoro
    ポモドーロテクニックを使うために org-pomodoro を導入している

    #+begin_src emacs-lisp :tangle inits/61-org-clock.el
    (el-get-bundle org-pomodoro)
    #+end_src

    で、sound は結構邪魔なのでそれは鳴らないようにしている

    #+begin_src emacs-lisp :tangle inits/61-org-clock.el
    (setq org-pomodoro-play-sounds nil)
    #+end_src

    まあ普段これ起動してなくて使えてないんだけどw

** org-export
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-export
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 7
   :END:
*** 概要
    ここではファイルへの出力用の設定をまとめている。
    というか昔書いた設定をとりあえずここに押し込めている

*** footnote や制作者などを出力しない

    HTML で記事を吐き出す時に邪魔だったの非表示にしている記憶。
    随分昔に設定したのであんまり覚えてない。

    #+begin_src emacs-lisp :tangle inits/61-org-export.el
    ;; フッターなくしたり
    (setq org-export-html-footnotes-section "")
    (setq org-export-html-footnote-format "")
    (setq org-export-with-footnotes nil)
    (setq org-export-with-creator nil)
    (setq org-export-with-author nil)
    (setq org-html-validation-link nil)
    #+end_src

    以下は seesaa blog への吐き出し用設定なのだけど
    もう向こうを更新することはないので消しても良さそう

    #+begin_src emacs-lisp :tangle inits/61-org-export.el
    ;; for seesaa blog settings
    (setq org-export-author-info nil)
    (setq org-export-email-info nil)
    (setq org-export-creator-info nil)
    (setq org-export-time-stamp-file nil)
    (setq org-export-with-timestamps nil)
    (setq org-export-with-section-numbers nil)
    (setq org-export-with-sub-superscripts nil)
    #+end_src

*** Table of Contents 出力抑制
    これも自分の用途では要らなかったけど
    ファイル単位とかで制御しても良い気がする

    #+begin_src emacs-lisp :tangle inits/61-org-export.el
    (setq org-export-with-toc nil)
    #+end_src

*** サイト名の出力
    seesaa blog 用に記事を吐き出していた時は
    ページ全体ではなく記事部分だけ出力したかったので
    つまり h1 とかはもうテンプレート側に埋め込まれているので出す必要がなかった

    というわけで h1 でサイト名を出さないようにしている

    #+begin_src emacs-lisp :tangle inits/61-org-export.el
    (setq org-export-html-preamble nil)
    (setq org-html-preamble nil)
    #+end_src

*** bold, italic などの抑制
    アスタリスクで囲ったりスラッシュでアンダースコアで囲ったりすると
    b タグや i タグ、 u タグにする機能があるが
    HTML 4.01 Strict 信者だったこともあって抑制している。

    アスタリスクで囲む時、重要と思って囲むので、
    そういう意味では em とかで出る方が適切だと思う。
    #+begin_src emacs-lisp :tangle inits/61-org-export.el
    ;;; *bold* とか /italic/ とか _underline_ とかを<b>とかにしないようにする
    (setq org-export-with-emphasize nil)
    #+end_src

*** export のデフォルト出力言語は日本語
    まあ日本語しか書かないので……
    #+begin_src emacs-lisp :tangle inits/61-org-export.el
    (setq org-export-default-language "ja")
    #+end_src

** org-gcal                                                     :replacement:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-gcal
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 8
   :END:

*** 概要
    [[https://github.com/kidd/org-gcal.el][org-gcal]] は org-mode と Google Calendar を連携させるためのパッケージ。

    オリジナルは [[https://github.com/myuhe/org-gcal.el]] なのだけど
    今は fork されてるやつが MELPA にも登録されていて
    el-get のレシピもそっちを見ている。

*** インストール
    org-gcal が依存しているので [[https://elpa.gnu.org/packages/persist.html][parsist]] を入れている。

    #+begin_src emacs-lisp :tangle inits/61-org-gcal.el
    (el-get-bundle persist)
    #+end_src

    あとは当然 org-gcal 本体を入れないと動かない

    #+begin_src emacs-lisp :tangle inits/61-org-gcal.el
    (el-get-bundle org-gcal)
    #+end_src

*** 設定
    とりあえず require をしないといけない

    #+begin_src emacs-lisp :tangle inits/61-org-gcal.el
    (require 'org-gcal)
    #+end_src

    あとは設定ファイルは公開したくないので別ファイルに分けてる。

    #+begin_src emacs-lisp :tangle inits/61-org-gcal.el
    (my/load-config "my-org-gcal-config")
    #+end_src

    隠したい部分だけ .authinfo.gpg にでも分離したら公開できるようになるかもしれない。

*** その他
    [[https://github.com/misohena/gcal][gcal-org]] に乗り換えようかと思ってるが
    そっちの中身もよくわからないので躊躇している。
    自分の用途に合うのだろうか?

** org-ql                                                            :unused:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-ql
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 9
   :END:

*** 概要
    [[https://github.com/alphapapa/org-ql][org-ql]] は org-mode の情報を検索するためのパッケージ。
    柔軟な検索ができるようになるので
    貴方好みの検索で業務効率向上ができちゃうかも!?

*** インストール
    いつも透り el-get でインストールしている

    #+begin_src emacs-lisp :tangle inits/61-org-ql.el
    (el-get-bundle org-ql)
    #+end_src

*** その他
    一時期は色々試していたけど
    これを利用している org-super-agenda の方でなんとかするようにしたので
    もう直接は使ってないでござる

** org-refile
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-refile
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 10
   :END:
*** 概要
    org-refile は org-mode の1機能で
    org-mode のエントリを別のファイルなどに移動するための機能。
    実はコピーもできるけど、コピーは使ったことがない。
*** 設定
**** org ファイル内の階層を選択候補に入れる
     これを nil に設定することで
     ファイルの選択だけでなく、
     その中の PATH まで選択できるようになる
     #+begin_src emacs-lisp :tangle inits/61-org-refile.el
     (setq org-outline-path-complete-in-steps nil)
     #+end_src

**** refile ターゲットにファイル名を含める
     以下のように設定すると
     refile のターゲット候補としてファイル名とその中の PATH が表示されるようになる。

     #+begin_src emacs-lisp :tangle inits/61-org-refile.el
     (setq org-refile-use-outline-path 'file)
     #+end_src

     nil だと移動先候補PATHの最後の部分しか表示されないので
     どのファイルのどの場所かというのがわかりにくいのでこのように設定している。

**** refile 先の候補設定
     いくつかの org ファイルを使っているので
     ターゲットを以下のように設定している。

     #+begin_src emacs-lisp :tangle inits/61-org-refile.el
     (setq org-refile-targets `((,(concat org-directory "tasks/projects.org") :level . 1)
                                (,(concat org-directory "tasks/pointers.org") :level . 1)
                                (,(concat org-directory "work/scrum/impediments.org") :level . 3)
                                (,(concat org-directory "tasks/next-actions.org") :regexp . "today")
                                (,(concat org-directory "tasks/next-actions.org") :regexp . "C-")
                                (,(concat org-directory "private/2020_summary.org") :level . 2)
                                (,(concat org-directory "tasks/shopping.org") :level . 1)
                                (,(concat org-directory "tasks/someday.org") :level . 1)))
     #+end_src

     | ターゲット         | 目的                                                                                                   |
     | projects.org       | とりあえずその内やるタスクを放り込むところ。Work, Private の階層を設けているので ~:level 2~ としている |
     | pointers.org       | 読物を突っ込むところとしている。                                                                       |
     | impediments.org    | スクラムの妨害リストでも作ってみようかと思って用意したやつ。放置中                                     |
     | next-actions today | その日やる作業を放り込むところ。projects や inbox から移動する時に使う。                               |
     | next-actions C-    | いくつかの作業を各階層に分けて管理しようとしていたのでターゲット指定している。放置中。                 |
     | 2020_summary.org   | 2020 年の個人ふりかえり用。もう 2020 年は大昔なので当然もう使っていない                                |
     | shopping.org       | 買物リスト。時々思い出した時に放り込んでるが主に使うのは beorg からなので refile では使ってない        |
     | someday.org        | 遠い将来やるかもしれないリスト。放り込んで忘れるためにあるところ                                       |

** org-trello
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-trello
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 11
   :END:
*** 概要
    [[https://org-trello.github.io/][org-trello]] は org-mode を使って Trello のタスクを管理するためのパッケージ。

*** インストール
    いつも通り el-get でインストールしている

    #+begin_src emacs-lisp :tangle inits/61-org-trello.el
    (el-get-bundle org-trello)
    #+end_src

*** 同期するコマンドの用意
    バッファと Trello との同期する関数はあるのだけど
    コマンドにはなっていなかったので同期するためのコマンドを用意している

    #+begin_src emacs-lisp :tangle inits/61-org-trello.el
    (defun my/org-trello-fetch-buffer ()
      (interactive)
      (org-trello-sync-buffer t))
    #+end_src

*** キーバインド設定
    キーバインドは覚えられないので、
    いつも通り [[https://github.com/jerrypnz/major-mode-hydra.el#pretty-hydra][pretty-hydra]] で Hydra のやつを用意している

    #+begin_src emacs-lisp :tangle inits/61-org-trello.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define
        org-trello-hydra
        (:separator "-"
                    :color teal
                    :foreign-key warn
                    :title (concat (all-the-icons-faicon "trello") "  Org Trello commands")
                    :quit-key "q")
        ("Install"
         (("i" org-trello-install-board-metadata "Board metadata")
          ("I" org-trello-install-key-and-token "Setup"))

         "Sync"
         (("s" my/org-trello-fetch-buffer "← Trello")
          ("S" org-trello-sync-buffer "→ Trello"))

         "Other"
         (("V" org-trello-version "Version")))))
    #+end_src

    | Key | 効果                                 |
    |-----+--------------------------------------|
    | i   | Board のメタデータをインストールする |
    | I   | Key と トークンを設定する            |
    | s   | Trello の情報を引っ張ってくる        |
    | S   | Trello の情報を連携する              |
    | V   | バージョン情報を表示                 |

*** その他
    まだ試していないが
    https://github.com/gizmomogwai/org-kanban
    と組み合わせるとビジュアル的に見れて嬉しいとかあるかもしれない

** ox-hugo
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 12
   :EXPORT_FILE_NAME: ox-hugo
   :END:

*** 概要
    [[https://ox-hugo.scripter.co/][ox-hugo]] は org-mode から Hugo 用に md ファイルを出力できる便利なやつ。

    設定にもよるけど、1つのorgファイルに全部の記事を書いておいて
    ツリー毎に md ファイルが生成される、というのがデフォルトの動きなので
    1ファイルに詰めておくとファイルが分散しないで済んで良い。

    なお、この [[*Top][麦汁's Emacs Config]] も親サイトである [[https://mugijiru.github.io/.emacs.d/][麦汁三昧]] も
    ox-hugo を用いて構築している

*** インストール・読み込み
    いつも通り el-get でインスコしている。

    #+begin_src emacs-lisp :tangle inits/61-ox-hugo.el
    (el-get-bundle ox-hugo)
    #+end_src

    そして org-mode の ox が先に読まれてないといけないので
    with-eval-after-load を使って、ox が読まれてから require するようにしている。

    #+begin_src emacs-lisp :tangle inits/61-ox-hugo.el
    (with-eval-after-load 'ox
      (require 'ox-hugo))
    #+end_src

*** その他
    デフォルト設定でいい感じに使えているので
    特に設定変更は加えていない。

** org-mode 用の独自コマンド
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 13
   :EXPORT_FILE_NAME: org-commands
   :END:

*** 概要
    org-mode を使う上で、標準で用意されているコマンド以外に
    自分でも適当にコマンドを用意しているのでここにまとめている。

*** org-mode 用のファイルを作成するコマンド                          :unused:
    指定したフォルダに org-mode なファイルを作るためのコマンドを用意している。

    が、使ってないし意味をあまり感じないし消して良さそう。
    #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
    (setq my/org-document-dir (expand-file-name "~/Documents/org/"))
    (defun my/create-org-document ()
      (interactive)
      (find-file-other-window my/org-document-dir))
    #+end_src
*** 各ツリーの所要時間表示/非表示切替
    org-clock-display で各ツリーにおける org-clock で記録された所要時間が表示でき、
    org-clock-remove-overlays でそれを非表示にできるが、
    それを Toggle できるようにコマンド/関数を定義している。

    #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
    (defun my/org-clock-toggle-display ()
      "各ツリーの末尾に掛かった作業時間を表示/非表示を切り替えるコマンド"
      (interactive)
      (if org-clock-overlays
          (org-clock-remove-overlays)
        (org-clock-display)))
    #+end_src

*** org-todo-keywords から装飾を省いた文字列のリストを返す関数
    ivy で org-todo-keywords を選択可能にするために
    org-todo-keywords を加工してシンプルな文字列の配列にする関数を定義している。

    後述の ~my/org-todo~ で利用している

    #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
    (defun my/org-todo-keyword-strings ()
      "org-todo-keywords から装飾を省いた文字列のリストを返す関数"
      (let* ((keywords (cl-rest (cl-first org-todo-keywords)))
             (without-delimiter (cl-remove-if (lambda (elm) (string= "|" elm))
                                              keywords)))
        (mapcar (lambda (element)
                  (replace-regexp-in-string "\(.+\)" "" element))
                without-delimiter)))
    #+end_src

*** Ivy で TODO ステータスを選択し設定するコマンド
    標準の org-todo だと画面がガチャガチャ動くのが気になったので
    ivy で選択できるようにしている。

    #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
    (defun my/org-todo ()
      "ivy で TODO ステータスを切り替えるためのコマンド
    Hydra から利用するために定義している。"
      (interactive)
      (ivy-read "Org todo: "
                (my/org-todo-keyword-strings)
                :require-match t
                :sort nil
                :action (lambda (keyword)
                          (org-todo keyword))))
    #+end_src

*** タグ選択でそのタグがついたヘッドラインをリスト表示
    タグ毎に見たいことがありそうなので用意したやつ。
    存在を忘れてしまっていたのであまり使ってない。

    カスタムアジェンダを頑張る方が良い気もする

    #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
    (defun my/org-tags-view-only-todo ()
      (interactive)
      (org-tags-view t))
    #+end_src

*** calfw で選択したカレンダーを表示
    #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
    (defun my/open-calendar ()
      (interactive)
      (ivy-read "Calendar: "
                my/calendar-targets
                :require-match t
                :sort nil
                :action (lambda (target)
                          (progn
                            (setq cfw:org-icalendars `(,(concat org-directory target ".org")))
                            (cfw:open-org-calendar)))))
    #+end_src

*** レビュー依頼がされてる PR を取得してバッファに挿入
    review-requested-prs というコマンドで
    レビュー対象の PR を取得できるようにしているのでそれを Emacs から叩けるようにしているコマンド。

    #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
    (defun my/insert-review-requested-prs-as-string ()
      (interactive)
      (let* ((cmd (concat "review-requested-prs " my/github-organization " " my/github-repository))
             (response (shell-command-to-string cmd)))
        (insert response)))
    #+end_src

    実際のところこの Emacs のコマンドは使わず
    Terminal で review-requested-prs というコマンドを直で叩いているから
    何かしら工夫が必要そうである。

    あと、そもそも既にバッファにあるやつとマージしたいとか
    色々やりたいことはあるのでそれをなんとかしたいですね。

** org-mode 関係の keybinds
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-mode-keybinds
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 14
   :END:
*** 概要
    ここでは org-mode 関係のキーバインド設定を書いている。
    キーバインドというか Hydra の設定になっているが。

    Hydra を定義しておくことで様々なキーバインドを忘れることができるし
    左手小指を酷使しなくて済むので便利ということで Hydra で設定している。
*** major-mode-hydra
    major-mode-hydra で、org-mode のファイルを開いている時によく使いそうなコマンドのキーバインドを定義している

    #+begin_src emacs-lisp :tangle inits/69-org-mode-hydra.el
    (with-eval-after-load 'major-mode-hydra
      (major-mode-hydra-define org-mode (:separator "-" :quit-key "q" :title (concat (all-the-icons-fileicon "org") " Org commands"))
        ("Insert"
         (("l" org-insert-link                     "Link")
          ("T" org-insert-todo-heading             "Todo")
          ("h" org-insert-heading-respect-content  "Heading")
          ("P" org-set-property                    "Property")
          ("." org-time-stamp                      "Timestamp")
          ("!" org-time-stamp-inactive             "Timestamp(inactive)")
          ("S" org-insert-structure-template       "Snippet"))

         "Edit"
         (("a" org-archive-subtree  "Archive")
          ("r" org-refile           "Refile")
          ("Q" org-set-tags-command "Tag"))

         "View"
         (("N" org-toggle-narrow-to-subtree "Toggle Subtree")
          ("C" org-columns "Columns")
          ("D" my/org-clock-toggle-display  "Toggle Display"))

         "Task"
         (("s" org-schedule         "Schedule")
          ("d" org-deadline         "Deadline")
          ("t" my/org-todo          "Change state")
          ("c" org-toggle-checkbox  "Toggle checkbox"))

         "Clock"
         (("i" org-clock-in      "In")
          ("o" org-clock-out     "Out")
          ("E" org-set-effort    "Effort")
          ("R" org-clock-report  "Report")
          ("p" org-pomodoro      "Pomodoro"))

         "Babel"
         (("e" org-babel-confirm-evaluate "Eval")
          ("x" org-babel-tangle "Export SRC"))

         "Trello"
         (("K" org-trello-mode "On/Off" :toggle org-trello-mode)
          ("k" (if org-trello-mode
                   (org-trello-hydra/body)
                 (message "org-trello-mode is not enabled")) "Menu"))

         "Agenda"
         (("," org-cycle-agenda-files "Cycle")))))
    #+end_src

    | Key | 効果                                                 | 使用頻度                                                         |
    |-----+------------------------------------------------------+------------------------------------------------------------------|
    | l   | リンク挿入                                           | C-c C-l で手が馴染んでるのでたまに使う程度                       |
    | T   | TODO ヘッドライン挿入                                | なんかあまり使わない                                             |
    | h   | ヘッドライン挿入                                     | これも C-RET で慣れてるので使ってない                            |
    | P   | プロパティ設定                                       | よく使う                                                         |
    | .   | タイムスタンプ挿入                                   | 使ってない。使い慣れると便利かも                                 |
    | !   | アジェンダのエントリに反映されないタイムスタンプ挿入 | 使ってない。こっちも慣れると便利かも?                            |
    | S   | <s TAB とかのテンプレートの挿入                      | 使ってないなあ。慣れたら便利かも                                 |
    | a   | サブツリーをアーカイブ                               | よく使う                                                         |
    | r   | サブツリーの移動(refile)                             | よく使う                                                         |
    | Q   | タグ設定                                             | 時々使う。C-c C-q の方が使うか                                   |
    | N   | カーソル位置のサブツリーのみ表示                     | 使ってない。そのツリーだけに集中することがないのかも             |
    | C   | カラム表示。ツリー内の時間などを合計して表示できる   | たまに使う。                                                     |
    | D   | 各ツリーでそれぞれの掛かった時間を表示               | 使ってない。存在忘れてた                                         |
    | s   | スケジュール設定                                     | C-c C-s をよく使う                                               |
    | d   | 締め切り設定                                         | C-c C-d をよく使う                                               |
    | t   | TODO ステータス変更                                  | 同じ効果である C-c C-t と同じぐらい使う                          |
    | c   | チェックボックスの切替                               | 使うけどチェックボックスの行だけ使えればいいよなとか思う         |
    | i   | Clock In                                             | よく使う。標準的なキーバインドは忘れた。                         |
    | o   | Clock Out                                            | よく使う。標準的なキーバインドは忘れた。                         |
    | E   | 見積時間の挿入                                       | まあまあ使う。設定して予実差の確認はできてない                   |
    | R   | org-clock のレポート挿入                             | 一応毎日の稼動をこれで記録している                               |
    | p   | ポモドーロタイマーの開始                             | ポモドーロテクニック使えてないでござる                           |
    | e   | org-babel のコード片を実行                           | C-c C-c しか使ってない気がするお                                 |
    | x   | tangle でファイル出力                                | 最近多用している                                                 |
    | K   | org-trello-mode の切替                               | 最近使ってない。trello 連携してないバッファでは要らんしな        |
    | k   | org-trello-mode 用の Hydra 起動                      | 同上                                                             |
    | ,   | agenda ファイルの移動                                | いつも固定のファイルを見てるので使ってない。Cycle より直で飛ぶし |

*** Global な Hydra
    pretty-hydra を使って Global に使える org-mode のコマンドを叩けるようにしている

    #+begin_src emacs-lisp :tangle inits/69-org-mode-hydra.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define
        global-org-hydra
        (:separator "-"
                    :color teal
                    :foreign-key warn
                    :title (concat (all-the-icons-fileicon "org") " Global Org commands")
                    :quit-key "q")
        ("Main"
         (("a" org-agenda "Agenda")
          ("c" counsel-org-capture "Capture")
          ("l" org-store-link "Store link")
          ("t" my/org-tags-view-only-todo "Tagged Todo"))

         "Calendar"
         (("F" org-gcal-fetch "Fetch Calendar")
          ("C" my/open-calendar "Calendar"))

         "Clock"
         (("i" org-clock-in       "In")
          ("o" org-clock-out      "Out")
          ("r" org-clock-in-last  "Restart")
          ("x" org-clock-cancel   "Cancel")
          ("j" org-clock-goto     "Goto"))

         "Search"
         (("H" org-search-view "Heading"))

         "Pomodoro"
         (("p" org-pomodoro "Pomodoro")))))
    #+end_src

    | Key | 効果                                   | 使用頻度                                                                            |
    |-----+----------------------------------------+-------------------------------------------------------------------------------------|
    | a   | Agenda 選択                            | よく使う                                                                            |
    | c   | Capture                                | よく使う                                                                            |
    | l   | その場所へのリンクを保存               | 使ってない                                                                          |
    | t   | 選択したタグが付与された TODO のみ表示 | 使ってない。使うと便利かもなあ                                                      |
    | F   | Google Calendar の情報取得             | 平日は毎日使っている                                                                |
    | C   | カレンダーを calfw で開く              | 最近使ってない                                                                      |
    | i   | Clock In                               | 使ってないというか major-mode-hydra の方があれば良い                                |
    | o   | Clock Out                              | 使ってない。使ってもいい気がする                                                    |
    | r   | 最後に Clock In したやつを再開         | 使ってない。大体常に Clock しているから最後がいつも切り替わってるので使う機会がない |
    | x   | Clock Cancel                           | 作業は発生しているからキャンセルしないで普通に Clock out しているなあ               |
    | j   | 最後に Clock In したやつの場所に移動   | ちょくちょく使う。便利                                                              |
    | H   | Heading の検索                         | 使ってない。インクリメンタルに検索できればいいのに                                  |
    | p   | ポモドーロタイマー                     | これも major-mode-hydra にあれば十分かな                                            |

*** その他
    org-agenda 用の Hydra も用意しておいた方が良さそうだなというのが最近の実感。
    同じコマンド体系で操作できるようにしておいたら考えることが減って楽。
** 日報用の設定(旧)                                                    :unused:
   :PROPERTIES:
   :EXPORT_FILE_NAME: nippou
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 15
   :END:
*** 概要
    業務で日報を提出する必要があったので
    それっぽいのを作れるようにしていた。

    今では org-super-agenda を使っているので
    これは使ってないが、とりあえず載せておく。

*** シークレット設定の読み込み
    表に出したくない情報については別ファイルに分離して setq している。
    が、内容的に本名が露出する程度の情報ではある。

    #+begin_src emacs-lisp :tangle inits/62-nippou.el
    (my/load-config "my-nippou-config")
    #+end_src

    これの中で ~my/org-nippou-additional-files~ を定義していて
    そのファイル名に名前が含まれてるだけであった。

    ~me.org~ とでもしておけば解決しそう……。
*** 日報構築の対象となるファイルをリストアップする関数の定義
    ~~/Documenets/org/tasks~ に作業記録用ファイルなどを find コマンドを使ってリストアップする関数。

    #+begin_src emacs-lisp :tangle inits/62-nippou.el
    (defun my/org-nippou-files ()
      (let* ((dir my/org-tasks-directory)
             (cmd (format "find \"%s\" -name '*.org' -or -name '*.org_archive'" dir))
             (result (shell-command-to-string cmd))
             (file-names (split-string result "\n")))
        (-remove (lambda (file-name) (string= "" file-name))
                 file-names)))
    #+end_src

    org-agenda-files を使えば要らないっぽいけどね。
    agenda 全然使えてなかったらこんなことに。
*** 日報構築元ファイルを取得する関数の定義
    シークレット設定で定義した変数と
    上で定義した ~my/org-nippou-files~ を結合して
    1つのリストにするだけの関数を用意している。
    1つにまとまってる方が扱いやすいので。

    #+begin_src emacs-lisp :tangle inits/62-nippou.el
    (defun my/org-nippou-targets ()
          (-concat (my/org-nippou-files) my/org-nippou-additional-files))
    #+end_src
*** 日報を出力する関数
    上記の関数群で target になるファイルから
    日報用に TODO 項目を引っ張り出してくる関数を用意している。

    #+begin_src emacs-lisp :tangle inits/62-nippou.el
    (defun my/nippou-query ()
      (interactive)
      (org-ql-search
        (my/org-nippou-targets)
        "todo:TODO,DOING,WAIT,DONE ts:on=today"
        :title "日報"
        :super-groups '((:auto-group))))
    #+end_src

    その中では [[https://github.com/alphapapa/org-ql][org-ql]] の org-ql-search という関数を叩いている。
    org-ql は使いこなすと色々なことができそうではあるが
    それを内部で使ってる [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] を使えば十分な感じではある。

* テスト用ツール
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: testing-tool
  :END:
** テスト用ツール
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>10. </b>" :weight 10 :disableToc true
   :END:

   自動テストを実行するにあたり、追加インストールしているパッケージをここに載せている

   - [[*with-simulated-input][with-simulated-input]] :: 入力処理をシミュレートしてくれるパッケージ
   - [[*mocker.el][mocker.el]] :: Mock/Stub するためのパッケージ。まだ使ってない

** with-simulated-input
   :PROPERTIES:
   :EXPORT_FILE_NAME: with-simulated-input
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1
   :END:

*** 概要
    [[https://github.com/DarwinAwardWinner/with-simulated-input][with-simulated-input]] は入力処理をシミュレートするためのプラグイン。

    公式のドキュメントにあるように

    #+begin_src emacs-lisp
    (with-simulated-input
        "hello SPC world RET"
      (read-string "Say hello to the world: "))
    #+end_src

    を評価すると
    read-string に対して「hello world」を入力したことになるので
    echo エリアに「hello world」と表示される。

    これで何が嬉しいかというと
    Emacs Lisp でやっていることはインタラクティブな部分が大きいので
    そういった要素をテストできるようになる。

    具体的な使用例は [[*test:my/org-todo][test:my/org-todo]] で示す。

*** インストール
    el-get-bundle で GitHub からインストールしている

    #+begin_src emacs-lisp :tangle inits/99-with-simulated-input.el
    (el-get-bundle DarwinAwardWinner/with-simulated-input)
    #+end_src

** mocker.el                                                         :unused:
   :PROPERTIES:
   :EXPORT_FILE_NAME: mocker-el
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 2
   :END:

*** 概要
    [[https://github.com/sigma/mocker.el][mocker.el]] は Emacs Lisp のテストで使う Mock ライブラリ。

    使おうと思って導入したけど、
    自分のやりたいことはちょっと違ったので死蔵中

    便利そうなのでとりあえず置いといている。

*** インストール

    el-get で GitHub から取得している。

    #+begin_src emacs-lisp :tangle inits/99-mocker.el
    (el-get-bundle sigma/mocker.el)
    #+end_src

* テストコード
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: testing
  :END:
** テストコード
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>11. </b>" :weight 11 :disableToc true
   :END:

   一部のコマンドなどの設定を書き始めているので設けたセクション。

   暫定的にここに置いているが設定と近い方が良さそうなので
   いずれドキュメント内の位置を移動しそう。

   - [[*実行方法][実行方法]] :: とりあえず書かれているテストを動かす方法を書いている。
   - [[*run-tests][run-tests]] :: テスト全体を動かすための共通設定ファイルの説明
   - [[*my-org-commands-test][my-org-commands-test]] :: org-mode 用に自分が生やしたコマンドのテストファイルの解説

** 実行方法
   :PROPERTIES:
   :EXPORT_FILE_NAME: execution
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1
   :END:

   テストする時は以下のように叩いたら動く。

   #+begin_src sh
   emacs -Q --batch -l ~/.emacs.d/inits/test/*-test.el -l ~/.emacs.d/inits/test/run-tests.el
   #+end_src

   今まで ~.emacs.d~ にいる状態でしか叩いたことないので
   他の場所にいる時に実行しても大丈夫かはわからない。

   単体でテストしたい時は

   #+begin_example
   -l ~/.emacs.d/inits/test/*-test.el
   #+end_example

   の部分を書き換えたらいいんじゃないかな。やったことないけど。

** run-tests
   :PROPERTIES:
   :EXPORT_FILE_NAME: run-tests
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 2
   :END:

   読み込んだテストをまるっとテストするためのコードをとりあえず置いている。

   #+begin_src emacs-lisp :tangle inits/test/run-tests.el
  (if noninteractive
      (let ((ert-quiet t))
        (ert-run-tests-batch-and-exit)))
   #+end_src

   後述の [[*テストライブラリの読み込み][テストライブラリの読み込み]] などはここで担うべきかとも考えるが
   今はテストファイルが1つしかないので気にしないことにする。

** my-org-commands-test
   :PROPERTIES:
   :EXPORT_FILE_NAME: my-org-commands-test
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 3
   :END:

   org-mode 用に定義したコマンドや関数のテストコード

*** Setup
**** テストライブラリの読み込み

     標準でついてくる ert を採用しているのでそれを読み込んでいる。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     (require 'ert)
     #+end_src

**** el-get の設定の読み込み

     プラグイン管理には el-get を利用しているので
     その設定ファイルを読み込んでいる。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     ;; プラグイン読み込みの前準備
     (load (expand-file-name (concat user-emacs-directory "/init-el-get.el")))
     #+end_src

**** テスト補助のプラグイン読み込み
***** with-simulated-input

      上で説明しているが、
      入力をシミュレートするためのプラグインをテストで利用しているので
      ここで読み込んでいる。

      #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
      ;; 入力シミュレート用のプラグイン
      (load (expand-file-name (concat user-emacs-directory "/inits/99-with-simulated-input")))
      #+end_src

**** 依存プラグインの読み込み                                   :improvement:

     テスト対象が依存しているプラグインを読み込んでいる。
     本来は init.el などの設定ファイルを全部読み込んだ状態でテストをした方が良さそうだが
     現状だとその状態で GitHub Actions で動かせる方法がわからないので
     一旦個別に読み込むようにしている。

***** swiper

      ivy-read を使った機能のテストをするので読み込んでいる。

      #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
      (el-get-bundle abo-abo/swiper)
      #+end_src

**** テスト対象の読み込み

     テストしたいファイルをここで読んでる。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     ;; テスト対象の読み込み
     (load (expand-file-name (concat user-emacs-directory "/inits/68-my-org-commands.el")))
     #+end_src

*** ert-deftest
**** test:my/org-todo-keyword-strings

     ~org-todo-keywords~ から "|" という区切りを除外したり
     "(s)" とかのような高速アクセスのためのキーワードは
     ivy で選択する時には邪魔なので除外したい、ということを表現したテスト。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     (ert-deftest test:my/org-todo-keyword-strings ()
       "Test of `my/org-todo-keyword-strings'."
       (let ((org-todo-keywords '((sequence "TODO" "DOING(!)" "WAIT" "|" "DONE(!)" "SOMEDAY(s)"))))
         (should (equal '("TODO" "DOING" "WAIT" "DONE" "SOMEDAY")
                        (my/org-todo-keyword-strings)))))
     #+end_src

     なお、ここでテストしている関数では
     TODO キーワードを ivy で扱いやすいように整えているだけで
     実際の選択は別の関数が担っている

**** test:my/org-todo

     org-todo を ivy で選択する関数のテストを書いている。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     (ert-deftest test:my/org-todo ()
       "Test of `my/org-todo'."
       (let ((org-todo-keywords '((sequence "TODO" "DOING(!)" "WAIT" "|" "DONE(!)" "SOMEDAY(s)")))
             (result))
         ;; org-mode を読まずに済むように org-todo を差し替えてテストしている
         (cl-letf (((symbol-function 'org-todo)
                    (lambda (keyword)
                      (setq result keyword))))
           (with-simulated-input "DOI RET" (my/org-todo))
           (should (equal "DOING" result)))))
     #+end_src

     ポイントは cl-letf を使って、内部で叩いている関数 ~org-todo~ を一時的に

     #+begin_src emacs-lisp
     (lambda (keyword)
       (setq result keyword))
     #+end_src

     に差し替えているところ。

     org-mode を呼び出さずに代わりの関数に差し替えているので
     テストがしやすくなっている。Stub 的なやつかな。

     何度も使うならこの差し替え処理自体をテストヘルパーにしても良いかもしれない。

     また ivy で選択するので with-simulated-input を使って入力操作を代替している。便利。

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:

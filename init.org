#+TODO: TODO(t) | DONE(o)
#+HUGO_BASE_DIR: ./hugo/
#+HUGO_SECTION: ./
#+title: 麦汁三昧
#+author: mugijiru
#+chapter: true
#+toc: headlines 2
#+HUGO_LEVEL_OFFSET: 1

* Top
  :PROPERTIES:
  :END:

** 麦汁's Emacs Config
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :END:

   ここは @mugijiru の Emacs の設定ファイルの一部を解説しているページです。

   https://github.com/mugijiru/.emacs.d/blob/master/init.org から
   ox-hugo を使ってWebサイトに仕立て上げています。

*** 動作確認環境

    以下の環境で使用しています。が、動作を保証するものではありません。

    - macOS :: [[https://github.com/railwaycat/homebrew-emacsmacport][emacsmacport]] で用意されている Emacs
    - Ubuntu 20.04 LTS :: apt で手に入る Emacs 26.3

*** 注意点

    まだ全ての設定を init.org に記載できていない上に
    init.org からの出力設定も済ませていないので
    極一部の設定ファイルのみの解説となります。

* 基本設定
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: basics
  :END:

** 基本設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>1. </b>" :weight 1 :disableToc true
   :END:
   #+TOC: nil
   #+OPTIONS: toc:nil

   Emacs の基本動作に関わる部分をここでは設定している

   - [[*exec-path][exec-path]] :: PATH などの環境変数を shell と合わせる設定
   - [[*auto-save][auto-save]] :: 編集中状態の自動保存や編集前の状態のバックアップに関する設定
   - [[*load-path][load-path]] :: Emacs Lisp が読み込める path の設定
   - [[*savehist][savehist]] :: ミニバッファの履歴などを保存してくれる機能。
   - [[*ガベージコレクション][ガベージコレクション]] :: メモリの開放関係の設定

** auto-save                                                    :replacement:
   :PROPERTIES:
   :EXPORT_FILE_NAME: auto-save
   :END:

*** 概要

    編集中状態の自動保存や、編集前や保存直後の状態のバックアップに関する設定をここでは書いている。

    Emacs ではデフォルトでも
    編集中ファイルの自動保存や、編集前の状態の自動バックアップもしてくれるが
    開いているファイルとは違う場所に保存したりすることで、より便利になるのでいくつかの設定を入れている。

*** 設定

**** 自動保存設定

     デフォルトだと ~#hoge.txt#~ みたいなファイル名で作られる、自動保存に関する設定。

     まあこの自動保存されてやつを活用できてる気がしないのでこの自動保存自体不要な気はしているが、
     とりあえず場所を移動して邪魔にはならないようにはしている。

***** 自動保存のタイミング

      自動保存のタイミングは

      - auto-save-timeout
      - auto-save-interval

      で制御されている。

      まず auto-save-timeout で設定した秒数が経過すると再度自動保存が実行される。

      これがデフォルトだと 30 秒なのだが、ちょっと長いのでその半分の 15 秒で保存されるように設定を変更している。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq auto-save-timeout 15)
      #+end_src

      また auto-save-interval で設定した回数のキーイベントが発生すると再度自動保存を実行する。

      これもデフォルトだと 300 と結構なキーを叩く必要があるので 60 回としている。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq auto-save-interval 60)
      #+end_src

***** 自動保存先を変更する

      自動保存はそのままだと弄ってるファイルの場所に作られる。
      が、これは以下のようにすると ~~/.emacs.d/backup/~ 一応変更可能。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/backup/" t)))
      #+end_src

      ただ、デフォルト値が

      #+begin_src emacs-lisp
      (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t))
      #+end_src

      なので ~.*~ にしているのは乱暴そうな気がしている。

      というわけで
      https://masutaka.net/chalow/2014-05-11-1.html
      に書かれているのを真似して

      #+begin_src emacs-lisp
      (("~/\\([^/]*/\\)*\\([^/]*\\)$" "~/.emacs.d/backup/\\2" t))
      #+end_src

      とでもした方が良いかもしれない。

**** バックアップファイル

     自動保存とは別に、
     ファイルを開いた時点のバージョンや保存した時点のバージョンを取っておいてくれる自動バックアップ機能もあるので
     その設定も弄っている。

***** バックアップ先のフォルダ指定

      デフォルトでは編集しているファイルと同じフォルダにバックアップファイルを作成するようになっている。

      だけど、こいつが結構邪魔なので
      バックアップファイルは ~~/.emacs.d/backup/~ に全部保存するようにしている。

      また、普段 tramp は使っていないが
      何かの拍子で使った時にバックアップが取られると邪魔そうなのでそれは保存しないようにしている。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq backup-directory-alist '((".*" . "~/.emacs.d/backup")
                                     (,tramp-file-name-regexp . nil)))
      #+end_src

***** バージョン管理

      バックアップにはバージョン管理機能もある。が、標準では無効化されている。

      とりあえず古いバージョンを引っ張り出せると便利かもと思って有効化している。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq version-control t)
      #+end_src

      が、実際それを使ったことはない。。。

      また、古過ぎるバックアップファイルは要らないので、
      自動的に消されるように設定している。

      #+begin_src emacs-lisp :tangle inits/10-auto-save.el
      (setq delete-old-versions t)
      #+end_src

**** その他

     Emacs の自動保存などについては
     http://yohshiy.blog.fc2.com/blog-entry-319.html
     によくまとめられているので、いずれその内容を設定に反映させたい。

     また [[https://github.com/bbatsov/super-save][super-save]] というやつを使って実ファイルに自動保存したりしたらこれも不要になると思われる。

** exec-path
   :PROPERTIES:
   :EXPORT_FILE_NAME: exec-path
   :END:

*** 概要
    Emacs は通常最小限の環境変数しか利用しないようになっている。

    が、それだと普段使う上で「ああ、このコマンドが使えなくてもどかしい……!」
    と感じてしまう。

    そこで [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] というのを使って
    Emacs が見える PATH 環境変数をシェルが見てる PATH 環境変数と揃うようにしている。

*** インストール

    いつも通り el-get からインストールしている

    #+begin_src emacs-lisp :tangle inits/00-exec-path.el
    (el-get-bundle exec-path-from-shell)
    #+end_src

*** 有効化                                                      :improvement:

    理由は忘れたが Mac の環境でのみ有効化している。
    その内 Linux 環境でも有効化を試みた方が良さそう

    #+begin_src emacs-lisp :tangle inits/00-exec-path.el
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
    #+end_src

    なお、これでシェルと共通の環境変数が使われるようになるのは
    [[https://github.com/purcell/exec-path-from-shell/blob/bf4bdc8b8911e7a2c04e624b9a343164c3878282/exec-path-from-shell.el#L85-L89][デフォルトでは ~PATH~ と ~MANPATH~ のみである]]

*** その他

    なぜか以下のようなコメントを書いていた。
    普段使っている zsh で持ってる PATH は使わないのだろうか? :thinking_face:

    #+begin_src emacs-lisp
    ;; for exec path
    ;; use .bashrc setted path
    #+end_src

** load-path
   :PROPERTIES:
   :EXPORT_FILE_NAME: load-path
   :END:

*** 概要

    ~load-path~ は Emacs の設定でも重要な項目で
    このリストに追加されている path は ~load~ または ~require~ する際に走査される path となっている。

    即ち load-path を通しておけば、そこに置いている emacs lisp のファイルは簡単に読み出せるようになる。

    なお package-install や el-get を使っておけば基本的に自分で load-path を通す必要はない。

*** 秘匿情報を入れてるフォルダを読み込み可能にする

    パスワードなどの秘匿情報を持っている部分は ~~/.emacs.d/secret~ というフォルダで管理している。
    そのためここに入ってる emacs lisp のファイルも読み込めるように load-path に追加している。

    #+begin_src emacs-lisp :tangle inits/00-load-path.el
    (add-to-list 'load-path (expand-file-name "~/.emacs.d/secret"))
    #+end_src

*** my/load-config                                              :replacement:

    ~~/.emacs.d/secret~ は個人マシンか会社マシンかによって置いてるデータが異なったりするため
    もしもファイルがなくてもエラーにならないような方法で load する方法が必要だった。

    というわけでファイルがなかったら読み込まずにメッセージを出力して終了するような関数を用意している。

    #+begin_src emacs-lisp :tangle inits/00-load-path.el
    (defun my/load-config (file)
      (condition-case nil
          (load file)
        (file-missing (message "Load error: %s" file))))
    #+end_src

    ただ、これって結局

    #+begin_src emacs-lisp
    (load file nil t)
    #+end_src

    で十分な気もするので、置き換えを検討した方が良さそう。

** savehist
   :PROPERTIES:
   :EXPORT_FILE_NAME: savehist
   :END:

*** 概要

    Emacs 標準でついている、ミニバッファの履歴などを保存してくれる機能。

*** 有効化

    標準でついているので以下のようにするだけで有効化可能。

    #+begin_src emacs-lisp :tangle inits/00-savehist.el
    (savehist-mode 1)
    #+end_src

*** 設定                                                        :improvement:

    標準で保存されるもの以外だと kill-ring だけを保存対象にしている。
    これで Emacs を終了させても kill-ring は残るようになるはず。
    だけど最近使えてない気がするな……。検証が必要そう。

    #+begin_src emacs-lisp :tangle inits/00-savehist.el
    (setq savehist-additional-variables '(kill-ring))
    #+end_src

    他にも有効にしたら便利そうなのがあれば追加したい。
    が、ぱっとは思い付かない。

** ガベージコレクション
   :PROPERTIES:
   :EXPORT_FILE_NAME: gcmh
   :END:

*** 概要
    ガベージコレクションには gcmh というのを利用してみている。

    https://github.com/emacsmirror/gcmh

    普段は GC を控えめにしながら
    操作してない間に GC が走るような作りになっている。便利そう。

*** インストール
    #+begin_src emacs-lisp :tangle inits/00-gc.el
    (el-get-bundle gcmh)
    #+end_src

    これだけで有効化もされる。

*** その他

    以前の設定も折り畳んで残しておく

    #+begin_details
    #+begin_summary
    使わなくなったコード
    #+end_summary
    gcmh を入れる前に設定していたコード。
    gcmh を入れたらこれよりもいい感じに対応してくれそうなので入れ替えた。

    #+begin_src emacs-lisp
    ;; https://gist.github.com/garaemon/8851900ef27d8cb28200ac8d92ebacdf
    ;; Increase threshold to fire garbage collection
    (setq gc-cons-threshold 1073741824)
    (setq garbage-collection-messages t)

    ;; Run GC every 60 seconds if emacs is idle.
    (run-with-idle-timer 60.0 t #'garbage-collect)
    #+end_src
    #+end_details

* キーバインド
   :PROPERTIES:
   :EXPORT_HUGO_SECTION: keybinds
   :END:
** キーバインド
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>2. </b>" :weight 2 :disableToc true
   :END:

   ここでは全体に関わるキーバインド系の設定を記載している。

   - [[*sticky-control][sticky-control]] :: Control の入力を sticky にしてくれるやつ

** sticky-control
   :PROPERTIES:
   :EXPORT_FILE_NAME: sticky-control
   :END:

*** 概要
    指定したキーを2回叩いたら
    Control が押されてるような状態にしてくれるプラグイン。

    その2回の間隔はデフォルトだと 0.5 秒以内となっている。
    そのため、そのキーを押して 0.5 秒が経過したら、普通にそのキーが押されたことになる

    さらに ~sticky-control-shortcuts~ に指定されてる一部のキーについては
    sticky 用のキーを押した直後に shortcuts のキーを押すと
    Control を押している状態でそのキーを押したことになる。

    例えば私は ~,~ を sticky 用のキーにしていて
    shortcuts に ~c~ を入れているので
    ~,c~ と素早くタイプをすればそれだけで ~C-c~ が押された状態になる。

*** インストール

    まずは el-get-bundle でインストール。

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (el-get-bundle sticky-control)
    #+end_src

    ちなみにレシピは公式ではなかったので
    とりあえず自分の環境で使えるように自作レシピを置いている。

    #+begin_src emacs-lisp :tangle recipes/sticky-control.rcp
    (:name sticky-control
           :description "save your left little finger"
           :type http
           :url "https://raw.githubusercontent.com/martialboniou/emacs-revival/master/sticky-control.el"
           :features "sticky-control")
    #+end_src

    元々は http://www.cs.toronto.edu/~ryanjohn/sticky-control.el にあったのだけど
    最近そこからは取得できなくなったので
    https://github.com/martialboniou/emacs-revival/blob/master/sticky-control.el
    から取得して利用している

*** 設定

    まずは「2回叩いたら Control を押している状態になる」キーを指定する。

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (sticky-control-set-key 'sticky-control-key ?,)
    #+end_src

    私は ~,~ を sticky-control のキーにしているのでこの指定。

    そして次に ~sticky-control-shortuts~ の指定。
    ここに指定しておくと、
    例えば ~,c~ と素早くタイプすることで ~C-c~ が入力された状態とすることができる。

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (setq sticky-control-shortcuts
          '((?c . "\C-c")
            (?g . "\C-g")
            (?k . "\C-k")
            (?a . "\C-a")
            (?e . "\C-e")
            (?n . "\C-n")
            (?o . "\C-o")
            (?p . "\C-p")
            (?j . "\C-j")
            (?f . "\C-f")
            (?b . "\C-b")
            (?x . "\C-x")
            (?r . "\C-r")
            (?s . "\C-s")))
    #+end_src

    結構な数を指定しているけど、普段そんなに使えているわけでもない。
    まあ、大体 Control を押しながら使いそうなところは押さえてあるので
    何も考えずとも使えるようにしてある。

*** 有効化
    最後に有効化

    #+begin_src emacs-lisp :tangle inits/80-sticky-control.el
    (sticky-control-mode)
    #+end_src

* ファイル編集
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: editing
  :END:

** ファイル編集
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>3. </b>" :weight 3 :disableToc true
   :END:

   ここにはファイル編集系の設定をまとめている

   - [[*auto-insert][auto-insert]] :: ファイル新規作成時にテンプレートを挿入する機能

** auto-insert
   :PROPERTIES:
   :EXPORT_FILE_NAME: auto-insert
   :END:

*** 概要
    auto-insert はファイルを新規作成した時に
    ファイル名に応じたテンプレートを挿入する機能。

    Emacs が標準で持ってるライブラリなのでインストールは不要

*** 設定

    Emacs の設定は .emacs.d の中に閉じ込めたいので
    auto-insert のテンプレートも ~~/.emacs.d/insert~ に閉じ込める設定にしている。

    #+begin_src emacs-lisp :tangle inits/20-auto-insert.el
    (custom-set-variables '(auto-insert-directory "~/.emacs.d/insert/"))
    #+end_src

*** 有効化

    あとは単に有効化している。

    #+begin_src emacs-lisp :tangle inits/20-auto-insert.el
    (auto-insert-mode 1)
    #+end_src

*** 他の設定

    ファイル名を正規表現でマッチさせてテンプレートが選択されるので
    各言語やフレームワーク毎に設定を入れることにしている。

    実際は今のところ inits/41-vue.el でのみ追加設定を入れている。

* UI
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: ui
  :END:
** UI
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>4. </b>" :weight 4 :disableToc true
   :END:

   ここでは Emacs の UI を変更するようなものを載せている

   - [[*all-the-icons][all-the-icons]] :: Emacs で様々なアイコンを表示できるようにするやつ
   - [[*helm][helm]] :: 絞り込みインターフェースを提供するやつ
   - [[*helm-posframe][helm-posframe]] :: Helm を posframe で使えるようにするやつ
   - [[*highlight-indent-guides][highlight-indent-guides]] :: インデント毎にラインを引いたりして見易くしてくれるやつ
   - [[*Neotree][Neotree]] :: フォルダ構造を IDE みたいにツリー表示するやつ
   - [[*toolbar][toolbar]] :: Emacs 標準のボタンなどの UI 部分の設定
   - [[*uniquify][uniquify]] :: 同名ファイルを開いている時にどこのファイルかまで表示してくれるやつ
   - [[*zoom][zoom]] :: フォーカスが当たってるウインドウを大きく表示してくれるやつ

** all-the-icons
   :PROPERTIES:
   :EXPORT_FILE_NAME: all-the-icons
   :END:

*** 概要

    [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] は Emacs で様々なアイコンを表示できるようにして華やかにしてくれるパッケージです。
    [[*Neotree][Neotree]] などでも対応していてアイコンでファイルの種類が表示されるようになってモダンな雰囲気が出ます。

*** インストール                                                :improvement:

    いつも通り el-get-bundle で入れている。
    明示的に require している理由は忘れました。

    #+begin_src emacs-lisp :tangle inits/20-all-the-icons.el
    (el-get-bundle all-the-icons)
    (require 'all-the-icons)
    #+end_src

*** フォントのインストール

    以下のコマンドを叩くことでフォントをインストールすることができる。
    all-the-icons のインストール直後に叩いておいたら普段は叩かなくて良いはず。

    #+begin_src emacs-lisp
    (all-the-icons-install-fonts)
    #+end_src

    all-the-icons の更新後は叩いた方がいいかもしれない

*** キーバインド                                                :improvement:

    キーバインドは覚えられないし、使えるキーも大分埋まってるので、
    pretty-hydra を使って all-the-icons 用の Hydra を用意している。

    #+begin_src emacs-lisp :tangle inits/20-all-the-icons.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define all-the-icons-hydra (:separator "-" :title "All the icons" :exit t :quit-key "q")
        ("Insert"
         (("a" all-the-icons-insert-alltheicon "All the icons")
          ("f" all-the-icons-insert-fileicon   "File icons")
          ("F" all-the-icons-insert-faicons    "FontAwesome")
          ("m" all-the-icons-insert-material   "Material")
          ("o" all-the-icons-insert-octicon    "Octicon")
          ("w" all-the-icons-insert-wicon      "Weather")
          ("*" all-the-icons-insert            "All")))))
    #+end_src

    |-----+----------------------------------------------------|
    | Key | 効果                                               |
    |-----+----------------------------------------------------|
    | a   | all-the-icons で追加されてるアイコンを検索して挿入 |
    | f   | ファイルアイコンを検索して挿入                     |
    | F   | FontAwesome アイコンを検索して挿入                 |
    | m   | Material アイコンを検索して挿入                    |
    | o   | Octicon のアイコンを検索して挿入                   |
    | w   | 天気アイコンを検索して挿入                         |
    | *   | 全てのアイコンを検索して挿入                       |
    |-----+----------------------------------------------------|

    フォントのインストールコマンドもここに収めてしまうのが良さそうな気がする

** highlight-indent-guides
   :PROPERTIES:
   :EXPORT_FILE_NAME: highlight-indent-guides
   :END:

*** 概要

    [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] はインデント毎にラインを引いたりして見易くしてくれるパッケージ。
    通常のプログラムを書く時にも便利だけど、
    YAML などのインデントがそのまま構造になるような言語を弄る時にとても便利。

*** インストール

    これもいつも通り el-get でインストールしている。
    また GitHub にあるので、そこから直接インストールしている。

    #+begin_src emacs-lisp :tangle inits/30-highlight-indent-guides.el
    (el-get-bundle DarthFennec/highlight-indent-guides)
    #+end_src

*** 設定                                                        :improvement:

    今いる行がどのインデントにいるのかをわかりやすくするために
    responsive モードを有効にしている。

    #+begin_src emacs-lisp :tangle inits/30-highlight-indent-guides.el
    (setq highlight-indent-guides-responsive "stack")
    #+end_src

    defcustom で定義されてる変数なので
    custom-set-variables で設定した方がいいかもしれない。

** helm
   :PROPERTIES:
   :EXPORT_FILE_NAME: helm
   :END:

*** 概要

    [[https://github.com/emacs-helm/helm][helm]] は anything.el の後継であり、
    インクリメンタルに候補の絞り込みをしたりする UI を提供する便利なパッケージ。

    [[https://github.com/peco/peco][peco]] とか [[https://github.com/junegunn/fzf][fzf]] とかと似ているっちゃ似ているかな? fzf 使ったことないけど。

    一時期開発が止まってるようだったけど最近(2021年)はまた更新が活発になっている。

    ただ、麦汁さんは ivy に乗り換えようとしているので helm の設定は頑張っていない。
    helm-for-files が便利なのでまだ捨てられてないけど……。

*** インストール                                                :improvement:

    helm で使いたい拡張として
    [[https://github.com/emacs-helm/helm-descbinds][helm-descbinds]] と [[https://github.com/emacsorphanage/helm-ag][helm-ag]] というのがあるのでそれらも同時に入れている。

    #+begin_src emacs-lisp :tangle inits/20-helm.el
    (el-get-bundle helm)
    (el-get-bundle helm-descbinds)
    (el-get-bundle helm-ag)
    #+end_src

    ただ descbinds は counsel-descbinds に置き換えたし
    helm-ag ももう使ってない気がする

*** 設定

    オススメの設定が helm に同梱されている helm-config に入ってるので
    まずはそれを読み込んでいる。

    #+begin_src emacs-lisp :tangle inits/20-helm.el
    (require 'helm-config)
    #+end_src

    また helm-descbinds を使えるように有効にしている。
    けど、上にも書いたけどもう counsel-descbinds に置き換えちゃったのよね……。

    #+begin_src emacs-lisp :tangle inits/20-helm.el
    (helm-descbinds-mode)
    #+end_src

    あとは helm-migemo-mode というのを有効にしている。
    これがあると helm で検索する時に migemo れて便利。

    #+begin_src emacs-lisp :tangle inits/20-helm.el
    (helm-migemo-mode 1)
    #+end_src

    ivy の方でも migemo 対応したいけどまだできてない……。

*** その他

    helm 系の設定は他の設定にも色々影響も大きそうなので
    読み込み順は結構早いタイミングにしている(init-loader で 20 を prefix にしている)

** helm-posframe
   :PROPERTIES:
   :EXPORT_FILE_NAME: helm-posframe
   :END:

*** 概要

    [[https://github.com/tumashu/helm-posframe][helm-posframe]] は [[https://github.com/emacs-helm/helm][helm]] の拡張で
    Helm のバッファの表示を [[https://github.com/tumashu/posframe][posframe]] を使うようにしてくれるやつ。

    実は helm 本体の方でも posframe 対応しているのであまり使う必要もなさそうなので
    いずれ外すかもしれない。

    ただ確か本体の方の挙動が気に入らなかったような気はする。

*** インストール

    いつも通り el-get でインストール。
    GitHub にあるのでそれを取得するようにしている。

    #+begin_src emacs-lisp :tangle inits/21-helm-posframe.el
    (el-get-bundle tumashu/helm-posframe)
    #+end_src

*** 有効化

    #+begin_src emacs-lisp :tangle inits/21-helm-posframe.el
    (helm-posframe-enable)
    #+end_src

** Neotree                                                      :replacement:
   :PROPERTIES:
   :EXPORT_FILE_NAME: neotree
   :END:

*** 概要
    [[https://github.com/jaypei/emacs-neotree][Neotree]] は Emacs でフォルダのツリー表示ができるやつ。
    メンテは活発じゃないようなので、その内乗り換えたい。

*** レシピ

    Neotree でメンテされているのは dev ブランチだけど
    el-get の公式のレシピでは master ブランチを見ているので
    自前で recipe を用意してそれを使っている。

    #+begin_src emacs-lisp :tangle recipes/emacs-neotree-dev.rcp
    (:name emacs-neotree-dev
           :website "https://github.com/jaypei/emacs-neotree"
           :description "An Emacs tree plugin like NerdTree for Vim."
           :type github
           :branch "dev"
           :pkgname "jaypei/emacs-neotree")
    #+end_src

*** インストール

    上に書いたレシピを使ってインストールしている。

    #+begin_src emacs-lisp :tangle inits/40-neotree.el
    (el-get-bundle emacs-neotree-dev)
    #+end_src

*** 使わなくなったコード

    元々設定していたが、
    counsel-projectile を使ってると
    projectile-switch-project-action を設定していても反映されず
    意味がないのに気付いたので使わなくなった

    https://github.com/mugijiru/.emacs.d/pull/183/files#r541843206

    #+begin_src emacs-lisp
    (setq projectile-switch-project-action 'neotree-projectile-action)
    #+end_src

*** テーマの設定

    GUI で起動している時はアイコン表示し
    そうでない場合は ▾ とかで表示する

    #+begin_src emacs-lisp :tangle inits/40-neotree.el
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    #+end_src

    のだけど、
    実際に今使ってるやつだともっとグラフィカルな表示なので
    all-the-icons の設定で上書きしている気がするので要確認

*** major-mode-hydra

    いちいちキーバインドを覚えてられないので
    [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]] を使って主要なキーバインドは [[https://github.com/abo-abo/hydra][hydra]] で使えるようにしている。

    とはいえ、この文書を書く前日ぐらいに設定しているのでまだ使い慣れてないというか、ほとんど使えてない。

    #+begin_src emacs-lisp :tangle inits/40-neotree.el
    (with-eval-after-load 'major-mode-hydra
      (major-mode-hydra-define neotree-mode (:separator "-" :quit-key "q" :title (concat (all-the-icons-octicon "list-unordered") " Neotree"))
        ("Nav"
         (("u"   neotree-select-up-node   "Up")
          ("g"   neotree-refresh          "Refresh")
          ("Q"   neotree-hide             "Hide"))

         "File"
         (("a"   neo-open-file-ace-window "Ace")
          ("N"   neotree-create-node      "Create")
          ("R"   neotree-rename-node      "Rename")
          ("C"   neotree-copy-node        "Copy")
          ("D"   neotree-delete-node      "Delete")
          ("SPC" neotree-quick-look       "Look")
          ;; ("d" neo-open-dired "Dired")
          ;; ("O" neo-open-dir-recursive   "Recursive")
          )
         "Toggle"
         (("z" neotree-stretch-toggle     "Size"        :toggle (not (neo-window--minimize-p)))
          ("h" neotree-hidden-file-toggle "Hidden file" :toggle neo-buffer--show-hidden-file-p)))))
    #+end_src

**** キーバインド
***** ナビゲーション
      |-----+------------------|
      | Key | 効果             |
      |-----+------------------|
      | u   | 上のノードに移動 |
      | g   | 再描画           |
      | Q   | Neotree を隠す   |
      |-----+------------------|

***** ファイル操作

      |-----+--------------------------------------------------------------|
      | Key | 効果                                                         |
      |-----+--------------------------------------------------------------|
      | a   | ファイルを開く。その際に ace-window で開く window を指定する |
      | N   | 新しいノードを作る                                           |
      | R   | ノードの名前を変える                                         |
      | C   | ノードのコピー                                               |
      | D   | ノードの削除                                                 |
      | SPC | クイックルック                                               |
      |-----+--------------------------------------------------------------|

***** Toggle

      |-----+--------------------------------------------|
      | Key | 効果                                       |
      |-----+--------------------------------------------|
      | z   | Neotree のサイズを大きくしたり小さくしたり |
      | h   | 隠しファイルを表示したり隠したり           |
      |-----+--------------------------------------------|
** toolbar
   :PROPERTIES:
   :EXPORT_FILE_NAME: toolbar
   :END:

*** 概要

    Emacs 標準の toolbar の設定。
    麦汁さんは使わないし幅を取るので隠す派。

*** 設定

    単に無効にして隠している

    #+begin_src emacs-lisp :tangle inits/90-toolbar.el
    (tool-bar-mode -1)
    #+end_src

** uniquify

*** 概要
    同じ名前のファイルを開いている時に
    祖先のディレクトリ名を表示してくれてどこのファイルかわかりやすくしてくれるやつ。

    すぐ親とかも同名でも、名前が違うところまで遡って表示してくれる。

*** 有効化
    Emacs に標準で入ってるので require するだけで有効にできる

    #+begin_src emacs-lisp :tangle inits/20-uniquify.el
    (require 'uniquify)
    #+end_src

*** 設定

    自分は ~ファイル名<フォルダ名>~ みたいな表示になる形式にしている。
    その方がファイル名が主という感じになって使いやすそうだなって。

    そういう意味では ~post-foward~ の方が幅を使わない分良いかもしれない。
    いつか検討しても良いかもしれない。

    #+begin_src emacs-lisp :tangle inits/20-uniquify.el
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    #+end_src
** zoom
   :PROPERTIES:
   :EXPORT_FILE_NAME: zoom
   :END:

*** 概要

    [[https://github.com/cyrus-and/zoom][zoom]] はフォーカスが当たっている Window が大きく表示されるようにするやつ。
    最近流行りのビデオチャットツールではない。

    どこにフォーカスが当たっているかわかりやすくなるし、
    狭い画面でも見たい部分を広げて表示できるので便利。

*** インストール

    いつも通り el-get から入れる。
    GitHub から直接取得するように設定している。

    #+begin_src emacs-lisp :tangle inits/90-zoom.el
    (el-get-bundle cyrus-and/zoom)
    #+end_src

*** 設定

    - 起動時に有効化 :: 1画面しか使えない時は必須なので
    - 比率を黄金比に変更 :: この方が使いやすいっぽい。

    という設定をしている。

    #+begin_src emacs-lisp :tangle inits/90-zoom.el
    (custom-set-variables
     '(zoom-mode t)
     '(zoom-size '(0.618 . 0.618)))
    #+end_src

* ナビゲーション
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: nav
  :END:

** ナビゲーション
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>5. </b>" :weight 5 :disableToc true
   :EXPORT_FILE_NAME: _index
   :END:

   ここではカーソル移動やファイル移動などのナビゲーション系の設定を記載していく

   - [[*ace-window][ace-window]] :: 3つ以上にウインドウを分割している際のウインドウ切替を楽にしてくれるパッケージ
   - [[*avy][avy]] :: 表示されてるところの好きな場所にさくっとジャンプするためのパッケージ

** ace-window
   :PROPERTIES:
   :EXPORT_FILE_NAME: ace-window
   :END:

*** 概要

    Window 間の移動を ace-jump や avy のように
    表示されてる文字の Window に移動するやつ。

    Window が2分割の時は文字も出ないで別の Window に移動してくれる。

    ~C-x o~ にデフォルトで設定されている ~other-window~ は別の window に順番に移動するコマンドなので
    大量に分割していると移動がしんどいのだが
    ace-window を使うと起動して 1 ストロークで移動できるので
    ~C-x o~ をデフォルトの ~other-window~ から ~ace-window~ そのまま置き換えても便利に使える。

*** インストール

    いつも通り el-get でインストールしている。

    #+begin_src emacs-lisp :tangle inits/20-ace-window.el
    (el-get-bundle ace-window)
    #+end_src

*** 設定

    キーバインドは別の箇所で定義しているが
    ~C-x o~ で ace-window が起動するようにしている。

    また Hydra からは ace-swap-window が起動できるようにしている。

    ace-window には色々な機能があるから
    それ用の Hydra を別途定義してもいいかもしれない。

** avy
   :PROPERTIES:
   :EXPORT_FILE_NAME: avy
   :END:

*** 概要
    [[https://github.com/abo-abo/avy][avy]] は好きな文字とか単語など、表示されてる場所にさくっとジャンプするためのパッケージ。
    Vimium の f とかに似てる。

*** インストール

    el-get で普通にインストールしている

    #+begin_src emacs-lisp :tangle inits/50-avy.el
    (el-get-bundle avy)
    #+end_src

*** 設定

    文字の上に重なると元の文字列がよくわからなくなるので、
    移動先の文字の前に表示するようにしている

    #+begin_src emacs-lisp :tangle inits/50-avy.el
    (setq avy-style 'pre)
    #+end_src
*** キーバインド

    グローバルなキーバインドを汚染したくなかったので
    ひとまず Hydra を定義している。

    #+begin_src emacs-lisp :tangle inits/50-avy.el
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define avy-hydra
        (:separator "-" :title "avy" :foreign-key warn :quit-key "q" :exit t)
        ("Char"
         (("c" avy-goto-char       "Char")
          ("C" avy-goto-char-2     "Char 2")
          ("x" avy-goto-char-timer "Char Timer"))

         "Word"
         (("w" avy-goto-word-1 "Word")
          ("W" avy-goto-word-0 "Word 0"))

         "Line"
         (("l" avy-goto-line "Line"))

         "Other"
         (("r" avy-resume "Resume")))))
    #+end_src


    |-----+-------------------------------|
    | Key | 効果                          |
    |-----+-------------------------------|
    | c   | 1文字からの絞り込み           |
    | C   | 2文字から絞り込み             |
    | x   | 任意の文字列からの絞り込み    |
    | w   | 1文字絞り込んで単語先頭に移動 |
    | W   | 絞り込みなしの単語移動        |
    | l   | 列移動                        |
    | r   | 繰り返し同じコマンドを実行    |
    |-----+-------------------------------|

* フレームワーク用の設定
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: framework-config
  :END:

** フレームワーク用の設定
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>6. </b>" :weight 6 :disableToc true
   :END:

   開発に使っている各フレームワーク用の設定をここにまとめている。

   - [[*Ember.js][Ember.js]] :: Web フロントエンド MVC フレームワークである Ember.js 用の設定を書いている

** Ember.js
   :PROPERTIES:
   :EXPORT_FILE_NAME: ember-js
   :END:

*** 概要

    Ember.js 用の Emacs の拡張としては
    ~ember-mode~ と ~handlebars-mode~ が存在する

*** ember-mode                                                       :unused:

    [[https://github.com/madnificent/ember-mode][ember-mode]] は
    Ember.js アプリケーションのファイルナビゲーションや生成を行ってくれるモード。
    実は麦汁さんは使えてない。

    インストールするだけではダメで、
    ember-mode を明示的に起動しないといけない。

    そのためには dir-locals を使うとか
    projectile なんかがやってるように
    フォルダ構成から判定させるみたいなことが必要そう。だるい。

    というわけで死蔵中。

    ついでにいうとキーバインドもだるい系なので
    使う時は Hydra を用意した方が良さそう

    #+begin_src emacs-lisp :tangle inits/40-ember.el
    (el-get-bundle madnificent/ember-mode)
    #+end_src

*** handlebars-mode                                             :improvement:

    [[https://github.com/danielevans/handlebars-mode][handlebars-mode]] は Ember.js のテンプレートエンジンとして採用されている
    Handlebars を書くためのモード。

    syntax highlight と、いくつかの編集機能を備えている。
    が、今のところ麦汁さんは syntax highlight しか使えてない。

    編集コマンドは [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]] で使えるようにしてあげれば良さそう

    #+begin_src emacs-lisp :tangle inits/40-ember.el
    (el-get-bundle handlebars-mode)
    #+end_src

* テスト用ツール
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: testing-tool
  :END:

** テスト用ツール
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>7. </b>" :weight 7 :disableToc true
   :END:

   自動テストを実行するにあたり、追加インストールしているパッケージをここに載せている

   - [[*with-simulated-input][with-simulated-input]] :: 入力処理をシミュレートしてくれるパッケージ
   - [[*mocker.el][mocker.el]] :: Mock/Stub するためのパッケージ。まだ使ってない

** with-simulated-input
   :PROPERTIES:
   :EXPORT_FILE_NAME: with-simulated-input
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1
   :END:

*** 概要
    [[https://github.com/DarwinAwardWinner/with-simulated-input][with-simulated-input]] は入力処理をシミュレートするためのプラグイン。

    公式のドキュメントにあるように

    #+begin_src emacs-lisp
    (with-simulated-input
        "hello SPC world RET"
      (read-string "Say hello to the world: "))
    #+end_src

    を評価すると
    read-string に対して「hello world」を入力したことになるので
    echo エリアに「hello world」と表示される。

    これで何が嬉しいかというと
    Emacs Lisp でやっていることはインタラクティブな部分が大きいので
    そういった要素をテストできるようになる。

    具体的な使用例は [[*test:my/org-todo][test:my/org-todo]] で示す。

*** インストール
    el-get-bundle で GitHub からインストールしている

    #+begin_src emacs-lisp :tangle inits/99-with-simulated-input.el
    (el-get-bundle DarwinAwardWinner/with-simulated-input)
    #+end_src

** mocker.el                                                         :unused:
   :PROPERTIES:
   :EXPORT_FILE_NAME: mocker-el
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 2
   :END:

*** 概要
    [[https://github.com/sigma/mocker.el][mocker.el]] は Emacs Lisp のテストで使う Mock ライブラリ。

    使おうと思って導入したけど、
    自分のやりたいことはちょっと違ったので死蔵中

    便利そうなのでとりあえず置いといている。

*** インストール

    el-get で GitHub から取得している。

    #+begin_src emacs-lisp :tangle inits/99-mocker.el
    (el-get-bundle sigma/mocker.el)
    #+end_src

* テストコード
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: testing
  :END:

** テストコード
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pre "<b>8. </b>" :weight 8 :disableToc true
   :END:

   一部のコマンドなどの設定を書き始めているので設けたセクション。

   暫定的にここに置いているが設定と近い方が良さそうなので
   いずれドキュメント内の位置を移動しそう。

   - [[*実行方法][実行方法]] :: とりあえず書かれているテストを動かす方法を書いている。
   - [[*run-tests][run-tests]] :: テスト全体を動かすための共通設定ファイルの説明
   - [[*my-org-commands-test][my-org-commands-test]] :: org-mode 用に自分が生やしたコマンドのテストファイルの解説

** 実行方法
   :PROPERTIES:
   :EXPORT_FILE_NAME: execution
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 1
   :END:

   テストする時は以下のように叩いたら動く。

   #+begin_src sh
   emacs -Q --batch -l ~/.emacs.d/inits/test/*-test.el -l ~/.emacs.d/inits/test/run-tests.el
   #+end_src

   今まで ~.emacs.d~ にいる状態でしか叩いたことないので
   他の場所にいる時に実行しても大丈夫かはわからない。

   単体でテストしたい時は

   #+begin_example
   -l ~/.emacs.d/inits/test/*-test.el
   #+end_example

   の部分を書き換えたらいいんじゃないかな。やったことないけど。

** run-tests
   :PROPERTIES:
   :EXPORT_FILE_NAME: run-tests
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 2
   :END:

   読み込んだテストをまるっとテストするためのコードをとりあえず置いている。

   #+begin_src emacs-lisp :tangle inits/test/run-tests.el
  (if noninteractive
      (let ((ert-quiet t))
        (ert-run-tests-batch-and-exit)))
   #+end_src

   後述の [[*テストライブラリの読み込み][テストライブラリの読み込み]] などはここで担うべきかとも考えるが
   今はテストファイルが1つしかないので気にしないことにする。

** my-org-commands-test
   :PROPERTIES:
   :EXPORT_FILE_NAME: my-org-commands-test
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :weight 3
   :END:

   org-mode 用に定義したコマンドや関数のテストコード

*** Setup
**** テストライブラリの読み込み

     標準でついてくる ert を採用しているのでそれを読み込んでいる。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     (require 'ert)
     #+end_src

**** el-get の設定の読み込み

     プラグイン管理には el-get を利用しているので
     その設定ファイルを読み込んでいる。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     ;; プラグイン読み込みの前準備
     (load (expand-file-name (concat user-emacs-directory "/init-el-get.el")))
     #+end_src

**** テスト補助のプラグイン読み込み
***** with-simulated-input

      上で説明しているが、
      入力をシミュレートするためのプラグインをテストで利用しているので
      ここで読み込んでいる。

      #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
      ;; 入力シミュレート用のプラグイン
      (load (expand-file-name (concat user-emacs-directory "/inits/99-with-simulated-input")))
      #+end_src

**** 依存プラグインの読み込み                                   :improvement:

     テスト対象が依存しているプラグインを読み込んでいる。
     本来は init.el などの設定ファイルを全部読み込んだ状態でテストをした方が良さそうだが
     現状だとその状態で GitHub Actions で動かせる方法がわからないので
     一旦個別に読み込むようにしている。

***** swiper

      ivy-read を使った機能のテストをするので読み込んでいる。

      #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
      (el-get-bundle abo-abo/swiper)
      #+end_src

**** テスト対象の読み込み

     テストしたいファイルをここで読んでる。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     ;; テスト対象の読み込み
     (load (expand-file-name (concat user-emacs-directory "/inits/68-my-org-commands.el")))
     #+end_src

*** ert-deftest
**** test:my/org-todo-keyword-strings

     ~org-todo-keywords~ から "|" という区切りを除外したり
     "(s)" とかのような高速アクセスのためのキーワードは
     ivy で選択する時には邪魔なので除外したい、ということを表現したテスト。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     (ert-deftest test:my/org-todo-keyword-strings ()
       "Test of `my/org-todo-keyword-strings'."
       (let ((org-todo-keywords '((sequence "TODO" "DOING(!)" "WAIT" "|" "DONE(!)" "SOMEDAY(s)"))))
         (should (equal '("TODO" "DOING" "WAIT" "DONE" "SOMEDAY")
                        (my/org-todo-keyword-strings)))))
     #+end_src

     なお、ここでテストしている関数では
     TODO キーワードを ivy で扱いやすいように整えているだけで
     実際の選択は別の関数が担っている

**** test:my/org-todo

     org-todo を ivy で選択する関数のテストを書いている。

     #+begin_src emacs-lisp :tangle inits/test/68-my-org-commands-test.el
     (ert-deftest test:my/org-todo ()
       "Test of `my/org-todo'."
       (let ((org-todo-keywords '((sequence "TODO" "DOING(!)" "WAIT" "|" "DONE(!)" "SOMEDAY(s)")))
             (result))
         ;; org-mode を読まずに済むように org-todo を差し替えてテストしている
         (cl-letf (((symbol-function 'org-todo)
                    (lambda (keyword)
                      (setq result keyword))))
           (with-simulated-input "DOI RET" (my/org-todo))
           (should (equal "DOING" result)))))
     #+end_src

     ポイントは cl-letf を使って、内部で叩いている関数 ~org-todo~ を一時的に

     #+begin_src emacs-lisp
     (lambda (keyword)
       (setq result keyword))
     #+end_src

     に差し替えているところ。

     org-mode を呼び出さずに代わりの関数に差し替えているので
     テストがしやすくなっている。Stub 的なやつかな。

     何度も使うならこの差し替え処理自体をテストヘルパーにしても良いかもしれない。

     また ivy で選択するので with-simulated-input を使って入力操作を代替している。便利。

* 未整理

  ここにはとりあえず inits 以下に出力できるようにしただけの記述を連ねていきます。
  あとで移動する。

** load-libraries

   #+begin_src emacs-lisp :tangle inits/01-load-libraries.el
   (el-get-bundle s)
   (require 's)
   #+end_src

** override

   #+begin_src emacs-lisp :tangle inits/01-override.el
   ;; posframe が最初に空行があると最後の行を表示しないため
   ;; 一時的にこちらを直してみている
   (with-eval-after-load 'pretty-hydra
     (defun pretty-hydra--maybe-add-title (title docstring)
     "Add TITLE to the DOCSTRING if it's not nil, other return DOCSTRING unchanged."
     (if (null title)
         docstring
       (format "%s\n%s"
               (cond
                ((char-or-string-p title) title)
                ((symbolp title)          (format "%%s`%s" title))
                ((listp title)            (format "%%s%s" (prin1-to-string title)))
                (t                        ""))
               docstring))))
   #+end_src

** migemo

   #+begin_src emacs-lisp :tangle inits/10-migemo.el
   (el-get-bundle migemo)
   (load "migemo")

   ;; Mac
   (let ((path "/usr/local/share/migemo/utf-8/migemo-dict"))
     (if (file-exists-p path)
         (setq migemo-dictionary path)))

   ;; Ubuntu
   (let ((path "/usr/share/cmigemo/utf-8/migemo-dict"))
     (if (file-exists-p path)
         (setq migemo-dictionary path)))

   (let ((path (s-chomp (shell-command-to-string "which cmigemo"))))
     (if (s-ends-with? "not found" path)
         (message "cmigemo not found")
       (setq migemo-command path)))

   (setq migemo-options '("-q" "--emacs"))
   (setq migemo-coding-system 'utf-8-unix)
   (migemo-init)
   #+end_src

** alert

   #+begin_src emacs-lisp :tangle inits/20-alert.el
   ;; alert.el configuration
   ;; https://github.com/jwiegley/alert
   (el-get-bundle alert)
   (setq alert-default-style 'notifier) ;; use terminal-notifier
   #+end_src

** browse-url

   #+begin_src emacs-lisp :tangle inits/20-browse-url.el
   (setq browse-url-generic-program "vivaldi")
   #+end_src

** emojify

   #+begin_src emacs-lisp :tangle inits/20-emojify.el
   (el-get-bundle emojify)
   (el-get-bundle dash)
   (global-emojify-mode 1)
   (global-emojify-mode-line-mode 1)
   #+end_src

** google-this

   #+begin_src emacs-lisp :tangle inits/20-google-this.el
   (el-get-bundle google-this)

   (with-eval-after-load 'pretty-hydra
     (pretty-hydra-define google-this-pretty-hydra
       (:foreign-keys warn :title "Google" :quit-key "q" :color blue :separator "-")
       ("Current"
        (("SPC" google-this-noconfirm "No Confirm")
         ("RET" google-this           "Auto")
         ("w"   google-this-word      "Word")
         ("l"   google-this-line      "Line")
         ("s"   google-this-symbol    "Symbol")
         ("r"   google-this-region    "Region")
         ("e"   google-this-error     "Error"))

        "Feeling Lucky"
        (("L"   google-this-lucky-search         "Lucky")
         ("i"   google-this-lucky-and-insert-url "Insert URL"))

        "Tool"
        (("W" google-this-forecast "Weather")))))
   #+end_src

** google-translate

   #+begin_src emacs-lisp :tangle inits/20-google-translate.el
   (el-get-bundle google-translate)
   #+end_src

** lsp

   #+begin_src emacs-lisp :tangle inits/20-lsp.el
   (el-get-bundle lsp-mode)
   (el-get-bundle lsp-ui)
   (add-hook 'lsp-mode-hook 'lsp-ui-mode)
   (setq lsp-ui-doc-alignment 'window)
   #+end_src

** posframe

   #+begin_src emacs-lisp :tangle inits/20-posframe.el
   (el-get-bundle posframe)
   #+end_src

** smartparens

   #+begin_src emacs-lisp :tangle inits/20-smartparens.el
   (el-get-bundle smartparens)
   (require 'smartparens-config)
   #+end_src

** 20-yasnippet.el

   #+begin_src emacs-lisp :tangle inits/20-yasnippet.el
   (el-get-bundle yasnippet)
   (yas-global-mode 1)

   (with-eval-after-load 'pretty-hydra
     (pretty-hydra-define
       yasnippet-hydra (:separator "-" :title "Yasnippet" :foreign-key warn :quit-key "q" :exit t)
       ("Edit"
        (("n" yas-new-snippet        "New")
         ("v" yas-visit-snippet-file "Visit"))

        "Other"
        (("i" yas-insert-snippet  "Insert")
         ("l" yas-describe-tables "List")
         ("r" yas-reload-all      "Reload all")))))
   #+end_src

** company

   #+begin_src emacs-lisp :tangle inits/30-company.el
   (el-get-bundle company-mode)
   (with-eval-after-load 'company
     ;; active
     (define-key company-active-map (kbd "C-s") 'company-search-candidates))
   #+end_src

** 30-flycheck.el

   #+begin_src emacs-lisp :tangle inits/30-flycheck.el
   (el-get-bundle flycheck)
   (el-get-bundle flycheck-pos-tip)

   (with-eval-after-load 'flycheck
     (flycheck-pos-tip-mode))
   #+end_src

** 30-git-gutter-fringe.el

   #+begin_src emacs-lisp :tangle inits/30-git-gutter-fringe.el
   (el-get-bundle git-gutter-fringe)
   (global-git-gutter-mode t)
   #+end_src

** 30-notify-slack.el

   #+begin_src emacs-lisp :tangle inits/30-notify-slack.el
   (my/load-config "my-notify-slack-config")

   (setq my/notify-slack-enable-p t)

   (defun my/notify-slack-toggle ()
     (interactive)
     (if my/notify-slack-enable-p
         (setq my/notify-slack-enable-p nil)
       (setq my/notify-slack-enable-p t)))

   (defun my/notify-slack (channel text)
     (if my/notify-slack-enable-p
         (start-process "my/org-clock-slack-notifier" "*my/org-clock-slack-notifier*" "my-slack-notifier" channel text)))

   (defun my/notify-slack-times (text)
     (my/notify-slack my/notify-slack-times-channel text))
   #+end_src

** 30-projectile.el

   #+begin_src emacs-lisp :tangle inits/30-projectile.el
   (el-get-bundle projectile)

   (el-get-bundle helm-projectile)
   (helm-projectile-on)

   (projectile-mode)

   ;; 無視するディレクトリ
   (add-to-list 'projectile-globally-ignored-directories "tmp")
   (add-to-list 'projectile-globally-ignored-directories ".tmp")
   (add-to-list 'projectile-globally-ignored-directories "vendor")
   (add-to-list 'projectile-globally-ignored-directories ".sass-cache")
   (add-to-list 'projectile-globally-ignored-directories "coverage")
   (add-to-list 'projectile-globally-ignored-directories "cache")
   (add-to-list 'projectile-globally-ignored-directories "log")

   ;; 無視するファイル
   (add-to-list 'projectile-globally-ignored-files "gems.tags")
   (add-to-list 'projectile-globally-ignored-files "project.tags")
   (add-to-list 'projectile-globally-ignored-files "manifest.json")

   (setq projectile-completion-system 'ivy)
   (el-get-bundle counsel-projectile)

   (with-eval-after-load 'pretty-hydra
     (pretty-hydra-define
       projectile-hydra (:separator "-" :title "Projectile" :foreign-key warn :quit-key "q" :exit t)
       ("File"
        (("f" counsel-projectile-find-file "Find File")
         ("d" counsel-projectile-find-dir "Find Dir")
         ("r" projectile-recentf "Recentf"))

        "Other"
        (("p" (counsel-projectile-switch-project 'neotree-dir) "Switch Project")))))
   #+end_src

** 30-show-paren.el

   #+begin_src emacs-lisp :tangle inits/30-show-paren.el
   (show-paren-mode 1) ;; http://syohex.hatenablog.com/entry/20110331/1301584188
   #+end_src

** 30-skk.el

   #+begin_src emacs-lisp :tangle inits/30-skk.el
   (el-get-bundle ddskk)
   (add-hook 'skk-load-hook
             (lambda ()
               ;; コード中では自動的に英字にする。
               (require 'context-skk)

               (setq skk-comp-mode t) ;; 動的自動補完
               (setq skk-auto-insert-paren t) ;; 閉じ括弧の自動補完
               (setq skk-delete-implies-kakutei nil) ;; ▼モードで BS を押した時に一つ前の候補を表示
               (setq skk-sticky-key ";") ;; sticky-shift key
               (setq skk-henkan-strict-okuri-precedence t) ;; 見出し語と送り仮名がマッチした候補を優先して表示
               (setq skk-show-annotation t) ;; 単語の意味をアノテーションとして表示。例) いぜん /以前;previous/依然;still/

               ;; 半角で入力したい文字
               (setq skk-rom-kana-rule-list
                     (nconc skk-rom-kana-rule-list
                            '((";" nil nil)
                              (":" nil nil)
                              ("?" nil nil)
                              ("!" nil nil))))))

   (setq skk-extra-jisyo-file-list (list '("~/.emacs.d/skk-jisyo/SKK-JISYO.lisp" . japanese-iso-8bit-unix)))

   ;; AquaSKKのL辞書をつかうようにする
   (let ((l-dict (expand-file-name "~/Library/Application Support/AquaSKK/SKK-JISYO.L")))
     (if (file-exists-p l-dict)
         (setq skk-large-jisyo l-dict)))

   (el-get-bundle conao3/ddskk-posframe.el)
   (ddskk-posframe-mode 1)
   #+end_src

** 30-whitespace.el

   #+begin_src emacs-lisp :tangle inits/30-whitespace.el
   (require 'whitespace)
   (setq whitespace-style '(face           ; faceで可視化
                            trailing       ; 行末
                            tabs           ; タブ
                            spaces         ; スペース
                            empty          ; 先頭/末尾の空行
                            space-mark     ; 表示のマッピング
                            tab-mark))

   (setq whitespace-display-mappings
         '((space-mark ?\u3000 [?\u25a1])
           ;; WARNING: the mapping below has a problem.
           ;; When a TAB occupies exactly one column, it will display the
           ;; character ?\xBB at that column followed by a TAB which goes to
           ;; the next TAB column.
           ;; If this is a problem for you, please, comment the line below.
           (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])))

   ;; スペースは全角のみを可視化
   (setq whitespace-space-regexp "\\(\u3000+\\)")

   ;; 行末の空白も表示
   (setq whitespace-trailing-regexp  "\\([ \u00A0]+\\)$")

   ;; 保存前に自動でクリーンアップ
   (setq whitespace-action '(auto-cleanup))
   (global-whitespace-mode 1)
   #+end_src

** 35-magit.el

   #+begin_src emacs-lisp :tangle inits/35-magit.el
   (el-get-bundle magit)
   #+end_src

** 36-forge.el

   #+begin_src emacs-lisp :tangle inits/36-forge.el
   ;; magit と github を連携させるやつ
   (el-get-bundle forge)

   (with-eval-after-load 'magit
     (require 'forge))
   #+end_src

** 40-dumb-jump.el

   #+begin_src emacs-lisp :tangle inits/40-dumb-jump.el
   (el-get-bundle dumb-jump)
   (setq dumb-jump-default-project "~/projects")
   (setq dumb-jump-selector 'ivy)

   (with-eval-after-load 'pretty-hydra
     (pretty-hydra-define dumb-jump-pretty-hydra
       (:foreign-keys warn :title "Dumb jump" :quit-key "q" :color blue :separator "-")
       ("Go"
        (("j" dumb-jump-go "Jump")
         ("o" dumb-jump-go-other-window "Other window"))

        "External"
        (("e" dumb-jump-go-prefer-external "Go external")
         ("x" dumb-jump-go-prefer-external-other-window "Go external other window"))

        "Lock"
        (("l" dumb-jump-quick-look "Quick look"))

        "Other"
        (("b" dumb-jump-back "Back")))))
   #+end_src

** 40-emacs-lisp.el

   #+begin_src emacs-lisp :tangle inits/40-emacs-lisp.el
   (defun my/emacs-lisp-mode-hook ()
     (display-line-numbers-mode 1)
     (company-mode 1)
     (smartparens-mode 1)
     (turn-on-smartparens-strict-mode))
   (add-hook 'emacs-lisp-mode-hook 'my/emacs-lisp-mode-hook)

   (defun my/insert-all-the-icons-code (family)
     (let* ((candidates (all-the-icons--read-candidates-for-family family))
            (prompt     (format "%s Icon: " (funcall (all-the-icons--family-name family))))
            (selection  (completing-read prompt candidates nil t)))
       (insert "(all-the-icons-" (symbol-name family) " \"" selection "\")")))

   (with-eval-after-load 'major-mode-hydra
     (major-mode-hydra-define emacs-lisp-mode (:separator "-" :quit-key "q" :title (concat (all-the-icons-fileicon "elisp") " Emacs Lisp"))
       ("Describe"
        (("F" counsel-describe-function "Function")
         ("V" counsel-describe-variable "Variable"))

        "Insert Icon Code"
        (("@a" (my/insert-all-the-icons-code 'alltheicon) "All the icons")
         ("@f" (my/insert-all-the-icons-code 'fileicon)   "File icons")
         ("@F" (my/insert-all-the-icons-code 'faicon)     "FontAwesome")
         ("@m" (my/insert-all-the-icons-code 'material)   "Material")
         ("@o" (my/insert-all-the-icons-code 'octicon)    "Octicon")
         ("@w" (my/insert-all-the-icons-code 'wicon)      "Weather")))))
   #+end_src

** 40-es6.el

   #+begin_src emacs-lisp :tangle inits/40-es6.el
   (el-get-bundle js2-mode)
   (defun my/js2-mode-hook ()
     (flycheck-mode 1)
     (setq flycheck-disabled-checkers '(javascript-standard javascript-jshint))

     (company-mode 1)
     (turn-on-smartparens-strict-mode)

     (setq js2-basic-offset 2))
   (add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode))
   (add-hook 'js2-mode-hook 'my/js2-mode-hook)
   #+end_src

** 40-gnuplot.el

   #+begin_src emacs-lisp :tangle inits/40-gnuplot.el
   (el-get-bundle gnuplot-mode)
   #+end_src

** 40-markdown.el

   #+begin_src emacs-lisp :tangle inits/40-markdown.el
   (el-get-bundle markdown-mode)
   #+end_src

** 40-ruby.el

   #+begin_src emacs-lisp :tangle inits/40-ruby.el
   (el-get-bundle rbenv)
   (global-rbenv-mode)
   (el-get-bundle enh-ruby-mode)

   (with-eval-after-load 'enh-ruby-mode
     (setq enh-ruby-add-encoding-comment-on-save nil)
     (setq enh-ruby-deep-indent-paren nil) ;; 有効にするとインデントが気持ち悪いのでOFF
     (setq enh-ruby-bounce-deep-indent t))

   ;; TODO: flycheck-mode 用の設定。単に有効にすると警告が多過ぎて無理
   (defun my/enh-ruby-mode-hook ()
     (company-mode 1)
     (lsp)
     (lsp-ui-mode 1)
     (turn-on-smartparens-strict-mode)
     (display-line-numbers-mode 1))

   (add-hook 'enh-ruby-mode-hook 'my/enh-ruby-mode-hook)
   (add-to-list 'context-skk-programming-mode 'enh-ruby-mode)

   (with-eval-after-load 'major-mode-hydra
     (major-mode-hydra-define enh-ruby-mode (:quit-key "q" :title (concat (all-the-icons-alltheicon "ruby-alt") " Ruby commands"))
       ("Enh Ruby"
        (("{" enh-ruby-toggle-block "Toggle block")
         ("e" enh-ruby-insert-end "Insert end"))

        "LSP"
        (("i" lsp-ui-imenu "Imenu")
         ("f" lsp-ui-flycheck-list "Flycheck list"))

        "RSpec"
        (("s" rspec-verify "Run associated spec")
         ("m" rspec-verify-method "Run method spec")
         ("r" rspec-rerun "Rerun")
         ("l" rspec-run-last-failed "Run last failed"))

        "REPL"
        (("I" inf-ruby "inf-ruby"))

        "Other"
        (("j" dumb-jump-go "Dumb Jump")))))
   #+end_src

** 40-scss.el

   #+begin_src emacs-lisp :tangle inits/40-scss.el
   (el-get-bundle rainbow-mode)
   (with-eval-after-load 'scss-mode
     (setq css-indent-offset 2))
   (defun my/scss-mode-hook ()
     (flycheck-mode 1)

     (setq-local lsp-prefer-flymake nil) ;; flycheck が有効にならなくなるのを防ぐ
     (lsp)
     (lsp-ui-mode -1) ;; lsp-ui が有効だと画面上でガチャガチャ height とかの説明をしてうざいので

     ;; lsp-ui とかより後に設定しないと上書きされるのでここに移動した
     (setq-local flycheck-checker 'scss-stylelint)
     (setq-local flycheck-check-syntax-automatically '(save new-line idle-change))

     (company-mode 1)
     (display-line-numbers-mode 1)

     (rainbow-mode))
   (add-hook 'scss-mode-hook 'my/scss-mode-hook)

   (with-eval-after-load 'major-mode-hydra
     (major-mode-hydra-define scss-mode (:quit-key "q" :title (concat (all-the-icons-alltheicon "css3") " CSS"))
       ("Edit"
        (("v" my/replace-var "replace-var")))))
   #+end_src

** 40-view.el

   #+begin_src emacs-lisp :tangle inits/40-view.el
   ;; view-mode 用の設定

   ;; (define-key projectile-rails-mode-map (kbd "C-c r") 'pretty-hydra-projectile-rails-find/body)

   (defun my/setup-view-mode-keymap ()
       (let ((keymap view-mode-map))
         (define-key keymap (kbd "h") 'backward-char)
         (define-key keymap (kbd "j") 'next-line)
         (define-key keymap (kbd "k") 'previous-line)
         (define-key keymap (kbd "l") 'forward-char)

         (define-key keymap (kbd "e") 'forward-word)

         (define-key keymap (kbd "b")   'scroll-down)
         (define-key keymap (kbd "SPC") 'scroll-up)

         (define-key keymap (kbd "g") 'beginning-of-buffer)
         (define-key keymap (kbd "G") 'end-of-buffer)
         (define-key keymap (kbd "<") 'beginning-of-buffer)
         (define-key keymap (kbd ">") 'end-of-buffer)))

   (defun my/view-mode-hook ()
     (my/setup-view-mode-keymap))

   (add-hook 'view-mode-hook 'my/view-mode-hook)

   (defun my/toggle-view-mode ()
     "view-mode と通常モードの切り替えコマンド"
     (interactive)
     (cond (view-mode
            (hl-line-mode -1)
            (view-mode -1))
           (t
            (hl-line-mode 1)
            (view-mode 1))))
   #+end_src

** 40-yaml.el

   #+begin_src emacs-lisp :tangle inits/40-yaml.el
   (el-get-bundle yaml-mode)
   (defun my/yaml-mode-hook ()
     (highlight-indent-guides-mode 1))

   (add-hook 'yaml-mode-hook 'my/yaml-mode-hook)
   #+end_src

** 41-rails.el

   #+begin_src emacs-lisp :tangle inits/41-rails.el
   (el-get-bundle haml-mode)
   (el-get-bundle projectile-rails)
   (projectile-rails-global-mode 1)

   (defun my/projectile-rails-find-uploader ()
     "Find a Uploader."
     (interactive)
     (projectile-rails-find-resource
      "uploader: "
      '(("app/uploaders/" "\\(.+\\)\\.rb$"))
      "app/uploaders/${filename}.rb"))

   (defun my/projectile-rails-find-admin ()
     "Find a ActiveAdmin file."
     (interactive)
     (projectile-rails-find-resource
      "admin: "
      '(("app/admin/" "\\(.+\\)\\.rb$"))
      "app/admin/${filename}.rb"))

   (defun my/projectile-rails-find-form-object ()
     "Find a Form Object."
     (interactive)
     (projectile-rails-find-resource
      "form object: "
      '(("app/models/forms/" "\\(.+\\)\\.rb$"))
      "app/models/forms/${filename}.rb"))

   (defun my/projectile-rails-find-vue ()
     "Find a Vue."
     (interactive)
     (projectile-rails-find-resource
      "vue: "
      '(("app/javascript/" "\\(.+\\)\\.vue$"))
      "app/javascript/${filename}.vue"))

   (defun my/projectile-rails-find-webpack-js ()
     "Find a Webpack js."
     (interactive)
     (projectile-rails-find-resource
      "webpack js: "
      '(("app/javascript/" "\\(.+\\)\\.js$"))
      "app/javascript/${filename}.js"))

   (with-eval-after-load 'pretty-hydra
     (pretty-hydra-define pretty-hydra-projectile-rails-find (:separator "-" :color blue :foreign-keys warn :title "Projectile Rails" :quit-key "q")
       ("Current"
        (("M" projectile-rails-find-current-model      "Current model")
         ("V" projectile-rails-find-current-view       "Current view")
         ("C" projectile-rails-find-current-controller "Current controller")
         ("H" projectile-rails-find-current-helper     "Current helper")
         ("P" projectile-rails-find-current-spec       "Current spec")
         ("Z" projectile-rails-find-current-serializer "Current serializer"))

        "App"
        (("m" projectile-rails-find-model           "Model")
         ("v" projectile-rails-find-view            "View")
         ("c" projectile-rails-find-controller      "Controller")
         ("h" projectile-rails-find-helper          "Helper")
         ("a" my/projectile-rails-find-admin        "ActiveAdmin")
         ("f" my/projectile-rails-find-form-object  "Form object")
         ("@" projectile-rails-find-mailer          "Mailer")
         ("V" my/projectile-rails-find-vue          "Vue")
         ("J" my/projectile-rails-find-webpack-js   "Webpack js")
         ("u" my/projectile-rails-find-uploader     "Controller")
         ("!" projectile-rails-find-validator       "Validator")
         ;; ("y" projectile-rails-find-layout       "Layout")
         ("z" projectile-rails-find-serializer      "Serializer"))

        "Assets"
        (("j" projectile-rails-find-javascript  "Javascript")
         ;; ("w" projectile-rails-find-component)
         ("s" projectile-rails-find-stylesheet  "CSS"))

        "Other"
        (("n" projectile-rails-find-migration    "Migration")
         ("r" projectile-rails-find-rake-task    "Rake task")
         ("i" projectile-rails-find-initializer  "Initializer")
         ("l" projectile-rails-find-lib          "Lib")
         ("p" projectile-rails-find-spec         "Spec")
         ("t" projectile-rails-find-locale       "Translation"))

        "Single Files"
        (("R" projectile-rails-goto-routes   "routes.rb")
         ("G" projectile-rails-goto-gemfile  "Gemfile")
         ("D" projectile-rails-goto-schema   "schema.rb"))))
     (define-key projectile-rails-mode-map (kbd "C-c r") 'pretty-hydra-projectile-rails-find/body))
   #+end_src

** 41-vue.el

   #+begin_src emacs-lisp :tangle inits/41-vue.el
   (define-auto-insert "\\.vue$" "template.vue")

   (el-get-bundle vue-mode)
   (el-get-bundle hlissner/emacs-pug-mode)
   (defun my/css-mode-hook ()
     ;; vue-mode では scss は css-mode が適用される
     ;; https://github.com/AdamNiederer/vue-mode/blob/031edd1f97db6e7d8d6c295c0e6d58dd128b9e71/vue-mode.el#L63
     (setq-local flycheck-checker 'css-stylelint)
     (rainbow-mode 1))

   (defun my/vue-mode-hook ()
     (display-line-numbers-mode t)
     (lsp)
     (flycheck-mode 1))

   (add-hook 'css-mode-hook 'my/css-mode-hook)
   (add-hook 'vue-mode-hook 'my/vue-mode-hook)

   (with-eval-after-load 'major-mode-hydra
     (major-mode-hydra-define css-mode (:quit-key "q" :title (concat (all-the-icons-alltheicon "css3") " CSS"))
       ("Edit"
        (("v" my/replace-var "replace-var")))))
   #+end_src

** 42-rspec.el

   #+begin_src emacs-lisp :tangle inits/42-rspec.el
   (el-get-bundle rspec-mode)

   ;; rspec 実行バッファで byebug などで止った際に
   ;; C-x C-q したら inf-ruby が動くようにする
   ;; byebug か binding.irb 推奨。
   ;; binding.pry は何故かまともに動かない
   (add-hook 'after-init-hook 'inf-ruby-switch-setup)

   ;; C-c C-c で現在の行のテストを実行
   (define-key rspec-mode-map (kbd "C-c C-c") 'rspec-verify-single)
   #+end_src

** 50-browse-at-point.el

   #+begin_src emacs-lisp :tangle inits/50-browse-at-point.el
   (el-get-bundle browse-at-remote)
   #+end_src

** 50-ido.el

   #+begin_src emacs-lisp :tangle inits/50-ido.el
   (ido-mode 1) ;; includes Emacs
   (setq ido-enable-flex-matching t)
   #+end_src

** 50-multiple-cursor.el

   #+begin_src emacs-lisp :tangle inits/50-multiple-cursor.el
   (el-get-bundle multiple-cursors)
   #+end_src

** 50-plantuml.el

   #+begin_src emacs-lisp :tangle inits/50-plantuml.el
   (el-get-bundle plantuml-mode)
   (setq plantuml-default-exec-mode 'jar)
   #+end_src

** 50-todoist.el

   #+begin_src emacs-lisp :tangle inits/50-todoist.el
   (el-get-bundle  abrochard/emacs-todoist)
   (my/load-config "my-todoist-config")
   #+end_src

** 60-open-junk-file.el                                              :unused:

   #+begin_src emacs-lisp :tangle inits/60-open-junk-file.el
   (el-get-bundle open-junk-file)
   (setq open-junk-file-format "~/junk/%Y-%m-%d-%H%M%S.")
   (global-set-key (kbd "C-o") 'open-junk-file)
   #+end_src

** 60-org.el

   #+begin_src emacs-lisp :tangle inits/60-org.el
   (el-get-bundle org-mode :checkout "release_9.3.6") ;; from Git. because melpa cannot resolve dependencies.
   (el-get-bundle org-export-blocks-format-plantuml)
   (org-babel-do-load-languages 'org-babel-load-languages
                                '((plantuml . t)
                                  (sql . t)
                                  (gnuplot . t)
                                  (emacs-lisp . t)
                                  (shell . t)
                                  (js . t)
                                  (ruby . t)))
   (setq org-directory (expand-file-name "~/Documents/org/"))

   ;; org-mode のリンク先が xlsx の時に numbers を開くようにした
   ;; default は内部的には open コマンドが使われる
   (add-to-list 'org-file-apps '("\\.xlsx?\\'" . default))

   (setq org-todo-keywords
         '((sequence "TODO" "DOING(!)" "WAIT" "|" "DONE(!)" "SOMEDAY(s)")))

   ;; DONEの時刻を記録
   (setq org-log-done 'time)
   (setq org-log-into-drawer "LOGBOOK")

   ;; タスク管理系
   (setq my/org-tasks-directory (concat org-directory "tasks/"))

   ;; ob-async
   (el-get-bundle ob-async)
   (require 'ob-async)
   (add-hook 'ob-async-pre-execute-src-block-hook
         '(lambda ()
            (setq org-plantuml-jar-path "~/bin/plantuml.jar")))
   (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images) ;; org-babel-execute 後に画像を再表示
   #+end_src

** 61-calfw.el

   #+begin_src emacs-lisp :tangle inits/61-calfw.el
   (el-get-bundle japanese-holidays)
   (require 'japanese-holidays)
   (setq calendar-holidays (append japanese-holidays))

   (el-get-bundle calfw)
   (require 'calfw)
   (require 'calfw-org)
   #+end_src

** 61-org-agenda.el

   #+begin_src emacs-lisp :tangle inits/61-org-agenda.el
   (el-get-bundle org-super-agenda)

   ;; org-agenda の週の始まりを日曜日に
   (setq org-agenda-start-on-weekday 0)

   ;; org-agenda のデフォルト表示を1日単位にする
   (setq org-agenda-span 'day)

   (setq org-agenda-files
         '("~/Documents/org/ical.org"
           "~/Documents/org/tasks/"))

   ;; agenda に時間の区切りを入れない
   (setq org-agenda-use-time-grid nil)
   (setq org-agenda-block-separator "------------------------------")
   (org-super-agenda-mode 1)

   (setq org-agenda-custom-commands
   '(("h" . "Habits")
     ("hs" "Weekday Start"
      ((tags "Weekday&Start|Daily"
             ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                         (:name "今日の作業" :scheduled today)
                                         (:discard (:anything t))))))))
     ("hf" "Weekday Finish"
      ((tags "Weekday&Finish"
             ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                         (:name "今日の作業" :scheduled today)
                                         (:discard (:anything t))))))))
     ("hw" "Weekly"
      ((tags "Weekly"
             ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                         (:name "今週の作業" :scheduled today)
                                         (:discard (:anything t))))))))
     ("hh" "Holiday"
      ((tags "Weekend|Holiday|Daily"
             ((org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                         (:name "今日の作業" :scheduled today)
                                         (:discard (:anything t))))))))
     ("d" "Today"
      ((agenda "会議など"
               ((org-agenda-span 'day)
                (org-agenda-files my/org-agenda-calendar-files)))
       (tags-todo "-Weekday-Daily-Holiday-Weekly-Weekend"
                  ((org-agenda-prefix-format " ")
                   (org-agenda-overriding-header "今日の作業")
                   (org-habit-show-habits nil)
                   (org-agenda-span 'day)
                   (org-agenda-todo-keyword-format "-")
                   (org-overriding-columns-format "%25ITEM %TODO")
                   (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                   (org-super-agenda-groups '((:name "仕掛かり中" :todo "DOING")
                                              (:name "TODO" :todo "TODO")
                                              (:name "待ち" :todo "WAIT")
                                              (:discard (:anything t))))))
       (alltodo ""
                  ((org-agenda-prefix-format " ")
                   (org-agenda-overriding-header "予定作業")
                   (org-habit-show-habits nil)
                   (org-agenda-span 'day)
                   (org-agenda-todo-keyword-format "-")
                   (org-overriding-columns-format "%25ITEM %TODO")
                   (org-agenda-files '("~/Documents/org/tasks/projects.org"))
                   (org-super-agenda-groups '((:name "〆切が過ぎてる作業" :deadline past)
                                              (:name "予定が過ぎてる作業" :scheduled past)
                                              (:name "今日〆切の作業" :deadline today)
                                              (:name "今日予定の作業" :scheduled today)
                                              (:discard (:anything t))))))
       (tags-todo "Weekday|Daily|Weekly"
                  ((org-agenda-overriding-header "習慣")
                   (org-habit-show-habits t)
                   (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                   (org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                              (:name "今日予定" :scheduled today)
                                              (:discard (:anything t))))))))
     ("D" "Holiday"
      ((tags-todo "-Weekday-Daily-Holiday-Weekly-Weekend"
                  ((org-agenda-prefix-format " ")
                   (org-agenda-overriding-header "休日の作業")
                   (org-habit-show-habits nil)
                   (org-agenda-span 'day)
                   (org-agenda-todo-keyword-format "-")
                   (org-overriding-columns-format "%25ITEM %TODO")
                   (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                   (org-super-agenda-groups '((:name "仕掛かり中" :todo "DOING")
                                              (:name "TODO" :todo "TODO")
                                              (:name "待ち" :todo "WAIT")
                                              (:discard (:anything t))))))
       (tags-todo "Holiday|Weekend|Daily"
                  ((org-agenda-overriding-header "習慣")
                   (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                   (org-super-agenda-groups '((:name "予定が過ぎてる作業" :scheduled past)
                                              (:name "今日予定の作業" :scheduled today)
                                              (:discard (:anything t))))))))
     ("p" . "Projects")
     ("pp" "Projects"
      ((alltodo "" ((org-agenda-prefix-format " ")
                    (org-agenda-overriding-header "今日のタスク")
                    (org-habit-show-habits nil)
                    (org-agenda-span 'day)
                    (org-agenda-todo-keyword-format "-")
                    (org-overriding-columns-format "%25ITEM %TODO")
                    (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                    (org-super-agenda-groups (append
                                              (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DOING" "WAIT")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                              '((:name "その他" :scheduled nil)
                                                (:discard (:anything t)))))))
       (alltodo "" ((org-agenda-prefix-format " ")
                    (org-agenda-overriding-header "予定に入ってる作業")
                    (org-habit-show-habits nil)
                    (org-agenda-span 'day)
                    (org-agenda-todo-keyword-format "-")
                    (org-overriding-columns-format "%25ITEM %TODO")
                    (org-agenda-files '("~/Documents/org/tasks/projects.org"))
                    (org-super-agenda-groups '((:name "〆切が過ぎてる作業" :deadline past)
                                               (:name "予定が過ぎてる作業" :scheduled past)
                                               (:name "今日〆切の作業" :deadline today)
                                               (:name "今日予定の作業" :scheduled today)
                                               (:discard (:anything t))))))
       (todo "DOING" ((org-agenda-files '("~/Documents/org/tasks/projects.org"))))
       (todo "TODO"  ((org-agenda-files '("~/Documents/org/tasks/projects.org"))))))
     ("pP" "Projects without Env"
      ((alltodo "" ((org-agenda-prefix-format " ")
                    (org-agenda-overriding-header "今日のタスク")
                    (org-habit-show-habits nil)
                    (org-agenda-span 'day)
                    (org-agenda-todo-keyword-format "-")
                    (org-overriding-columns-format "%25ITEM %TODO")
                    (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                    (org-super-agenda-groups (append
                                              (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DOING" "WAIT")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                              '((:name "その他" :scheduled nil)
                                                (:discard (:anything t)))))))
       (alltodo "" ((org-agenda-prefix-format " ")
                    (org-agenda-overriding-header "予定に入ってる作業")
                    (org-habit-show-habits nil)
                    (org-agenda-span 'day)
                    (org-agenda-todo-keyword-format "-")
                    (org-overriding-columns-format "%25ITEM %TODO")
                    (org-agenda-files '("~/Documents/org/tasks/projects.org"))
                    (org-super-agenda-groups '((:name "〆切が過ぎてる作業" :deadline past)
                                               (:name "予定が過ぎてる作業" :scheduled past)
                                               (:name "今日〆切の作業" :deadline today)
                                               (:name "今日予定の作業" :scheduled today)
                                               (:discard (:anything t))))))
       (tags-todo "-Emacs-org-Env-Hugo" ((org-agenda-files '("~/Documents/org/tasks/projects.org"))))))
     ("P" "Pointers"
      ((todo "DOING" ((org-agenda-files '("~/Documents/org/tasks/pointers.org"))))
       (todo "TODO"  ((org-agenda-files '("~/Documents/org/tasks/pointers.org"))))))
     ("X" "Finished"
      ((todo "DONE"    ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                            "~/Documents/org/tasks/inbox.org"
                                            "~/Documents/org/tasks/shopping.org"
                                            "~/Documents/org/tasks/next-actions.org"))))
       (todo "SOMEDAY" ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                            "~/Documents/org/tasks/inbox.org"
                                            "~/Documents/org/tasks/shopping.org"
                                            "~/Documents/org/tasks/next-actions.org"))))))

     ("z" "日報"
      ((agenda "" ((org-agenda-span 'day)
                   (org-agenda-overriding-header "")
                   (org-habit-show-habits nil)
                   (org-agenda-format-date "## %Y/%m/%d (%a) 日報")
                   (org-agenda-prefix-format " %?-12t")
                   (org-agenda-files my/org-agenda-calendar-files)
                   (org-super-agenda-groups
                    '((:name "会議など" :time-grid t)
                      (:discard (:anything t))))))
       (todo "DONE" ((org-agenda-prefix-format " ")
                     (org-agenda-overriding-header "対応済")
                     (org-habit-show-habits nil)
                     (org-agenda-span 'day)
                     (org-agenda-todo-keyword-format "-")
                     ;; (org-overriding-columns-format "%25ITEM %TODO %CATEGORY")
                     (org-columns-default-format-for-agenda "%25ITEM %TODO %3PRIORITY")
                     (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                     (org-super-agenda-groups (append
                                               (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DONE")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                               '((:discard (:anything t :name "discard")))))))
       (alltodo "" ((org-agenda-prefix-format " ")
                    (org-agenda-overriding-header "仕掛かり中")
                    (org-habit-show-habits nil)
                    (org-agenda-span 'day)
                    (org-agenda-todo-keyword-format "-")
                    (org-overriding-columns-format "%25ITEM %TODO")
                    (org-agenda-files '("~/Documents/org/tasks/next-actions.org"))
                    (org-super-agenda-groups (append
                                              (mapcar (lambda (key) `(:name ,key :and (:category ,key :todo ("DOING" "WAIT")))) (if (boundp 'my/nippou-categories) my/nippou-categories nil))
                                              '((:discard (:anything t :name "discard")))))))))

     ("H" "HouseWork" ((tags "HouseWork")))
     ("E" . "Env")
     ("EO" "org"
      ((tags-todo "+org"
                  ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                       "~/Documents/org/tasks/inbox.org"))))))
     ("EE" "Emacs without org"
      ((tags-todo "+Emacs-org"
                  ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                       "~/Documents/org/tasks/inbox.org"))))))
     ("Ee" "without Emacs"
      ((tags-todo "+Env-Emacs-org"
                  ((org-agenda-files '("~/Documents/org/tasks/projects.org"
                                       "~/Documents/org/tasks/inbox.org"))))))))
   #+end_src

** 61-org-capture.el

   #+begin_src emacs-lisp :tangle inits/61-org-capture.el
   ;; org-capture
   (defvar org-capture-ical-file (concat org-directory "ical.org"))
   (setq org-capture-ical-file (concat org-directory "ical.org"))

   (setq my/org-capture-interrupted-file  (concat my/org-tasks-directory "interrupted.org"))
   (setq my/org-capture-inbox-file        (concat my/org-tasks-directory "inbox.org"))
   (setq my/org-capture-pointers-file     (concat my/org-tasks-directory "pointers.org"))
   (setq my/org-capture-impediments-file  (concat org-directory "work/scrum/impediments.org"))
   (setq my/org-capture-memo-file         (concat org-directory "memo.org"))
   (setq my/org-capture-sql-file          (concat org-directory "work/sql.org"))
   (setq my/org-capture-shopping-file     (concat my/org-tasks-directory "shopping.org"))
   (setq my/org-capture-2020-summary-file (concat org-directory "private/2020_summary.org"))

   (setq org-capture-templates
         `(("g" "Inbox にエントリー" entry
            (file ,my/org-capture-inbox-file)
            "* TODO %?\n\t")
           ("m" "Memoにエントリー" entry
            (file+headline ,my/org-capture-memo-file "未分類")
            "*** %?\n\t")
           ("p" "Pointersにエントリー" entry
            (file+headline ,my/org-capture-pointers-file "Pointers")
            "** %?\n\t")
           ("i" "割り込みタスクにエントリー" entry ;; 参考: http://grugrut.hatenablog.jp/entry/2016/03/13/085417
            (file+headline ,my/org-capture-interrupted-file "Interrupted")
            "** %?\n\t" :clock-in t :clock-resume t)
           ("I" "障害リストにエントリー" entry
            (file+headline ,my/org-capture-impediments-file "Impediments")
            "** TODO %?\n\t")
           ("R" "2020ふりかえりにエントリー" entry
            (file+headline ,my/org-capture-2020-summary-file "Timeline")
            "** %?\n\t")
           ("s" "SQL にエントリー" entry
            (file+headline ,my/org-capture-sql-file "SQL")
            "** %?\n\t")
           ("S" "買い物リストエントリー" entry
            (file ,my/org-capture-shopping-file)
            "* TODO %?\n\t")
           ("b" "Blogネタにエントリー" entry
            (file+headline ,my/org-capture-memo-file "Blogネタ")
            "** %?\n\t")
           ("P" "Protocol" entry
            (file+headline ,my/org-capture-pointers-file "Pointers")
            "** %?\n   #+BEGIN_QUOTE\n   %i\n   #+END_QUOTE\n\n   Source: %u, [[%:link][%:description]]\n")
           ("L" "Protocol Link" entry
            (file+headline ,my/org-capture-pointers-file "Pointers")
            "** %:description\n   %:link\n   %?\n   Captured On: %U")
           ("c" "同期カレンダーにエントリー" entry
            (file+headline ,org-capture-ical-file "Schedule")
            "** TODO %?\n\t")))
   #+end_src

** 61-org-clock.el

   #+begin_src emacs-lisp :tangle inits/61-org-clock.el
   (setq org-clock-clocktable-default-properties
         '(:maxlevel 10
                    :lang "ja"
                    :scope agenda-with-archives
                    :block today
                    :level 4))

   (defun my/org-clock-in-hook ()
     (let* ((task org-clock-current-task)
            (message (format "開始: %s" task)))
       (my/notify-slack-times message))

     (if (org-clocking-p)
         (org-todo "DOING")))

   (defun my/org-clock-out-hook ()
     (let* ((task org-clock-current-task)
            (message (format "終了: %s" task)))
       (my/notify-slack-times message)))

   (setq org-clock-in-hook 'my/org-clock-in-hook)
   (setq org-clock-out-hook 'my/org-clock-out-hook)

   ;; org-pomodoro

   (el-get-bundle org-pomodoro)
   (setq org-pomodoro-play-sounds nil)
   #+end_src

** 61-org-export.el

   #+begin_src emacs-lisp :tangle inits/61-org-export.el
   ;; フッターなくしたり
   (setq org-export-html-footnotes-section "")
   (setq org-export-html-footnote-format "")
   (setq org-export-with-footnotes nil)
   (setq org-export-with-creator nil)
   (setq org-export-with-author nil)
   (setq org-html-validation-link nil)

   ;; for seesaa blog settings
   (setq org-export-author-info nil)
   (setq org-export-email-info nil)
   (setq org-export-creator-info nil)
   (setq org-export-time-stamp-file nil)
   (setq org-export-with-timestamps nil)
   (setq org-export-with-section-numbers nil)
   (setq org-export-with-sub-superscripts nil)

   ;;; Table of Contents を出さない
   (setq org-export-with-toc nil)

   ;;; h1でサイト名出さない
   (setq org-export-html-preamble nil)
   (setq org-html-preamble nil)

   ;;; *bold* とか /italic/ とか _underline_ とかを<b>とかにしないようにする
   (setq org-export-with-emphasize nil)

   ;; デフォは日本語設定
   (setq org-export-default-language "ja")
   #+end_src

** 61-org-gcal.el                                               :replacement:

   gcal に乗り換えようかと思ってる

   #+begin_src emacs-lisp :tangle inits/61-org-gcal.el
   (el-get-bundle persist) ;; org-gcal に必要
   (el-get-bundle org-gcal)
   (require 'org-gcal)
   (my/load-config "my-org-gcal-config")
   #+end_src

** 61-org-ql.el

   #+begin_src emacs-lisp :tangle inits/61-org-ql.el
   (el-get-bundle org-ql)
   #+end_src

** 61-org-refile.el

   #+begin_src emacs-lisp :tangle inits/61-org-refile.el
   (setq org-refile-use-outline-path 'file)
   (setq org-outline-path-complete-in-steps nil)
   (setq org-refile-targets `((,(concat org-directory "tasks/projects.org") :level . 2)
                              (,(concat org-directory "tasks/pointers.org") :level . 1)
                              (,(concat org-directory "work/scrum/impediments.org") :level . 3)
                              (,(concat org-directory "tasks/next-actions.org") :regexp . "today")
                              (,(concat org-directory "tasks/next-actions.org") :regexp . "C-")
                              (,(concat org-directory "private/2020_summary.org") :level . 2)
                              (,(concat org-directory "tasks/shopping.org") :level . 1)
                              (,(concat org-directory "tasks/someday.org") :level . 1)))
   #+end_src

** 61-org-trello.el

   #+begin_src emacs-lisp :tangle inits/61-org-trello.el
   (el-get-bundle org-trello)
   (defun my/org-trello-fetch-buffer ()
     (interactive)
     (org-trello-sync-buffer t))

   (with-eval-after-load 'pretty-hydra
     (pretty-hydra-define
       org-trello-hydra
       (:separator "-"
                   :color teal
                   :foreign-key warn
                   :title (concat (all-the-icons-faicon "trello") "  Org Trello commands")
                   :quit-key "q")
       ("Install"
        (("i" org-trello-install-board-metadata "Board metadata")
         ("I" org-trello-install-key-and-token "Setup"))

        "Sync"
        (("s" my/org-trello-fetch-buffer "← Trello")
         ("S" org-trello-sync-buffer "→ Trello"))

        "Other"
        (("V" org-trello-version "Version")))))
   #+end_src

** 61-ox-hugo.el

   #+begin_src emacs-lisp :tangle inits/61-ox-hugo.el
   (el-get-bundle ox-hugo)
   (with-eval-after-load 'ox
     (require 'ox-hugo))
   #+end_src

** 61-seesaa-blog.el                                                 :unused:

   #+begin_src emacs-lisp :tangle inits/61-seesaa-blog.el
   (el-get-bundle seesaa-blog-mode) ;; for seesaa blog. dependent org-mdoe
   (my/load-config "my-seesaa-blog-config")
   #+end_src

** 62-nippou.el

   #+begin_src emacs-lisp :tangle inits/62-nippou.el
   (my/load-config "my-nippou-config")

   (defun my/org-nippou-targets ()
         (-concat (my/org-nippou-files) my/org-nippou-additional-files))

   (defun my/org-nippou-files ()
     (let* ((dir my/org-tasks-directory)
            (cmd (format "find \"%s\" -name '*.org' -or -name '*.org_archive'" dir))
            (result (shell-command-to-string cmd))
            (file-names (split-string result "\n")))
       (-remove (lambda (file-name) (string= "" file-name))
                file-names)))

   (defun my/nippou-query ()
     (interactive)
     (org-ql-search
       (my/org-nippou-targets)
       "todo:TODO,DOING,WAIT,DONE ts:on=today"
       :title "日報"
       :super-groups '((:auto-group))))
   #+end_src

** 68-my-org-commands.el

   #+begin_src emacs-lisp :tangle inits/68-my-org-commands.el
   (defun my/org-clock-toggle-display ()
     "行の後ろに掛かった作業時間を表示をしたり消したりを切り替える機能。
   Hydra から利用するために定義している。"
     (interactive)
     (if org-clock-overlays
         (org-clock-remove-overlays)
       (org-clock-display)))

   (defun my/org-todo-keyword-strings ()
     "org-todo-keywords から装飾を省いた文字列のリストを返す関数"
     (let* ((keywords (cl-rest (cl-first org-todo-keywords)))
            (without-delimiter (cl-remove-if (lambda (elm) (string= "|" elm))
                                             keywords)))
       (mapcar (lambda (element)
                 (replace-regexp-in-string "\(.+\)" "" element))
               without-delimiter)))

   (defun my/org-todo ()
     "ivy で TODO ステータスを切り替えるためのコマンド
   Hydra から利用するために定義している。"
     (interactive)
     (ivy-read "Org todo: "
               (my/org-todo-keyword-strings)
               :require-match t
               :sort nil
               :action (lambda (keyword)
                         (org-todo keyword))))

   (defun my/org-tags-view-only-todo ()
     (interactive)
     (org-tags-view t))

   (defun my/open-calendar ()
     (interactive)
     (ivy-read "Calendar: "
               my/calendar-targets
               :require-match t
               :sort nil
               :action (lambda (target)
                         (progn
                           (setq cfw:org-icalendars `(,(concat org-directory target ".org")))
                           (cfw:open-org-calendar)))))
   #+end_src

** 69-org-mode-hydra.el

   #+begin_src emacs-lisp :tangle inits/69-org-mode-hydra.el
   (with-eval-after-load 'major-mode-hydra
     (major-mode-hydra-define org-mode (:separator "-" :quit-key "q" :title (concat (all-the-icons-fileicon "org") " Org commands"))
       ("Insert"
        (("l" org-insert-link                     "Link")
         ("T" org-insert-todo-heading             "Todo")
         ("h" org-insert-heading-respect-content  "Heading")
         ("P" org-set-property                    "Property")
         ("." org-time-stamp                      "Timestamp")
         ("!" org-time-stamp-inactive             "Timestamp(inactive)")
         ("S" org-insert-structure-template       "Snippet"))

        "Edit"
        (("a" org-archive-subtree  "Archive")
         ("r" org-refile           "Refile")
         ("Q" org-set-tags-command "Tag"))

        "View"
        (("N" org-toggle-narrow-to-subtree "Toggle Subtree")
         ("C" org-columns "Columns")
         ("D" my/org-clock-toggle-display  "Toggle Display"))

        "Task"
        (("s" org-schedule         "Schedule")
         ("d" org-deadline         "Deadline")
         ("t" my/org-todo          "Change state")
         ("c" org-toggle-checkbox  "Toggle checkbox"))

        "Clock"
        (("i" org-clock-in      "In")
         ("o" org-clock-out     "Out")
         ("E" org-set-effort    "Effort")
         ("R" org-clock-report  "Report")
         ("p" org-pomodoro      "Pomodoro"))

        "Babel"
        (("e" org-babel-confirm-evaluate "Eval")
         ("x" org-babel-tangle "Export SRC"))

        "Trello"
        (("K" org-trello-mode "On/Off" :toggle org-trello-mode)
         ("k" (if org-trello-mode
                  (org-trello-hydra/body)
                (message "org-trello-mode is not enabled")) "Menu"))

        "Agenda"
        (("," org-cycle-agenda-files "Cycle")))))

   (with-eval-after-load 'pretty-hydra
     (pretty-hydra-define
       global-org-hydra
       (:separator "-"
                   :color teal
                   :foreign-key warn
                   :title (concat (all-the-icons-fileicon "org") " Global Org commands")
                   :quit-key "q")
       ("Main"
        (("a" org-agenda "Agenda")
         ("c" counsel-org-capture "Capture")
         ("l" org-store-link "Store link")
         ("t" my/org-tags-view-only-todo "Tagged Todo"))

        "Calendar"
        (("F" org-gcal-fetch "Fetch Calendar")
         ("C" my/open-calendar "Calendar"))

        "Clock"
        (("i" org-clock-in       "In")
         ("o" org-clock-out      "Out")
         ("r" org-clock-in-last  "Restart")
         ("x" org-clock-cancel   "Cancel")
         ("j" org-clock-goto     "Goto"))

        "Search"
        (("H" org-search-view "Heading"))

        "Pomodoro"
        (("p" org-pomodoro "Pomodoro")))))
   #+end_src

** 70-esa.el

   #+begin_src emacs-lisp :tangle inits/70-esa.el
   (el-get-bundle esa)
   (my/load-config "my-esa-config")
   #+end_src

** 70-key-chord.el

   #+begin_src emacs-lisp :tangle inits/70-key-chord.el
   (el-get-bundle zk-phi/key-chord)
   (setq key-chord-two-keys-delay           0.15
         key-chord-safety-interval-backward 0.1
         key-chord-safety-interval-forward  0.15)
   (key-chord-mode 1)
   #+end_src

** 70-my-commands.el

   #+begin_src emacs-lisp :tangle inits/70-my-commands.el
   (defun my/replace-var (point mark)
     (interactive "r")
     (let* ((str (buffer-substring point mark))
            (cmd (concat "fetch-color-var '" str "'"))
            (response (shell-command-to-string cmd)))
       (delete-region point mark)
       (insert response)))

   (setq my/org-document-dir (expand-file-name "~/Documents/org/"))
   (defun my/create-org-document ()
     (interactive)
     (find-file-other-window my/org-document-dir))

   (defun my/insert-review-requested-prs-as-string ()
     (interactive)
     (let* ((cmd (concat "review-requested-prs " my/github-organization " " my/github-repository))
            (response (shell-command-to-string cmd)))
       (insert response)))
   #+end_src

** 70-scratch-log.el

   #+begin_src emacs-lisp :tangle inits/70-scratch-log.el
   (el-get-bundle mori-dev/scratch-log)

   (require 'scratch-log) ;; TODO: require 以外の方法で処理できないか?
   #+end_src

** 70-tempbuf.el

   #+begin_src emacs-lisp :tangle inits/70-tempbuf.el
   (el-get-bundle tempbuf)

   (setq my/tempbuf-ignore-files '("~/Documents/org/tasks/gtd.org"
                                   "~/Documents/org/tasks/interrupted.org"
                                   "~/Documents/org/tasks/next-actions.org"
                                   ))

   (defun my/find-file-tempbuf-hook ()
     (let ((ignore-file-names (mapcar 'expand-file-name my/tempbuf-ignore-files)))
       (unless (member (buffer-file-name) ignore-file-names)
         (turn-on-tempbuf-mode))))

   (add-hook 'find-file-hook 'my/find-file-tempbuf-hook)
   (add-hook 'dired-mode-hook 'turn-on-tempbuf-mode)
   #+end_src

** 70-w3m.el

   #+begin_src emacs-lisp :tangle inits/70-w3m.el
   (el-get-bundle emacs-w3m)
   #+end_src

** 70-yascroll.el

   #+begin_src emacs-lisp :tangle inits/70-yascroll.el
   (el-get-bundle yascroll)
   #+end_src

** 70-zoom-window.el

   #+begin_src emacs-lisp :tangle inits/70-zoom-window.el
   ;; tmux の prefix z のような動きをするやつ
   (el-get-bundle zoom-window)

   ;; キーバインドは 80-global-keybinds に書いた
   #+end_src

** 80-edit.el

   #+begin_src emacs-lisp :tangle inits/80-edit.el
   (setq indent-tabs-mode nil) ;; インデントにタブを使わない
   (save-place-mode 1)
   #+end_src

** 80-frame-cmds.el

   #+begin_src emacs-lisp :tangle inits/80-frame-cmds.el
   (el-get-bundle frame-cmds)

   (pretty-hydra-define window-control-hydra (:separator "-" :title "Window Control" :exit nil :quit-key "q")
     ("Move"
      (("h" move-frame-left  "Left")
       ("j" move-frame-down  "Down")
       ("k" move-frame-up    "Up")
       ("l" move-frame-right "Right"))

      "Resize"
      (("H" shrink-frame-horizontally "H-")
       ("J" enlarge-frame "V+")
       ("K" shrink-frame "V-")
       ("L" enlarge-frame-horizontally "H+"))))
   #+end_src

** 80-global-keybinds.el

   #+begin_src emacs-lisp :tangle inits/80-global-keybinds.el
   (if (eq window-system 'ns)
       (progn
             (setq ns-alternate-modifier (quote super)) ;; option  => super
             (setq ns-command-modifier (quote meta))))  ;; command => meta

   ;; C-h を backspace に
   (keyboard-translate ?\C-h ?\C-?)
   (global-set-key "\C-h" nil)

   ;; M-g rをstring-replaceに割り当て
   (global-set-key (kbd "M-g r") 'replace-string)

   ;; C-\ で skk が有効になるように
   (global-set-key (kbd "C-\\") 'skk-mode)

   ;; C-s で swiper を代わりに使うことにした
   (global-set-key (kbd "C-s") 'swiper)

   ;; C-x o で ace-window を起動するようにした
   (global-set-key (kbd "C-x o") 'ace-window)

   ;; Shift+矢印でwindow移動
   (windmove-default-keybindings)

   ;; undo-fu
   (global-set-key (kbd "C-/") 'undo-fu-only-undo)
   (global-set-key (kbd "C-M-/") 'undo-fu-only-redo)

   ;; ¥ ではなく \ になるように調整
   (define-key global-map [?¥] [?\\])
   (define-key global-map [?\C-¥] [?\C-\\])
   (define-key global-map [?\M-¥] [?\M-\\])
   (define-key global-map [?\C-\M-¥] [?\C-\M-\\])

   ;; multiple-cursors
   (global-set-key (kbd "C-:") 'mc/edit-lines)
   (global-set-key (kbd "C->") 'mc/mark-next-like-this)
   (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
   (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

   ;; helm
   ;; (global-set-key (kbd "M-y") 'helm-show-kill-ring)
   (global-set-key (kbd "C-;") 'helm-for-files)
   ;; (global-set-key (kbd "M-x") 'helm-M-x)
   ;; (global-set-key (kbd "C-x b") 'helm-mini)
   ;; (global-set-key (kbd "C-x C-f") 'helm-find-files)

   ;; ivy
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "M-y") 'counsel-yank-pop)
   (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)

   ;; zoom-window
   (global-set-key (kbd "C-x 1") 'zoom-window-zoom)

   ;; neotree
   (global-set-key [f8] 'neotree-toggle)

   ;; org-mode
   (setq my/org-mode-prefix-key "C-c o ")
   (global-set-key (kbd (concat my/org-mode-prefix-key "a")) 'org-agenda)
   (global-set-key (kbd (concat my/org-mode-prefix-key "c")) 'org-capture)
   (global-set-key (kbd (concat my/org-mode-prefix-key "l")) 'org-store-link)

   ;; with keychord
   (key-chord-define-global "jk" 'pretty-hydra-usefull-commands/body)

   ;; Don't ask yes or no.
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

** 80-undo-fu.el

   #+begin_src emacs-lisp :tangle inits/80-undo-fu.el
   (el-get-bundle undo-fu)
   #+end_src

** 80-wakatime.el

   #+begin_src emacs-lisp :tangle inits/80-wakatime.el
   (el-get-bundle wakatime-mode)
   (my/load-config "my-wakatime-config")
   (global-wakatime-mode 1)
   #+end_src

** 81-hydra.el

   #+begin_src emacs-lisp :tangle inits/81-hydra.el
   (el-get-bundle hydra)

   ;; hydra-posframe
   ;; https://github.com/Ladicle/hydra-posframe
   ;; 画面真ん中に表示されて便利
   (el-get-bundle hydra-posframe)
   (add-hook 'after-init-hook 'hydra-posframe-enable)

   (el-get-bundle jerrypnz/major-mode-hydra.el)

   (pretty-hydra-define el-get-hydra (:separator "-" :title "el-get" :foreign-key warn :quit-key "q" :exit t)
     ("Install"
      (("i" el-get-install   "Install")
       ("I" el-get-reinstall "Re-install")
       ("D" el-get-remove    "Uninstall"))

      "Update"
      (("s" el-get-self-update  "Self Update")
       ("u" el-get-update       "Update")
       ("A" el-get-update-all   "Update All")
       ("r" el-get-reload       "Reload"))

      "Recipe"
      (("f" el-get-find-recipe-file  "Find recipe"))

      "Lock"
      (("C" el-get-lock-checkout  "Checkout")
       ("U" el-get-lock-unlock    "Unlock"))))

   (pretty-hydra-define
     toggle-hydra
     (:separator "-"
                 :title (concat (all-the-icons-faicon "toggle-on") " Toggle Switches")
                 :foreign-key warn
                 :quit-key "q"
                 :exit t)
     ("View"
      (("z" zoom-mode                 "zoom-mode"      :toggle zoom-mode)
       ("Z" toggle-frame-fullscreen   "Fullscreen"     :toggle (frame-parameter nil 'fullscreen))
       ("b" display-battery-mode      "Battery"        :toggle display-battery-mode)
       ("L" display-line-numbers-mode "Line Number"    :toggle display-line-numbers-mode)
       ("N" neotree-toggle            "Neotree"        :toggle (if (fboundp 'neo-global--window-exists-p) (neo-global--window-exists-p) nil)))

      "Behavior"
      (("S" my/notify-slack-toggle    "Notify Slack"   :toggle my/notify-slack-enable-p)
       ("v" my/toggle-view-mode       "Readonly"       :toggle view-mode)
       ("E" toggle-debug-on-error     "Debug on error" :toggle debug-on-error))))

   (pretty-hydra-define
     subtools-hydra
     (:separator "-"
                 :color teal
                 :foreign-key warn
                 :title (concat (all-the-icons-material "build") " Sub tools")
                 :quit-key "q"
                 :exit t)
     ("Translation"
      (("t" google-translate-at-point "EN => JP")
       ("T" google-translate-at-point-reverse "JP => EN"))

      "Describe"
      (("b" counsel-descbinds "Keybind")
       ("f" counsel-describe-function "Function")
       ("v" counsel-describe-variable "Variable")
       ("m" describe-minor-mode "Minor mode"))

      ;; ("P"   my/open-review-requested-pr "Open Requested PR")
      "Other"
      (("@"   all-the-icons-hydra/body "List icons"))))

   (pretty-hydra-define text-scale-hydra (:separator "-" :title (concat (all-the-icons-material "text_fields") " Text Scale") :exit nil :quit-key "q")
     ("Scale"
      (("+" text-scale-increase "Increase")
       ("-" text-scale-decrease "Decrease")
       ("0" text-scale-adjust   "Adjust"))))

   (pretty-hydra-define pretty-hydra-usefull-commands (:separator "-" :color teal :foreign-key warn :title (concat (all-the-icons-material "build") " Usefull commands") :quit-key "q")
     ("File"
      (("p" projectile-hydra/body "Projectile")
       ("f" counsel-find-file     "Find File")
       ("d" counsel-find-dir      "Find Dir")
       ("r" counsel-recentf       "Recentf")
       ("l" counsel-locate        "Locate")
       ("A" counsel-osx-app       "macOS App"))

      "Edit"
      (("a" align-regexp "Align Regexp")
       (";" comment-dwim "Comment"))

      "Code"
      (("G" counsel-projectile-ag       "Grep")
       ("j" dumb-jump-pretty-hydra/body "Dumb jump")
       ("g" avy-hydra/body)
       ("i" counsel-imenu               "imenu")
       ("y" yasnippet-hydra/body        "Yasnippet")
       ("B" browse-at-remote            "Browse")
       ("m" magit-status                "Magit"))

      "View"
      (("D" delete-other-windows      "Only This Win")
       ("W" window-control-hydra/body "Window Control")
       ("+" text-scale-hydra/body     "Text Scale")
       ("w" ace-swap-window           "Swap Window"))

      "Tool"
      (("SPC" major-mode-hydra              "Hydra(Major)")
       ("s"   toggle-hydra/body             "Toggle switches")
       ("c"   counsel-org-capture           "Capture")
       ("o"   global-org-hydra/body         "Org")
       ("e"   el-get-hydra/body             "el-get")
       ("/"   google-this-pretty-hydra/body "Google")
       ("t"   subtools-hydra/body           "Sub Tools"))))
   #+end_src

** 82-ivy.el

   #+begin_src emacs-lisp :tangle inits/82-ivy.el
   (el-get-bundle abo-abo/swiper) ;; ivy, swiper, counsel が同時に入って来る

   (when (require 'ivy nil t)
     ;; M-o を ivy-dispatching-done-hydra に割り当てる．
     (require 'ivy-hydra)

     ;; `ivy-switch-buffer' (C-x b) のリストに recent files と bookmark を含める．
     (setq ivy-use-virtual-buffers t)

     ;; ミニバッファでコマンド発行を認める
     (when (setq enable-recursive-minibuffers t)
       (minibuffer-depth-indicate-mode 1)) ;; 何回層入ったかプロンプトに表示．

     ;; ESC連打でミニバッファを閉じる
     (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)

     ;; (index/総数) 表示で何番目の候補かわかりやすくする
     (setq ivy-count-format "(%d/%d) ")

     ;; アクティベート
     (ivy-mode 1))

   (counsel-mode 1)

   ;; posframe を使って中央表示
   (el-get-bundle ivy-posframe)
   (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
   (ivy-posframe-mode 1)

   (el-get-bundle ivy-rich)

   ;; https://ladicle.com/post/config/#ivy
   ;; に書かれている関数を丸コピしてきた
   (defun ivy-rich-file-icon (candidate)
     "Display file icons in `ivy-rich'."
     (when (display-graphic-p)
       (let ((icon (if (file-directory-p candidate)
                       (cond
                        ((and (fboundp 'tramp-tramp-file-p)
                              (tramp-tramp-file-p default-directory))
                         (all-the-icons-octicon "file-directory"))
                        ((file-symlink-p candidate)
                         (all-the-icons-octicon "file-symlink-directory"))
                        ((all-the-icons-dir-is-submodule candidate)
                         (all-the-icons-octicon "file-submodule"))
                        ((file-exists-p (format "%s/.git" candidate))
                         (all-the-icons-octicon "repo"))
                        (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                             (apply (car matcher) (list (cadr matcher))))))
                     (all-the-icons-icon-for-file candidate))))
         (unless (symbolp icon)
           (propertize icon
                       'face `(
                               :height 1.1
                               :family ,(all-the-icons-icon-family icon)
                               ))))))

   ;; https://github.com/Yevgnen/ivy-rich#1312-add-icons-for-ivy-switch-buffer
   (defun ivy-rich-switch-buffer-icon (candidate)
     (with-current-buffer
         (get-buffer candidate)
       (let ((icon (all-the-icons-icon-for-mode major-mode)))
         (if (symbolp icon)
             (all-the-icons-icon-for-mode 'fundamental-mode)
           icon))))

   ;; yank-pop の区切りを変更。ちょっと長めにしている
   (setq counsel-yank-pop-separator "\n--------------------\n")

   (setq ivy-rich-display-transformers-list
         '(ivy-switch-buffer
           (:columns
            ((ivy-rich-switch-buffer-icon :width 2)
             (ivy-rich-candidate (:width 30))
             (ivy-rich-switch-buffer-size (:width 7))
             (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
             (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
             (ivy-rich-switch-buffer-project (:width 15 :face success))
             (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
            :predicate
            (lambda (cand) (get-buffer cand)))
           counsel-M-x
           (:columns
            ((counsel-M-x-transformer (:width 40))  ; thr original transformer
             (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
           counsel-find-file
           (:columns
            ((ivy-rich-file-icon)
             (ivy-rich-candidate)))
           counsel-recentf
           (:columns
            ((ivy-rich-file-icon)
             (ivy-rich-candidate (:width 110))))
           ))

   (ivy-rich-mode 1)

   ;; https://www.yewton.net/2020/05/21/migemo-ivy/
   ;; 関数名などは書き換えてる
   (defun my/ivy-migemo-re-builder (str)
     (let* ((sep " \\|\\^\\|\\.\\|\\*")
            (splitted (--map (s-join "" it)
                             (--partition-by (s-matches-p " \\|\\^\\|\\.\\|\\*" it)
                                             (s-split "" str t)))))
       (s-join "" (--map (cond ((s-equals? it " ") ".*?")
                               ((s-matches? sep it) it)
                               (t (migemo-get-pattern it)))
                         splitted))))

   (setq ivy-re-builders-alist '((t . ivy--regex-plus)
                                 (swiper . my/ivy-migemo-re-builder)))
   #+end_src

** 83-counsel-osx-app.el

   #+begin_src emacs-lisp :tangle inits/83-counsel-osx-app.el
   (el-get-bundle counsel-osx-app)
   #+end_src

** 83-prescient.el

   #+begin_src emacs-lisp :tangle inits/83-prescient.el
   (el-get-bundle raxod502/prescient.el)
   (ivy-prescient-mode 1)
   (setq prescient-sort-length-enable nil)
   #+end_src

** 90-font.el

   #+begin_src emacs-lisp :tangle inits/90-font.el
   (let* ((size 14)
          (asciifont "Ricty Diminished")      ; ASCII fonts
          (jpfont "Ricty Diminished")         ; Japanese fonts
          (h (* size 10))
          (fontspec (font-spec :family asciifont))
          (jp-fontspec (font-spec :family jpfont)))
     (set-face-attribute 'default nil :family asciifont :height h)
     (set-fontset-font nil 'japanese-jisx0213.2004-1 jp-fontspec)
     (set-fontset-font nil 'japanese-jisx0213-2 jp-fontspec)
     (set-fontset-font nil 'katakana-jisx0201 jp-fontspec)
     (set-fontset-font nil '(#x0080 . #x024F) fontspec)
     (set-fontset-font nil '(#x0370 . #x03FF) fontspec))
   #+end_src

** 90-fullscreen.el

   #+begin_src emacs-lisp :tangle inits/90-fullscreen.el
   ;; Mac の場合にフルスクリーンにする
   ;; 2020-01-08 yabai WM を導入したのでフルスクリーンじゃない方がよくなったのでコメントアウト
   ;; (if (or (eq window-system 'ns) (eq window-system 'mac))
   ;;     (add-hook 'window-setup-hook
   ;;               (lambda ()
   ;;                 (set-frame-parameter nil 'fullscreen 'fullboth))))

   ;; X Window system の場合にフルスクリーンにする
   (if (eq window-system 'x)
       (add-hook 'window-setup-hook
                 (lambda ()
                   (set-frame-parameter nil 'fullscreen 'fullboth)
                   (set-frame-position nil 0 0))))
   #+end_src

** 90-mode-line.el

   #+begin_src emacs-lisp :tangle inits/90-mode-line.el
   ;; 一部のモードでは mode-line を表示しないようにする
   (el-get-bundle hlissner/emacs-hide-mode-line)
   (add-hook 'neotree-mode-hook #'hide-mode-line-mode)

   ;; 日時を modeline で表示
   (display-time-mode 1)

   ;; (el-get-bundle smart-mode-line)
   ;; (defvar sml/no-confirm-load-theme t)
   ;; (defvar sml/theme 'dark)
   ;; (sml/setup)

   ;; major-mode
   ;; (add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name (all-the-icons-fileicon "elisp"))))
   ;; (add-hook 'enh-ruby-mode-hook (lambda () (setq mode-name (concat "e" (all-the-icons-alltheicon "ruby-alt")))))
   ;; (add-hook 'ruby-mode-hook (lambda () (setq mode-name (all-the-icons-alltheicon "ruby-alt"))))
   ;; (add-hook 'vue-mode-hook (lambda ()
   ;;                            (make-local-variable 'mmm-submode-mode-line-format)
   ;;                            (setq mmm-submode-mode-line-format "~M:~m")
   ;;                            (make-local-variable 'mmm-buffer-mode-display-name)
   ;;                            (setq mmm-buffer-mode-display-name "V")))
   ;; (add-hook 'js-mode-hook (lambda () (setq mode-name "")))
   ;; (add-hook 'pug-mode-hook (lambda () (setq mode-name (all-the-icons-fileicon "pug"))))
   ;; (add-hook 'css-mode-hook (lambda () (setq mode-name (all-the-icons-faicon "css3"))))
   ;; (add-hook 'twittering-mode-hook (lambda () (setq mode-name (all-the-icons-faicon "twitter-square"))))
   ;; (add-hook 'org-mode-hook (lambda () (setq mode-name (all-the-icons-fileicon "org"))))

   (el-get-bundle diminish)
   (require 'diminish)

   (defmacro my/diminish (file mode &optional new-name)
     "https://github.com/larstvei/dot-emacs/blob/master/init.org"
     `(with-eval-after-load ,file
        (diminish ,mode ,new-name)))

   ;; minor-mode
   ;; (my/diminish "helm" 'helm-mode ":helmet-with-cross:")
   ;; (my/diminish "git-gutter" 'git-gutter-mode (all-the-icons-octicon "git-compare"))
   ;; (my/diminish "yasnippet" 'yas-minor-mode " Ys")
   ;; (my/diminish "whitespace" 'whitespace-mode "◽")
   ;; (my/diminish "whitespace" 'global-whitespace-mode "◽")
   ;; (my/diminish "tempbuf" 'tempbuf-mode "")
   ;; (my/diminish "flycheck" 'flycheck-mode "")
   ;; (my/diminish "zoom" 'zoom-mode "")
   ;; (my/diminish "rainbow" 'rainbow-mode "🌈")
   ;; (my/diminish "projectile-rails" 'projectile-rails-mode "🛤")
   ;; (my/diminish "company" 'company-mode "")
   ;; (my/diminish "ElDoc" 'eldoc-mode "")
   #+end_src

** 90-theme.el

   #+begin_src emacs-lisp :tangle inits/90-theme.el
   (el-get-bundle alloy-d/color-theme-molokai)
   (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/el-get/color-theme-molokai"))
   (load-theme 'molokai t)
   #+end_src

** 90-twmode.el

   #+begin_src emacs-lisp :tangle inits/90-twmode.el
   (el-get-bundle twittering-mode)

   (setq twittering-username "mugijiru")
   (setq twittering-jojo-mode t)
   (setq twittering-timer-interval 60)
   ;(setq twittering-auth-method 'xauth)
   (setq twittering-auth-method 'oauth)
   (setq twittering-update-status-function 'twittering-update-status-from-minibuffer)
   (setq twittering-status-format "%i %S(%s)%p, %@:\n%FILL{  %T // from %f%L%r%R}\n ")
   (setq twittering-retweet-format "RT @%s %t")
   (setq twittering-display-remaining t)
   (let ((km twittering-mode-map))
     (define-key km (kbd "SPC") 'scroll-up)
     (define-key km (kbd "b") 'scroll-down)
     (define-key km (kbd "g") 'beginning-of-buffer)
     (define-key km (kbd "G") 'end-of-buffer)
     (define-key km (kbd "<") 'beginning-of-buffer)
     (define-key km (kbd ">") 'end-of-buffer)
     (define-key km (kbd "R") 'twittering-current-timeline)
     (define-key km (kbd "F") 'twittering-favorite)
     (define-key km (kbd "\C-cfd") 'twittering-unfavorite)
     (define-key km (kbd "\C-c[") 'twittering-follow)
     (define-key km (kbd "\C-c]") 'twittering-unfollow)
     nil)
   #+end_src

** 91-doom-modeline.el

   #+begin_src emacs-lisp :tangle inits/91-doom-modeline.el
   (el-get-bundle doom-modeline)
   (doom-modeline-mode 1)
   (setq doom-modeline-vcs-max-length 30)
   (display-battery-mode 1)
   #+end_src

** 92-dashboard.el

   #+begin_src emacs-lisp :tangle inits/92-dashboard.el
   (el-get-bundle dashboard)

   ;; 表示するアイコンをロゴに変更
   (setq dashboard-startup-banner 'logo)

   ;; 表示する情報の設定
   (setq dashboard-items '((recents  . 5)
                           ;; (bookmarks . 5) ;; bookmarks は使ってない
                           (projects . 5)
                           (agenda . 5)
                           ;; (registers . 5) ;; registers は使ってない
                           ))

   ;; 各セクションのタイトル部の先頭にアイコンを表示
   (setq dashboard-set-heading-icons t)

   ;; 各ファイルの先頭にアイコンを表示
   (setq dashboard-set-file-icons t)
   (dashboard-setup-startup-hook)
   #+end_src

** 99-custom-file.el

   #+begin_src emacs-lisp :tangle inits/99-custom-file.el
   (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
   (load custom-file)
   #+end_src

** 99-server.el

   #+begin_src emacs-lisp :tangle inits/99-server.el
   ;; サーバとして起動
   ;; Firefox から org-capture を動かすのに必要
   (require 'server)
   (unless (server-running-p)
     (server-start))
   #+end_src
* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
